---
import { ViewTransitions } from 'astro:transitions';
import BaseHead, { type Props as HeadProps } from '../components/BaseHead.astro';
import Navbar from '../components/Navbar.astro';
import Footer from "../components/Footer.astro"
import GameOfLifeBackground from '../components/GameOfLifeBackground.astro';
 

export type Props = HeadProps & { showHeader?: boolean; headerTitle?: string, headerSubtitle?: string; lang?: string; showGameOfLife?: boolean };

const { showHeader = true, headerTitle = null, headerSubtitle = null, lang = 'es', showGameOfLife = false, ...head } = Astro.props;
---

<!doctype html>
<html lang={lang} class="antialiased break-words">
    <head>
        <BaseHead {...head} />
        <script>
            // Instant theme restoration - optimized for immediate loading
            (function() {
                const validThemes = ['gameboy', 'dos', 'commodore64', 'caution', 'sunset', 'neon', 'ocean', 'forest', 'ember', 'violet'];
                
                // Pre-read localStorage values synchronously
                let savedTheme, savedModePreference;
                try {
                    savedTheme = localStorage.getItem('theme-id');
                    savedModePreference = localStorage.getItem('theme-mode-preference');
                } catch (e) {
                    // localStorage unavailable - will use defaults
                }
                
                // Validate and set defaults immediately
                const theme = (savedTheme && validThemes.includes(savedTheme)) ? savedTheme : 'gameboy';
                const modePreference = savedModePreference || 'system';
                
                // Determine dark mode immediately
                let isDark = false;
                if (modePreference === 'system') {
                    isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                } else {
                    isDark = modePreference === 'dark';
                }
                
                // Apply theme instantly before any rendering
                const html = document.documentElement;
                html.setAttribute('data-theme', theme);
                if (isDark) {
                    html.classList.add('dark');
                } else {
                    html.classList.remove('dark');
                }
                
                // Store globals for React sync
                window.__APPLIED_THEME__ = theme;
                window.__APPLIED_MODE__ = modePreference;
                
                // Update localStorage if needed (non-blocking)
                if (savedTheme !== theme) {
                    try {
                        localStorage.setItem('theme-id', theme);
                    } catch (e) {}
                }
                if (savedModePreference !== modePreference) {
                    try {
                        localStorage.setItem('theme-mode-preference', modePreference);
                    } catch (e) {}
                }
            })();
            
            // Handle Astro page transitions
            document.addEventListener('astro:page-load', function() {
                // Re-apply theme on page transitions to ensure consistency
                if (window.__APPLIED_THEME__ && window.__APPLIED_MODE__) {
                    const html = document.documentElement;
                    html.setAttribute('data-theme', window.__APPLIED_THEME__);
                    
                    const isDark = window.__APPLIED_MODE__ === 'system' 
                        ? window.matchMedia('(prefers-color-scheme: dark)').matches 
                        : window.__APPLIED_MODE__ === 'dark';
                    
                    html.classList.toggle('dark', isDark);
                }
            });
        </script>
        <script src="/as-dithered-image.js" is:inline></script>
        <link rel="stylesheet" href="/src/styles/view-transitions.css">
        <ViewTransitions />
        <style>
            /* View Transitions for theme changes */
            ::view-transition-old(root),
            ::view-transition-new(root) {
                animation-duration: 0.3s;
                animation-timing-function: ease-in-out;
            }
            
            /* Smooth color transitions for theme elements */
            :root {
                view-transition-name: root;
            }
            
            /* Specific transitions for dithered images */
            .dithered-container,
            [class*="dithered-container"] {
                view-transition-name: dithered-image;
            }
            
            ::view-transition-old(dithered-image),
            ::view-transition-new(dithered-image) {
                animation-duration: 0.4s;
                animation-timing-function: ease-in-out;
            }
            
            /* Prevent navbar from participating in theme view transitions */
            ::view-transition-old(navbar),
            ::view-transition-new(navbar) {
                animation: none;
                animation-duration: 0s;
            }
        </style>
    </head>
    <body class="bg-secondary text-main (--max-w-size:1280px) relative">
        <GameOfLifeBackground is404Page={showGameOfLife} />
        <Navbar />
        <div class="mt-8 mx-auto max-w-[var(--max-w-size)]">  
        <main class="text-left px-4">
                <slot />
            </main>
        </div> 
        <Footer />
    </body>
</html>
