---
import { ViewTransitions } from 'astro:transitions';
import BaseHead, { type Props as HeadProps } from '../components/BaseHead.astro';
import Navbar from '../components/Navbar.astro';
import Footer from "../components/Footer.astro"
import GameOfLifeBackground from '../components/GameOfLifeBackground.astro';
import NorwegianDisclaimer from '../components/NorwegianDisclaimer.astro';
import { type Language } from '../i18n/ui';
import { themes } from '../data/themes.js';

export interface Props extends HeadProps {
    showHeader?: boolean;
    headerTitle?: string | null;
    headerSubtitle?: string | null;
    lang?: Language;
    showGameOfLife?: boolean;
}

const { 
    showHeader = true, 
    headerTitle = null, 
    headerSubtitle = null, 
    lang = 'es', 
    showGameOfLife = false, 
    ...head 
} = Astro.props;

// Generate theme data for the client script
const validThemes = themes.map(t => t.id);
const themeColors = themes.reduce((acc, theme) => {
    acc[theme.id] = {
        colorful: theme.colorful, // Using backwards compatibility getters
        contrasty: theme.contrasty
    };
    return acc;
}, {} as Record<string, { colorful: string; contrasty: string }>);

// Get the default theme (first theme in themes.js) colors
const defaultTheme = themes[0]; // Use first theme from themes.js
const defaultColorful = defaultTheme.colorful;
const defaultContrasty = defaultTheme.contrasty;
const defaultThemeId = defaultTheme.id;


declare global {
    interface Window {
        __THEME_ID__?: string;
        __THEME_MODE__?: string;
        __THEME_READY__?: boolean;
    }
}
---

<!doctype html>
<html lang={lang} class="antialiased break-words">
    <head>
        <!-- INSTANT theme application - runs BEFORE any CSS -->
        <script is:inline define:vars={{ validThemes, themeColors, defaultColorful, defaultContrasty, defaultThemeId }}>
            // BLOCKING script - applies theme from localStorage instantly before any CSS
            (function() {
                // Get theme from localStorage immediately
                let savedTheme, savedMode;
                try {
                    savedTheme = localStorage.getItem('theme-id');
                    savedMode = localStorage.getItem('theme-mode');
                } catch (e) {
                    // localStorage unavailable
                }
                
                const themeId = (savedTheme && validThemes.includes(savedTheme)) ? savedTheme : defaultThemeId;
                const mode = savedMode || 'system';
                
                // Get theme colors from embedded data
                const theme = themeColors[themeId] || { 
                    colorful: defaultColorful, 
                    contrasty: defaultContrasty 
                };
                
                // Determine dark mode
                let isDark = false;
                if (mode === 'system') {
                    isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                } else {
                    isDark = mode === 'dark';
                }
                
                // Apply theme INSTANTLY to HTML
                const html = document.documentElement;
                html.setAttribute('data-theme', themeId);
                html.classList.toggle('dark', isDark);
                
                // INJECT CSS variables immediately into HTML
                html.style.setProperty('--theme-colorful', theme.colorful);
                html.style.setProperty('--theme-contrasty', theme.contrasty);
                html.style.setProperty('--color-main', isDark ? theme.colorful : theme.contrasty);
                html.style.setProperty('--color-secondary', isDark ? theme.contrasty : theme.colorful);
                
                // Store for React components
                window.__THEME_ID__ = themeId;
                window.__THEME_MODE__ = mode;
                window.__THEME_READY__ = true;
                
                // Debug: log theme application
                console.log('ðŸŽ¨ Theme applied instantly:', themeId, 'colors:', theme);
            })();
        </script>
        
        <!-- CSS loads AFTER theme is already applied -->
        <style>
            /* Base structure - colors already set by script above */
            :root {
                /* Colors will be overridden by script above */
                --color-main: var(--theme-contrasty);
                --color-secondary: var(--theme-colorful);
            }
            html.dark {
                --color-main: var(--theme-colorful);
                --color-secondary: var(--theme-contrasty);
            }
        </style>
 
        
        <BaseHead {...head} />
        <script src="/as-dithered-image.js" is:inline></script>
        <link rel="stylesheet" href="/src/styles/view-transitions.css">
        <ViewTransitions />
        <style>
            /* View Transitions for theme changes */
            ::view-transition-old(root),
            ::view-transition-new(root) {
                animation-duration: 0.3s;
                animation-timing-function: ease-in-out;
            }
            
            /* Smooth color transitions for theme elements */
            :root {
                view-transition-name: root;
            }
            
            /* Specific transitions for dithered images */
            .dithered-container,
            [class*="dithered-container"] {
                view-transition-name: dithered-image;
            }
            
            ::view-transition-old(dithered-image),
            ::view-transition-new(dithered-image) {
                animation-duration: 0.4s;
                animation-timing-function: ease-in-out;
            }
            
            /* Prevent navbar from participating in theme view transitions */
            ::view-transition-old(navbar),
            ::view-transition-new(navbar) {
                animation: none;
                animation-duration: 0s;
            }
        </style>
    </head>
    <body class="bg-secondary text-main (--max-w-size:1280px) relative">
        <GameOfLifeBackground is404Page={showGameOfLife} />
        <Navbar />
        <NorwegianDisclaimer lang={lang} />
        <div class="mt-8 mx-auto max-w-[var(--max-w-size)]">  
        <main class="text-left px-4">
                <slot />
            </main>
        </div> 
        <Footer />
    </body>
</html>
