---
import { ViewTransitions } from 'astro:transitions';
import BaseHead, { type Props as HeadProps } from '../components/BaseHead.astro';
import Navbar from '../components/Navbar.astro';
import Footer from "../components/Footer.astro"
 

export type Props = HeadProps & { showHeader?: boolean; headerTitle?: string, headerSubtitle?: string; lang?: string };

const { showHeader = true, headerTitle = null, headerSubtitle = null, lang = 'es', ...head } = Astro.props;
---

<!doctype html>
<html lang={lang} class="antialiased break-words">
    <head>
        <BaseHead {...head} />
        <script>
            // Fast theme initialization with validation
            const validThemes = ['gameboy', 'dos', 'commodore64', 'caution', 'sunset', 'neon', 'ocean', 'forest', 'ember', 'violet'];
            
            function applyTheme(themeId: string, isDark: boolean) {
                document.documentElement.setAttribute('data-theme', themeId);
                document.documentElement.classList.toggle('dark', isDark);
            }

            // Load and apply saved theme with validation
            function initializeTheme() {
                try {
                    const savedModePreference = localStorage.getItem('theme-mode-preference') || 'system';
                    const savedMode = savedModePreference;
                    const savedTheme = localStorage.getItem('theme-id') || 'gameboy';
                    
                    // Validate theme exists in current theme list
                    const theme = validThemes.includes(savedTheme) ? savedTheme : 'gameboy';
                    
                    // Handle system mode
                    let isDark = false;
                    if (savedMode === 'system') {
                        isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                    } else {
                        isDark = savedMode === 'dark';
                    }
                    
                    applyTheme(theme, isDark);
                    
                    // Update localStorage if theme was invalid
                    if (theme !== savedTheme) {
                        localStorage.setItem('theme-id', theme);
                    }
                    
                    // Store current applied theme for React components to sync with
                    window.__APPLIED_THEME__ = theme;
                    window.__APPLIED_MODE__ = savedMode;
                } catch (e) {
                    // Fallback if localStorage fails - default to system mode
                    const isSystemDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                    applyTheme('gameboy', isSystemDark);
                    window.__APPLIED_THEME__ = 'gameboy';
                    window.__APPLIED_MODE__ = 'system';
                }
            }
            
            // Initialize theme immediately
            initializeTheme();
            
            // Also handle Astro page transitions
            document.addEventListener('astro:page-load', initializeTheme);
        </script>
        <script src="/as-dithered-image.js" is:inline></script>
        <link rel="stylesheet" href="/src/styles/view-transitions.css">
        <ViewTransitions />
        <style>
            /* View Transitions for theme changes */
            ::view-transition-old(root),
            ::view-transition-new(root) {
                animation-duration: 0.3s;
                animation-timing-function: ease-in-out;
            }
            
            /* Smooth color transitions for theme elements */
            :root {
                view-transition-name: root;
            }
            
            /* Specific transitions for dithered images */
            .dithered-container,
            [class*="dithered-container"] {
                view-transition-name: dithered-image;
            }
            
            ::view-transition-old(dithered-image),
            ::view-transition-new(dithered-image) {
                animation-duration: 0.4s;
                animation-timing-function: ease-in-out;
            }
            
            /* Prevent navbar from participating in theme view transitions */
            ::view-transition-old(navbar),
            ::view-transition-new(navbar) {
                animation: none;
                animation-duration: 0s;
            }
        </style>
    </head>
    <body class="bg-secondary text-main (--max-w-size:1280px) relative">
        <Navbar />
        <div class="mt-8 mx-auto max-w-[var(--max-w-size)]">  
        <main class="text-left px-4">
                <slot />
            </main>
        </div> 
        <Footer />
    </body>
</html>
