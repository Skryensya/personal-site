---
import { ViewTransitions } from 'astro:transitions';
import BaseHead, { type Props as HeadProps } from '../components/BaseHead.astro';
import Navbar from '../components/Navbar.astro';
import Footer from "../components/Footer.astro"
import GameOfLifeBackground from '../components/GameOfLifeBackground.astro';
import WaveDivider from '../components/WaveDivider.astro';
import NorwegianDisclaimer from '../components/NorwegianDisclaimer.astro';
import FaviconManager from '../components/FaviconManager.tsx';
import { type Language } from '../i18n/ui';
import { themes } from '../data/themes.js';

export interface Props extends HeadProps {
    showHeader?: boolean;
    headerTitle?: string | null;
    headerSubtitle?: string | null;
    lang?: Language;
    showGameOfLife?: boolean;
}

const { 
    showHeader = true, 
    headerTitle = null, 
    headerSubtitle = null, 
    lang = 'es', 
    showGameOfLife = false, 
    ...head 
} = Astro.props;

// Generate theme data for the client script
const validThemes = themes.map(t => t.id);
const themeColors = themes.reduce((acc, theme) => {
    acc[theme.id] = {
        colorful: theme.colorful, // Using backwards compatibility getters
        contrasty: theme.contrasty
    };
    return acc;
}, {} as Record<string, { colorful: string; contrasty: string }>);

// Get the default theme (first theme in themes.js) colors
const defaultTheme = themes[0]; // Use first theme from themes.js
const defaultColorful = defaultTheme.colorful;
const defaultContrasty = defaultTheme.contrasty;
const defaultThemeId = defaultTheme.id;


declare global {
    interface Window {
        __THEME_ID__?: string;
        __THEME_MODE__?: string;
        __THEME_READY__?: boolean;
    }
}
---

<!doctype html>
<html lang={lang} class="antialiased break-words">
    <head>
        <!-- INSTANT theme application - runs BEFORE any CSS and PERSISTS during View Transitions -->
        <script is:inline define:vars={{ validThemes, themeColors, defaultColorful, defaultContrasty, defaultThemeId }}>
            // ULTRA-FAST theme application for View Transitions compatibility
            (function() {
                // Create reusable theme application function
                function applyThemeInstantly() {
                    const html = document.documentElement;
                    
                    // Get theme from localStorage immediately
                    let savedTheme, savedMode;
                    try {
                        savedTheme = localStorage.getItem('theme-id');
                        savedMode = localStorage.getItem('theme-mode');
                    } catch (e) {
                        // localStorage unavailable - use defaults
                    }
                    
                    // Determine theme immediately
                    const themeId = (savedTheme && validThemes.includes(savedTheme)) ? savedTheme : defaultThemeId;
                    const mode = savedMode || 'system';
                    
                    // Get theme colors from embedded data
                    const theme = themeColors[themeId] || { 
                        colorful: defaultColorful, 
                        contrasty: defaultContrasty 
                    };
                    
                    // Determine dark mode immediately
                    let isDark = false;
                    if (mode === 'system') {
                        isDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
                    } else {
                        isDark = mode === 'dark';
                    }
                    
                    // Apply ALL theme properties SIMULTANEOUSLY
                    html.setAttribute('data-theme', themeId);
                    html.classList.toggle('dark', isDark);
                    
                    // Set ALL CSS variables in one batch to prevent any flash
                    const mainColor = isDark ? theme.colorful : theme.contrasty;
                    const secondaryColor = isDark ? theme.contrasty : theme.colorful;
                    
                    html.style.setProperty('--theme-colorful', theme.colorful);
                    html.style.setProperty('--theme-contrasty', theme.contrasty);
                    html.style.setProperty('--color-main', mainColor);
                    html.style.setProperty('--color-secondary', secondaryColor);
                    
                    // Store for React components
                    window.__THEME_ID__ = themeId;
                    window.__THEME_MODE__ = mode;
                    window.__THEME_READY__ = true;
                }
                
                // Apply theme immediately on initial load
                applyThemeInstantly();
                
                // Re-apply theme instantly before View Transitions start
                document.addEventListener('astro:before-preparation', applyThemeInstantly);
                document.addEventListener('astro:page-load', applyThemeInstantly);
                
                // Store the function globally so it can be called from anywhere
                window.__APPLY_THEME_INSTANTLY__ = applyThemeInstantly;
            })();
        </script>
        
        <!-- CSS loads AFTER theme is already applied -->
        <style>
            /* Base structure - colors already set by script above */
            /* No default values to prevent flash - script sets all values immediately */
        </style>
 
        
        <BaseHead {...head} lang={lang} />
        <link rel="stylesheet" href="/src/styles/view-transitions.css">
        <ViewTransitions />
        
        <!-- Selection color animator -->
        <script>
            import { startGlobalSelectionAnimation } from '../utils/globalSelectionAnimator.ts';
            startGlobalSelectionAnimation();
        </script>
        
        <!-- Additional theme persistence for View Transitions -->
        <script is:inline>
            // Ensure theme persists during View Transitions
            document.addEventListener('astro:before-preparation', function(e) {
                // Apply theme immediately when preparing for transition
                if (window.__APPLY_THEME_INSTANTLY__) {
                    window.__APPLY_THEME_INSTANTLY__();
                }
            });

            document.addEventListener('astro:after-preparation', function(e) {
                // Apply theme immediately after transition preparation
                if (window.__APPLY_THEME_INSTANTLY__) {
                    window.__APPLY_THEME_INSTANTLY__();
                }
            });
        </script>

        <!-- Apply background after everything is loaded -->
        <script is:inline>
            function applyBodyBackground() {
                const body = document.getElementById('app-body');
                if (body) {
                    body.classList.add('bg-main');
                }
            }

            // Apply background after DOM is loaded
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', applyBodyBackground);
            } else {
                applyBodyBackground();
            }

            // Re-apply after page transitions
            document.addEventListener('astro:page-load', applyBodyBackground);
        </script>
        
        <style>
            /* View Transitions for theme changes */
            ::view-transition-old(root),
            ::view-transition-new(root) {
                animation-duration: 0.3s;
                animation-timing-function: ease-in-out;
            }
            
            /* Smooth color transitions for theme elements */
            :root {
                view-transition-name: root;
            }
            
            /* Prevent navbar from participating in theme view transitions */
            ::view-transition-old(navbar),
            ::view-transition-new(navbar) {
                animation: none;
                animation-duration: 0s;
            }
        </style>
    </head>
    <body class="relative" id="app-body">
        <div class="text-main (--max-w-size:1280px) bg-secondary">

      
        <div class="bg-main w-full h-2"></div> 
        <div class="h-8 !z-100"> 
            <WaveDivider />
        </div>
        <Navbar />
        <FaviconManager client:load />
        <NorwegianDisclaimer lang={lang} />
        <div class="pt-24 mt-8 mx-auto max-w-[var(--max-w-size)] ">
            <main class="text-left px-4">
                <slot />
            </main>
        </div> 
        <Footer lang={lang} />
         
           </div>
    </body>
</html>
