---
import { ViewTransitions } from 'astro:transitions';
import BaseHead, { type Props as HeadProps } from '../components/BaseHead.astro';
import Navbar from '../components/Navbar.astro';
import Footer from "../components/Footer.astro"
import GameOfLifeBackground from '../components/GameOfLifeBackground.astro';
import NorwegianDisclaimer from '../components/NorwegianDisclaimer.astro';
import { type Language } from '../i18n/ui';

export interface Props extends HeadProps {
    showHeader?: boolean;
    headerTitle?: string | null;
    headerSubtitle?: string | null;
    lang?: Language;
    showGameOfLife?: boolean;
}

const { 
    showHeader = true, 
    headerTitle = null, 
    headerSubtitle = null, 
    lang = 'es', 
    showGameOfLife = false, 
    ...head 
} = Astro.props;


declare global {
    interface Window {
        __THEME_ID__?: string;
        __THEME_MODE__?: string;
        __THEME_READY__?: boolean;
    }
}
---

<!doctype html>
<html lang={lang} class="antialiased break-words">
    <head>
        <BaseHead {...head} />
        <script>
            // Instant theme restoration - optimized for immediate loading
            (function() {
                const validThemes = ['dos', 'gameboy', 'commodore64', 'caution', 'sunset', 'neon', 'ocean', 'forest', 'ember', 'violet'];
                const themeColors = {
                    'dos': { colorful: '#ffffff', contrasty: '#000000' },
                    'gameboy': { colorful: '#9bbc0f', contrasty: '#081f08' },
                    'commodore64': { colorful: '#b8d4f0', contrasty: '#0d0d1f' },
                    'caution': { colorful: '#ffff00', contrasty: '#000000' },
                    'sunset': { colorful: '#ff6600', contrasty: '#1a0800' },
                    'neon': { colorful: '#ff0080', contrasty: '#0a0008' },
                    'ocean': { colorful: '#00ccff', contrasty: '#001a33' },
                    'forest': { colorful: '#00ff00', contrasty: '#001100' },
                    'ember': { colorful: '#ff3300', contrasty: '#1a0500' },
                    'violet': { colorful: '#9966ff', contrasty: '#0f0a1a' }
                };
                
                // Pre-read localStorage values synchronously
                let savedTheme, savedMode;
                try {
                    savedTheme = localStorage.getItem('theme-id');
                    savedMode = localStorage.getItem('theme-mode');
                } catch (e) {
                    // localStorage unavailable - will use defaults
                }
                
                // Validate and set defaults immediately
                const themeId = (savedTheme && validThemes.includes(savedTheme)) ? savedTheme : 'dos';
                const mode = savedMode || 'system';
                
                // Determine dark mode immediately
                let isDark = false;
                if (mode === 'system') {
                    isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                } else {
                    isDark = mode === 'dark';
                }
                
                // Apply theme instantly before any rendering
                const html = document.documentElement;
                html.setAttribute('data-theme', themeId);
                html.classList.toggle('dark', isDark);
                
                // Set theme custom properties immediately
                const theme = themeColors[themeId as keyof typeof themeColors];
                if (theme) {
                    html.style.setProperty('--theme-colorful', theme.colorful);
                    html.style.setProperty('--theme-contrasty', theme.contrasty);
                }
                
                // Store globals for React sync
                window.__THEME_ID__ = themeId;
                window.__THEME_MODE__ = mode;
                window.__THEME_READY__ = true;
 
            })();
            
            // Start global selection color animation
            (function() {
                let current = {
                    h: Math.random() * 360,
                    s: Math.random() * 60 + 40,
                    l: Math.random() * 30 + 35
                };
                
                let target = {
                    h: (current.h + (Math.random() * 150 + 30) * (Math.random() > 0.5 ? 1 : -1) + 360) % 360,
                    s: Math.random() * 60 + 40,
                    l: Math.random() * 30 + 35
                };
                
                let lastTargetChange = performance.now();
                
                /**
                 * @param {{ h: number, s: number, l: number }} prev
                 */
                function randomTarget(prev: { h: any; s?: number; l?: number; }) {
                    // Smaller hue changes for more subtle transitions
                    const hueSkip = (Math.random() * 60 + 15) * (Math.random() > 0.5 ? 1 : -1);
                    return {
                        h: (prev.h + hueSkip + 360) % 360,
                        s: Math.random() * 40 + 50, // 50-90% for more consistent saturation
                        l: Math.random() * 20 + 40  // 40-60% for more consistent lightness
                    };
                }
                
                function lerp(a: number, b: number, t: number) {
                    return a + (b - a) * t;
                }
                
                function shortestHueDistance(from: number, to: number) {
                    let diff = (to - from + 360) % 360;
                    if (diff > 180) diff -= 360;
                    return diff;
                }
                
                function tick(now: number) {
                    // Change target every 5 seconds for subtle but noticeable transitions
                    if (now - lastTargetChange > 5000) {
                        target = randomTarget(current);
                        lastTargetChange = now;
                    }

                    // Subtle but visible interpolation - noticeable after a few seconds
                    current.h = (current.h + shortestHueDistance(current.h, target.h) * 0.006 + 360) % 360;
                    current.s = lerp(current.s, target.s, 0.006);
                    current.l = lerp(current.l, target.l, 0.006);

                    // Update CSS custom property
                    const hslColor = `hsl(${current.h.toFixed(1)}, ${current.s.toFixed(1)}%, ${current.l.toFixed(1)}%)`;
                    document.documentElement.style.setProperty('--selection-color', hslColor);

                    requestAnimationFrame(tick);
                }

                requestAnimationFrame(tick);
            })();
            
            // Handle Astro page transitions
            document.addEventListener('astro:page-load', function() {
                // Re-apply theme on page transitions to ensure consistency
                if (window.__THEME_ID__ && window.__THEME_MODE__) {
                    const html = document.documentElement;
                    html.setAttribute('data-theme', window.__THEME_ID__);
                    
                    const isDark = window.__THEME_MODE__ === 'system' 
                        ? window.matchMedia('(prefers-color-scheme: dark)').matches 
                        : window.__THEME_MODE__ === 'dark';
                    
                    html.classList.toggle('dark', isDark);
                }
            });
        </script>
        <script src="/as-dithered-image.js" is:inline></script>
        <link rel="stylesheet" href="/src/styles/view-transitions.css">
        <ViewTransitions />
        <style>
            /* View Transitions for theme changes */
            ::view-transition-old(root),
            ::view-transition-new(root) {
                animation-duration: 0.3s;
                animation-timing-function: ease-in-out;
            }
            
            /* Smooth color transitions for theme elements */
            :root {
                view-transition-name: root;
            }
            
            /* Specific transitions for dithered images */
            .dithered-container,
            [class*="dithered-container"] {
                view-transition-name: dithered-image;
            }
            
            ::view-transition-old(dithered-image),
            ::view-transition-new(dithered-image) {
                animation-duration: 0.4s;
                animation-timing-function: ease-in-out;
            }
            
            /* Prevent navbar from participating in theme view transitions */
            ::view-transition-old(navbar),
            ::view-transition-new(navbar) {
                animation: none;
                animation-duration: 0s;
            }
        </style>
    </head>
    <body class="bg-secondary text-main (--max-w-size:1280px) relative">
        <GameOfLifeBackground is404Page={showGameOfLife} />
        <Navbar />
        <NorwegianDisclaimer lang={lang} />
        <div class="mt-8 mx-auto max-w-[var(--max-w-size)]">  
        <main class="text-left px-4">
                <slot />
            </main>
        </div> 
        <Footer />
    </body>
</html>
