---
import { type CollectionEntry, getCollection } from 'astro:content';
import { getSlugFromId, getLanguageFromId } from '@/utils/content-utils';
import ProjectSinglePage from '@/components/pages/ProjectSinglePage.astro';

export async function getStaticPaths() {
    const allProjects = await getCollection('projects');
    const paths: Array<{
        params: { slug: string };
        props: {
            projectsByLang: Record<string, CollectionEntry<'projects'>>;
            slug: string;
            navigation: {
                previous: {
                    slug: string;
                    projectsByLang: Record<string, CollectionEntry<'projects'>>;
                };
                next: {
                    slug: string;
                    projectsByLang: Record<string, CollectionEntry<'projects'>>;
                };
            };
        };
    }> = [];

    // Group projects by slug
    const projectsBySlug = new Map<string, Record<string, CollectionEntry<'projects'>>>();

    allProjects.forEach((project) => {
        const slug = getSlugFromId(project.id);
        const language = getLanguageFromId(project.id);

        if (!projectsBySlug.has(slug)) {
            projectsBySlug.set(slug, {});
        }
        const langMap = projectsBySlug.get(slug);
        if (langMap) {
            langMap[language] = project;
        }
    });

    const orderedSlugs = Array.from(projectsBySlug.entries())
        .sort(([, a], [, b]) => {
            const refA = a['es'] ?? Object.values(a)[0];
            const refB = b['es'] ?? Object.values(b)[0];
            const dateA = new Date(refA?.data.publishDate ?? '1970-01-01').getTime();
            const dateB = new Date(refB?.data.publishDate ?? '1970-01-01').getTime();
            return dateB - dateA;
        })
        .map(([slug]) => slug);

    const norwegianSlugs = orderedSlugs.filter((slug) => {
        const entries = projectsBySlug.get(slug);
        return entries && entries['no'];
    });

    norwegianSlugs.forEach((slug, index) => {
        const projectsByLang = projectsBySlug.get(slug);
        if (!projectsByLang) {
            return;
        }

        const previousSlug = norwegianSlugs[(index - 1 + norwegianSlugs.length) % norwegianSlugs.length];
        const nextSlug = norwegianSlugs[(index + 1) % norwegianSlugs.length];

        paths.push({
            params: { slug },
            props: {
                projectsByLang,
                slug,
                navigation: {
                    previous: {
                        slug: previousSlug,
                        projectsByLang: projectsBySlug.get(previousSlug)!
                    },
                    next: {
                        slug: nextSlug,
                        projectsByLang: projectsBySlug.get(nextSlug)!
                    }
                }
            }
        });
    });

    return paths;
}

type Props = {
    projectsByLang: Record<string, CollectionEntry<'projects'>>;
    slug: string;
    navigation: {
        previous: {
            slug: string;
            projectsByLang: Record<string, CollectionEntry<'projects'>>;
        };
        next: {
            slug: string;
            projectsByLang: Record<string, CollectionEntry<'projects'>>;
        };
    };
};

const { projectsByLang, slug, navigation } = Astro.props;
---

<ProjectSinglePage
    projectsByLang={projectsByLang}
    slug={slug}
    lang="no"
    navigation={navigation}
/>
