---
import { type CollectionEntry, getCollection } from 'astro:content';
import { getSlugFromId, getLanguageFromId } from '@/utils/content-utils';
import ProjectSinglePage from '@/components/pages/ProjectSinglePage.astro';

export async function getStaticPaths() {
    const allProjects = await getCollection('projects');
    const paths: Array<{
        params: { slug: string };
        props: {
            projectsByLang: Record<string, CollectionEntry<'projects'>>;
            slug: string;
        };
    }> = [];

    // Group projects by slug
    const projectsBySlug = new Map<string, Record<string, CollectionEntry<'projects'>>>();

    allProjects.forEach((project) => {
        const slug = getSlugFromId(project.id);
        const language = getLanguageFromId(project.id);

        if (!projectsBySlug.has(slug)) {
            projectsBySlug.set(slug, {});
        }
        const langMap = projectsBySlug.get(slug);
        if (langMap) {
            langMap[language] = project;
        }
    });

    // Generate paths for Spanish projects
    for (const [slug, projectsByLang] of projectsBySlug) {
        // Only generate if Spanish version exists
        if (projectsByLang['es']) {
            paths.push({
                params: { slug },
                props: {
                    projectsByLang,
                    slug
                }
            });
        }
    }

    return paths;
}

type Props = {
    projectsByLang: Record<string, CollectionEntry<'projects'>>;
    slug: string;
};

const { projectsByLang, slug } = Astro.props;

// Redirect to home with anchor if flag is NOT enabled
if (import.meta.env.PUBLIC_ENABLE_PROJECT_PAGES !== 'true') {
    return Astro.redirect('/#proyectos');
}
---

<ProjectSinglePage
    projectsByLang={projectsByLang}
    slug={slug}
    lang="es"
/>