---
import ComponentShowcaseLayout from '@/layouts/ComponentShowcaseLayout.astro';

const showCode = Astro.url.searchParams.get('code') === 'true';
---

<ComponentShowcaseLayout 
  title="Counter Component" 
  componentName="Counter" 
  technology="React"
>
  {showCode ? (
    <div style="padding: 2rem; background: #000; color: #fff; height: 100%; overflow-y: auto;">
      <h2 style="font-family: 'JetBrains Mono', monospace; font-size: 1.5rem; margin-bottom: 2rem; color: #fff; border-bottom: 2px solid #fff; padding-bottom: 1rem;">
        Counter Component Code
      </h2>
      
      <div style="margin-bottom: 3rem;">
        <h3 style="font-family: 'JetBrains Mono', monospace; font-size: 1.2rem; margin-bottom: 1rem; color: #fff; background: #fff; color: #000; padding: 0.5rem;">
          React Component (Counter.tsx)
        </h3>
        <pre style="background: #111; border: 1px solid #fff; padding: 1.5rem; overflow-x: auto; font-family: 'JetBrains Mono', monospace; font-size: 0.9rem; line-height: 1.4;"><code>{`import React, { useState } from 'react';
import './counter.css';

interface CounterProps {
  initialValue?: number;
  step?: number;
  min?: number;
  max?: number;
}

export function Counter({ 
  initialValue = 0, 
  step = 1, 
  min = -Infinity, 
  max = Infinity 
}: CounterProps) {
  const [count, setCount] = useState(initialValue);

  const increment = () => {
    setCount(prev => Math.min(prev + step, max));
  };

  const decrement = () => {
    setCount(prev => Math.max(prev - step, min));
  };

  const reset = () => {
    setCount(initialValue);
  };

  return (
    <div className="showcase-counter">
      <div className="showcase-counter__display">
        <span className="showcase-counter__value">{count}</span>
      </div>
      
      <div className="showcase-counter__controls">
        <button 
          className="showcase-counter__button showcase-counter__button--decrement"
          onClick={decrement}
          disabled={count <= min}
        >
          −
        </button>
        
        <button 
          className="showcase-counter__button showcase-counter__button--reset"
          onClick={reset}
        >
          Reset
        </button>
        
        <button 
          className="showcase-counter__button showcase-counter__button--increment"
          onClick={increment}
          disabled={count >= max}
        >
          +
        </button>
      </div>
      
      <div className="showcase-counter__info">
        <span>Step: {step}</span>
        {min !== -Infinity && <span>Min: {min}</span>}
        {max !== Infinity && <span>Max: {max}</span>}
      </div>
    </div>
  );
}`}</code></pre>
      </div>
      
      <div style="margin-bottom: 3rem;">
        <h3 style="font-family: 'JetBrains Mono', monospace; font-size: 1.2rem; margin-bottom: 1rem; color: #fff; background: #fff; color: #000; padding: 0.5rem;">
          CSS (counter.css)
        </h3>
        <pre style="background: #111; border: 1px solid #fff; padding: 1.5rem; overflow-x: auto; font-family: 'JetBrains Mono', monospace; font-size: 0.9rem; line-height: 1.4;"><code>{`/* Isolated Counter Styles */
.showcase-counter {
  font-family: 'JetBrains Mono', monospace;
  background: #000;
  color: #fff;
  border: 2px solid #fff;
  padding: 24px;
  max-width: 300px;
  margin: 0 auto;
}

.showcase-counter__display {
  text-align: center;
  margin-bottom: 20px;
  padding: 16px;
  border: 1px solid #fff;
  background: #fff;
  color: #000;
}

.showcase-counter__value {
  font-size: 32px;
  font-weight: bold;
  font-family: 'JetBrains Mono', monospace;
}

.showcase-counter__controls {
  display: flex;
  gap: 8px;
  margin-bottom: 16px;
}

.showcase-counter__button {
  flex: 1;
  padding: 12px;
  background: #fff;
  color: #000;
  border: 1px solid #fff;
  font-family: 'JetBrains Mono', monospace;
  font-weight: bold;
  cursor: pointer;
  font-size: 16px;
}

.showcase-counter__button:hover:not(:disabled) {
  background: #000;
  color: #fff;
  outline: 1px solid #fff;
}

.showcase-counter__button:disabled {
  background: #666;
  color: #999;
  cursor: not-allowed;
}`}</code></pre>
      </div>
      
      <div>
        <h3 style="font-family: 'JetBrains Mono', monospace; font-size: 1.2rem; margin-bottom: 1rem; color: #fff; background: #fff; color: #000; padding: 0.5rem;">
          Usage Example
        </h3>
        <pre style="background: #111; border: 1px solid #fff; padding: 1.5rem; overflow-x: auto; font-family: 'JetBrains Mono', monospace; font-size: 0.9rem; line-height: 1.4;"><code>{`import { Counter } from './Counter';

// Basic usage
<Counter />

// With custom props
<Counter 
  initialValue={10}
  step={5}
  min={0}
  max={100}
/>

// Multiple instances
<Counter initialValue={0} step={1} />
<Counter initialValue={50} step={10} min={0} max={100} />`}</code></pre>
      </div>
    </div>
  ) : (
    <div style="padding: 3rem; background: #000; color: #fff; min-height: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center; gap: 2rem;">
      <h2 style="font-family: 'JetBrains Mono', monospace; font-size: 1.5rem; margin-bottom: 2rem; color: #fff; text-align: center;">
        React Counter Component
      </h2>
      
      <div style="display: flex; flex-direction: column; gap: 2rem; align-items: center; width: 100%;">
        <div id="counter-basic"></div>
        <div id="counter-stepped"></div>
        <div id="counter-limited"></div>
      </div>
      
      <p style="font-family: 'JetBrains Mono', monospace; font-size: 0.9rem; color: #ccc; text-align: center; margin-top: 2rem;">
        Three different counter configurations:<br/>
        Basic • Step by 5 • Limited range (0-50)
      </p>
      
      <script type="module">
        import React from 'https://esm.sh/react@18';
        import ReactDOM from 'https://esm.sh/react-dom@18/client';
        
        const { useState } = React;
        
        function Counter({ initialValue = 0, step = 1, min = -Infinity, max = Infinity }) {
          const [count, setCount] = useState(initialValue);

          const increment = () => {
            setCount(prev => Math.min(prev + step, max));
          };

          const decrement = () => {
            setCount(prev => Math.max(prev - step, min));
          };

          const reset = () => {
            setCount(initialValue);
          };

          return React.createElement('div', {
            className: 'showcase-counter',
            style: {
              fontFamily: 'JetBrains Mono, monospace',
              background: '#000',
              color: '#fff',
              border: '2px solid #fff',
              padding: '24px',
              maxWidth: '300px',
              margin: '0 auto'
            }
          }, [
            React.createElement('div', {
              key: 'display',
              style: {
                textAlign: 'center',
                marginBottom: '20px',
                padding: '16px',
                border: '1px solid #fff',
                background: '#fff',
                color: '#000'
              }
            }, React.createElement('span', {
              style: {
                fontSize: '32px',
                fontWeight: 'bold',
                fontFamily: 'JetBrains Mono, monospace'
              }
            }, count)),
            
            React.createElement('div', {
              key: 'controls',
              style: {
                display: 'flex',
                gap: '8px',
                marginBottom: '16px'
              }
            }, [
              React.createElement('button', {
                key: 'decrement',
                onClick: decrement,
                disabled: count <= min,
                style: {
                  flex: '1',
                  padding: '12px',
                  background: count <= min ? '#666' : '#fff',
                  color: count <= min ? '#999' : '#000',
                  border: '1px solid #fff',
                  fontFamily: 'JetBrains Mono, monospace',
                  fontWeight: 'bold',
                  cursor: count <= min ? 'not-allowed' : 'pointer',
                  fontSize: '16px'
                }
              }, '−'),
              
              React.createElement('button', {
                key: 'reset',
                onClick: reset,
                style: {
                  flex: '1',
                  padding: '12px',
                  background: '#fff',
                  color: '#000',
                  border: '1px solid #fff',
                  fontFamily: 'JetBrains Mono, monospace',
                  fontWeight: 'bold',
                  cursor: 'pointer',
                  fontSize: '12px',
                  textTransform: 'uppercase',
                  letterSpacing: '1px'
                }
              }, 'Reset'),
              
              React.createElement('button', {
                key: 'increment',
                onClick: increment,
                disabled: count >= max,
                style: {
                  flex: '1',
                  padding: '12px',
                  background: count >= max ? '#666' : '#fff',
                  color: count >= max ? '#999' : '#000',
                  border: '1px solid #fff',
                  fontFamily: 'JetBrains Mono, monospace',
                  fontWeight: 'bold',
                  cursor: count >= max ? 'not-allowed' : 'pointer',
                  fontSize: '16px'
                }
              }, '+')
            ]),
            
            React.createElement('div', {
              key: 'info',
              style: {
                display: 'flex',
                justifyContent: 'center',
                gap: '16px',
                fontSize: '10px',
                textTransform: 'uppercase',
                letterSpacing: '1px',
                color: '#ccc'
              }
            }, [
              React.createElement('span', {
                key: 'step',
                style: {
                  padding: '4px 8px',
                  border: '1px solid #666'
                }
              }, `Step: ${step}`),
              min !== -Infinity && React.createElement('span', {
                key: 'min',
                style: {
                  padding: '4px 8px',
                  border: '1px solid #666'
                }
              }, `Min: ${min}`),
              max !== Infinity && React.createElement('span', {
                key: 'max',
                style: {
                  padding: '4px 8px',
                  border: '1px solid #666'
                }
              }, `Max: ${max}`)
            ].filter(Boolean))
          ]);
        }
        
        // Mount multiple counter instances
        const basicRoot = ReactDOM.createRoot(document.getElementById('counter-basic'));
        basicRoot.render(React.createElement(Counter));
        
        const steppedRoot = ReactDOM.createRoot(document.getElementById('counter-stepped'));
        steppedRoot.render(React.createElement(Counter, { initialValue: 10, step: 5 }));
        
        const limitedRoot = ReactDOM.createRoot(document.getElementById('counter-limited'));
        limitedRoot.render(React.createElement(Counter, { initialValue: 25, step: 2, min: 0, max: 50 }));
      </script>
    </div>
  )}
</ComponentShowcaseLayout>