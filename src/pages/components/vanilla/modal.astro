---
import ComponentShowcaseLayout from '@/layouts/ComponentShowcaseLayout.astro';

const showCode = Astro.url.searchParams.get('code') === 'true';
---

<ComponentShowcaseLayout 
  title="Modal Component" 
  componentName="Modal" 
  technology="Vanilla"
>
  {showCode ? (
    <div style="padding: 2rem; background: #000; color: #fff; height: 100%; overflow-y: auto;">
      <h2 style="font-family: 'JetBrains Mono', monospace; font-size: 1.5rem; margin-bottom: 2rem; color: #fff; border-bottom: 2px solid #fff; padding-bottom: 1rem;">
        Modal Component Code
      </h2>
      
      <div style="margin-bottom: 3rem;">
        <h3 style="font-family: 'JetBrains Mono', monospace; font-size: 1.2rem; margin-bottom: 1rem; color: #fff; background: #fff; color: #000; padding: 0.5rem;">
          CSS (modal.css)
        </h3>
        <pre style="background: #111; border: 1px solid #fff; padding: 1.5rem; overflow-x: auto; font-family: 'JetBrains Mono', monospace; font-size: 0.8rem; line-height: 1.4; max-height: 400px;"><code>{`/* Isolated Modal Styles */
.showcase-modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.8);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  font-family: 'JetBrains Mono', monospace;
}

.showcase-modal {
  background: #000;
  border: 2px solid #fff;
  max-width: 500px;
  width: 90%;
  max-height: 80vh;
  overflow-y: auto;
}

.showcase-modal__header {
  padding: 1rem 1.5rem;
  border-bottom: 1px solid #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: #fff;
  color: #000;
}

.showcase-modal__title {
  font-weight: bold;
  font-size: 1.1rem;
  margin: 0;
}

.showcase-modal__close {
  background: none;
  border: none;
  color: #000;
  font-size: 1.5rem;
  cursor: pointer;
  font-family: 'JetBrains Mono', monospace;
  font-weight: bold;
  padding: 0;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.showcase-modal__close:hover {
  background: #000;
  color: #fff;
}

.showcase-modal__body {
  padding: 1.5rem;
  color: #fff;
}

.showcase-modal__footer {
  padding: 1rem 1.5rem;
  border-top: 1px solid #fff;
  display: flex;
  gap: 0.5rem;
  justify-content: flex-end;
}

.showcase-modal__button {
  background: #fff;
  color: #000;
  border: 1px solid #fff;
  padding: 0.5rem 1rem;
  font-family: 'JetBrains Mono', monospace;
  font-weight: bold;
  cursor: pointer;
  font-size: 0.9rem;
  text-transform: uppercase;
  letter-spacing: 1px;
}

.showcase-modal__button:hover {
  background: #000;
  color: #fff;
  outline: 1px solid #fff;
}

.showcase-modal__button--primary {
  background: #000;
  color: #fff;
}

.showcase-modal__button--primary:hover {
  background: #fff;
  color: #000;
}`}</code></pre>
      </div>
      
      <div style="margin-bottom: 3rem;">
        <h3 style="font-family: 'JetBrains Mono', monospace; font-size: 1.2rem; margin-bottom: 1rem; color: #fff; background: #fff; color: #000; padding: 0.5rem;">
          JavaScript (modal.js) - Truncated
        </h3>
        <pre style="background: #111; border: 1px solid #fff; padding: 1.5rem; overflow-x: auto; font-family: 'JetBrains Mono', monospace; font-size: 0.8rem; line-height: 1.4; max-height: 400px;"><code>{`// Vanilla Modal Component
class ShowcaseModal {
  constructor(options = {}) {
    this.options = {
      title: 'Modal Title',
      content: 'Modal content goes here.',
      showCloseButton: true,
      showFooter: true,
      buttons: [
        { text: 'Cancel', action: 'close' },
        { text: 'Confirm', action: 'confirm', primary: true }
      ],
      onOpen: () => {},
      onClose: () => {},
      onConfirm: () => {},
      ...options
    };
    
    this.isOpen = false;
    this.overlay = null;
    this.modal = null;
  }
  
  open() {
    if (this.isOpen) return;
    
    this.create();
    document.body.appendChild(this.overlay);
    this.isOpen = true;
    
    // Prevent body scroll
    document.body.style.overflow = 'hidden';
    
    this.options.onOpen();
  }
  
  close() {
    if (!this.isOpen) return;
    
    document.body.removeChild(this.overlay);
    this.isOpen = false;
    
    // Restore body scroll
    document.body.style.overflow = '';
    
    this.options.onClose();
  }
  
  // ... more methods
}`}</code></pre>
      </div>
      
      <div>
        <h3 style="font-family: 'JetBrains Mono', monospace; font-size: 1.2rem; margin-bottom: 1rem; color: #fff; background: #fff; color: #000; padding: 0.5rem;">
          Usage Example
        </h3>
        <pre style="background: #111; border: 1px solid #fff; padding: 1.5rem; overflow-x: auto; font-family: 'JetBrains Mono', monospace; font-size: 0.9rem; line-height: 1.4;"><code>{`<!-- HTML -->
<button 
  data-showcase-modal 
  data-title="Confirmation"
  data-content="Are you sure you want to proceed?"
  data-on-confirm="user-confirmed"
  class="showcase-trigger"
>
  Open Modal
</button>

<!-- JavaScript -->
const modal = new ShowcaseModal({
  title: 'Custom Modal',
  content: '<p>Custom content with <strong>HTML</strong></p>',
  buttons: [
    { text: 'Cancel', action: 'close' },
    { text: 'Save', action: 'confirm', primary: true }
  ],
  onConfirm: () => {
    console.log('User confirmed!');
  }
});

modal.open();`}</code></pre>
      </div>
    </div>
  ) : (
    <div style="padding: 3rem; background: #000; color: #fff; min-height: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center; gap: 2rem;">
      <link rel="stylesheet" href="/src/components/showcase/vanilla/modal/modal.css" />
      
      <h2 style="font-family: 'JetBrains Mono', monospace; font-size: 1.5rem; margin-bottom: 2rem; color: #fff; text-align: center;">
        Vanilla Modal Component
      </h2>
      
      <div style="display: flex; flex-direction: column; gap: 1.5rem; align-items: center;">
        <button 
          data-showcase-modal 
          data-title="Simple Modal"
          data-content="This is a simple modal dialog with default buttons."
          data-on-confirm="simple-confirmed"
          class="showcase-trigger"
        >
          Open Simple Modal
        </button>
        
        <button 
          data-showcase-modal 
          data-title="Confirmation Dialog"
          data-content="Are you sure you want to delete this item? This action cannot be undone."
          data-on-confirm="delete-confirmed"
          class="showcase-trigger"
        >
          Delete Item
        </button>
        
        <button id="custom-modal-trigger" class="showcase-trigger">
          Open Custom Modal
        </button>
      </div>
      
      <p style="font-family: 'JetBrains Mono', monospace; font-size: 0.9rem; color: #ccc; text-align: center; margin-top: 2rem;">
        Click outside the modal or the Ã— button to close.<br/>
        Check the console for confirmation events.
      </p>
      
      <script src="/src/components/showcase/vanilla/modal/modal.js"></script>
      <script>
        document.addEventListener('DOMContentLoaded', () => {
          // Custom modal example
          const customTrigger = document.getElementById('custom-modal-trigger');
          const customModal = new ShowcaseModal({
            title: 'Advanced Modal',
            content: `
              <div style="font-family: 'JetBrains Mono', monospace;">
                <h4 style="margin: 0 0 1rem 0; color: #fff;">This is a custom modal</h4>
                <p style="margin: 0 0 1rem 0; color: #ccc; font-size: 0.9rem;">
                  This modal was created programmatically with custom content and buttons.
                </p>
                <ul style="margin: 0; color: #ccc; font-size: 0.8rem;">
                  <li>Custom HTML content</li>
                  <li>Programmatic creation</li>
                  <li>Custom button configuration</li>
                  <li>Event callbacks</li>
                </ul>
              </div>
            `,
            buttons: [
              { text: 'Later', action: 'close' },
              { text: 'Learn More', action: () => console.log('Learn more clicked!') },
              { text: 'Get Started', action: 'confirm', primary: true }
            ],
            onOpen: () => console.log('Custom modal opened'),
            onClose: () => console.log('Custom modal closed'),
            onConfirm: () => console.log('User wants to get started!')
          });
          
          customTrigger.addEventListener('click', () => {
            customModal.open();
          });
        });
      </script>
    </div>
  )}
</ComponentShowcaseLayout>