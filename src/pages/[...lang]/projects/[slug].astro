---
import { type CollectionEntry, getCollection } from 'astro:content';
import { getLangFromUrl } from '@/i18n/utils';
import { getSlugFromId, getLanguageFromId } from '@/utils/content-utils';
import ProjectPage from '../../../components/ProjectPage.astro';

export async function getStaticPaths() {
    const allProjects = await getCollection('projects');
    const paths: any[] = [];
    const languages = ['en', 'no'] as const; // Only non-default languages need explicit paths
    
    // Group projects by slug
    const projectsBySlug = new Map();
    
    allProjects.forEach((project) => {
        const slug = getSlugFromId(project.id);
        const language = getLanguageFromId(project.id);
        
        if (!projectsBySlug.has(slug)) {
            projectsBySlug.set(slug, {});
        }
        projectsBySlug.get(slug)[language] = project;
    });
    
    // Generate paths for non-default languages only
    for (const [slug, projectsByLang] of projectsBySlug) {
        for (const lang of languages) {
            if (projectsByLang[lang]) { // Only create path if project exists in this language
                paths.push({
                    params: { lang, slug },
                    props: { 
                        projectsByLang,
                        slug,
                        language: lang
                    }
                });
            }
        }
    }
    
    return paths;
}

type Props = { 
    projectsByLang: Record<string, CollectionEntry<'projects'>>;
    slug: string;
    language: string;
};

const { projectsByLang, slug, language } = Astro.props;
const currentLocale = getLangFromUrl(Astro.url);
---

<ProjectPage 
    projectsByLang={projectsByLang}
    slug={slug}
    currentLocale={currentLocale}
    language={language}
/>