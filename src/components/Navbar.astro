--- 
import { themes } from '../data/themes.js';
import HeaderControls from './HeaderControls.tsx';
import LanguageSwitcher from './LanguageSwitcher.tsx';
import MobileMenu from './MobileMenu.tsx';
import { getLangFromUrl } from '@/i18n/utils';
import { useTranslations } from '@/i18n/utils';
import { defaultLang } from '@/i18n/ui';

const currentLocale = getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname;
const t = useTranslations(currentLocale);

// Check if current page is CV to make header non-sticky
const isCVPage = currentPath.includes('/cv');

const navItems = [
  { label: 'ALLISON PEÑA', href: '/', hotkey: null },
  { label: t('nav.projects').toUpperCase(), href: '/projects', hotkey: 'p' },
  { label: t('nav.showcase').toUpperCase(), href: '/components', hotkey: 's' },
  { label: t('nav.cv').toUpperCase(), href: '/cv', hotkey: 'c' },
  { label: t('nav.about').toUpperCase(), href: '/about', hotkey: 'm' }
];

---

<!-- Apply theme immediately from localStorage before any rendering -->
<script>
  // Immediate theme application - no delays, no waiting for React
  (function() {
    if (typeof window === 'undefined') return;
    
    const savedThemeId = localStorage.getItem('theme-id');
    const savedMode = localStorage.getItem('theme-mode') || 'system';
    
    // Apply theme immediately if we have one saved
    if (savedThemeId) {
      // Import theme data inline to avoid module loading delays
      const themes = {
        'void': { colorful: '#00ff00', contrasty: '#000000' },
        'phantom': { colorful: '#ff00ff', contrasty: '#000000' },
        'azure': { colorful: '#0080ff', contrasty: '#ffffff' },
        'ember': { colorful: '#ff4500', contrasty: '#000000' },
        'violet': { colorful: '#8a2be2', contrasty: '#ffffff' },
        'crimson': { colorful: '#dc143c', contrasty: '#ffffff' },
        'forest': { colorful: '#228b22', contrasty: '#ffffff' }
      };
      
      const theme = themes[savedThemeId];
      if (theme) {
        // Determine if dark mode should be applied
        let isDark = false;
        if (savedMode === 'dark') {
          isDark = true;
        } else if (savedMode === 'system') {
          isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        }
        
        // Apply theme colors immediately
        const root = document.documentElement;
        if (isDark) {
          root.style.setProperty('--color-main', theme.contrasty);
          root.style.setProperty('--color-secondary', theme.colorful);
          root.classList.add('dark');
        } else {
          root.style.setProperty('--color-main', theme.colorful);
          root.style.setProperty('--color-secondary', theme.contrasty);
          root.classList.remove('dark');
        }
        
        // Set global state for React components
        window.__THEME_ID__ = savedThemeId;
        window.__THEME_MODE__ = savedMode;
        window.__THEME_READY__ = true;
      }
    }
  })();
</script>

<nav class={`${isCVPage ? 'relative' : 'sticky top-0'} z-[300] flex justify-center mx-auto max-w-[var(--max-w-size)]`} style="--navbar-height: 76px;">
  <div class={`max-w-[1280px] w-full px-4 mt-4`}>
    <div class="flex items-start justify-between gap-2 flex-nowrap diagonal-stripe px-4 py-2">
      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-start gap-x-2 gap-y-1 flex-wrap flex-1 mr-2">
        {navItems.map((item, index) => (
          <a 
            href={item.href}
            class="flex items-center gap-1.5 px-2 py-1 h-7 md:h-8 bg-secondary border-double border-2 border-main font-grotesk text-sm !font-thin text-main no-underline pointer-events-auto hover:bg-main hover:text-secondary active:bg-main active:text-secondary nav-link font-bold uppercase tracking-wide cursor-pointer whitespace-nowrap justify-center shadow-[inset_0_0_0_2px_var(--color-secondary)]"
            data-hotkey={item.hotkey}
            aria-label={item.hotkey ? `${item.label} (Press ${item.hotkey.toUpperCase()})` : item.label}
          >
            {item.hotkey && <span class="text-xs font-bold font-mono">[{item.hotkey.toUpperCase()}]</span>}
            <span class="font-semibold">{item.label}</span>
          </a>
        ))}
      </div>

      <!-- Mobile Navigation -->
      <div class="md:hidden flex items-center flex-1 relative">
        <a 
          href="/"
          class="flex items-center gap-1.5 px-2 py-1 h-8 bg-secondary border-double border-2 border-main font-grotesk text-sm !font-thin text-main no-underline pointer-events-auto hover:bg-main hover:text-secondary active:bg-main active:text-secondary font-bold uppercase tracking-wide cursor-pointer whitespace-nowrap justify-center shadow-[inset_0_0_0_2px_var(--color-secondary)]"
        >
          <span class="font-semibold">ALLISON PEÑA</span>
        </a>
        <button
          id="mobile-menu-trigger"
          class="ml-auto px-2 py-1 h-8 bg-secondary border-double border-2 border-main text-main hover:bg-main hover:text-secondary flex items-center gap-1 font-bold uppercase tracking-wide cursor-pointer whitespace-nowrap justify-center shadow-[inset_0_0_0_2px_var(--color-secondary)]"
        >
          <svg id="hamburger-icon" class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
            <line x1="4" x2="20" y1="12" y2="12"/>
            <line x1="4" x2="20" y1="6" y2="6"/>
            <line x1="4" x2="20" y1="18" y2="18"/>
          </svg>
          <svg id="close-icon" class="w-4 h-4 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
            <line x1="18" x2="6" y1="6" y2="18"/>
            <line x1="6" x2="18" y1="6" y2="18"/>
          </svg>
          <span class="font-mono text-xs font-bold">MENU</span>
        </button>
      </div>

      <!-- Desktop Header Controls - Container with fixed positioning to prevent CLS -->
      <div class="hidden md:flex items-center gap-2 flex-shrink-0 relative">
        <!-- Placeholder layer - absolute positioned with constant opacity -->
        <div class="absolute top-0 right-0 h-full flex items-center gap-x-4 gap-y-1 pointer-events-none" id="header-controls-placeholder">
          <!-- Theme Switcher Placeholder -->
          <div class="w-7 h-7 md:w-full md:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2 w-full">
                <div class="w-4 h-4 border border-main flex-shrink-0 animate-pulse" style="background: linear-gradient(135deg, var(--color-main) 50%, var(--color-secondary) 50%)"></div>
                <span class="hidden md:block font-mono text-xs font-semibold text-main flex-1 text-left animate-pulse">{t('ui.loading')}</span>
              </div>
            </div>
            <div class="hidden md:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>

          <!-- Mode Toggle Placeholder -->
          <div class="w-7 h-7 md:w-auto md:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2">
                <div class="w-3.5 h-3.5 flex-shrink-0 animate-pulse">
                  <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24">
                    <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
                    <line x1="8" y1="21" x2="16" y2="21"></line>
                    <line x1="12" y1="17" x2="12" y2="21"></line>
                  </svg>
                </div>
                <span class="hidden md:block font-mono text-xs font-semibold text-main animate-pulse">{t('ui.loading')}</span>
              </div>
            </div>
            <div class="hidden md:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
          
          <!-- Language Switcher Placeholder -->
          <div class="w-7 h-7 md:w-auto md:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2">
                <span class="font-mono text-xs font-semibold text-main animate-pulse">ES</span>
              </div>
            </div>
            <div class="hidden md:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
        </div>
        
        <!-- React components layer - absolute positioned to match exactly -->
        <div class="absolute top-0 right-0 h-full flex items-center gap-x-4 gap-y-1 pointer-events-auto" id="header-controls-react" style="opacity: 0;">
          <HeaderControls themes={themes} client:load />
          <LanguageSwitcher initialLocale={currentLocale} client:load />
        </div>
        
        <!-- Invisible spacer to reserve space -->
        <div class="flex items-center gap-x-4 gap-y-1 opacity-0 pointer-events-none">
          <!-- Spacer for Theme Switcher -->
          <div class="w-7 h-7 md:w-full md:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2 w-full">
                <div class="w-4 h-4 border border-main flex-shrink-0"></div>
                <span class="hidden md:block font-mono text-xs font-semibold text-main flex-1 text-left">{t('ui.loading')}</span>
              </div>
            </div>
            <div class="hidden md:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
          
          <!-- Spacer for Mode Toggle -->
          <div class="w-7 h-7 md:w-auto md:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2">
                <div class="w-3.5 h-3.5 flex-shrink-0">
                  <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24">
                    <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
                    <line x1="8" y1="21" x2="16" y2="21"></line>
                    <line x1="12" y1="17" x2="12" y2="21"></line>
                  </svg>
                </div>
                <span class="hidden md:block font-mono text-xs font-semibold text-main">{t('ui.loading')}</span>
              </div>
            </div>
            <div class="hidden md:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
          
          <!-- Spacer for Language Switcher -->
          <div class="w-7 h-7 md:w-auto md:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2">
                <span class="font-mono text-xs font-semibold text-main">ES</span>
              </div>
            </div>
            <div class="hidden md:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</nav>

<!-- Mobile Menu Overlay positioned outside nav but with lower z-index -->
<div 
  id="mobile-menu-overlay"
  class="fixed inset-0 z-[250] opacity-0 pointer-events-none"
  style="background: 
    radial-gradient(ellipse 150% 100% at 102% 0%, color-mix(in srgb, var(--color-main) 70%, transparent) 0%, color-mix(in srgb, var(--color-main) 30%, transparent) 40%, transparent 70%),
    radial-gradient(ellipse 120% 80% at 85% 20%, color-mix(in srgb, var(--color-secondary) 60%, transparent) 0%, color-mix(in srgb, var(--color-secondary) 20%, transparent) 50%, transparent 80%),
    repeating-linear-gradient(45deg, transparent 0px, color-mix(in srgb, var(--color-main) 4%, transparent) 1px, transparent 2px, color-mix(in srgb, var(--color-secondary) 3%, transparent) 3px, transparent 4px),
    repeating-linear-gradient(-45deg, transparent 0px, color-mix(in srgb, var(--color-secondary) 3%, transparent) 1px, transparent 3px, color-mix(in srgb, var(--color-main) 2%, transparent) 4px, transparent 5px);
    background-size: 100% 100%, 100% 100%, 8px 8px, 6px 6px;
    transition: opacity 0.6s ease-out;"
>
  <div class="flex flex-col items-end gap-3 px-8 w-full max-w-sm ml-auto mr-8" style="padding-top: calc(var(--navbar-height, 76px) + 2px);">
    <!-- Navigation Items -->
    {navItems.slice(1).map((item, index) => (
      <a
        href={item.href}
        class="mobile-nav-item inline-flex items-center px-3 py-2 h-8 bg-secondary border-double border-2 border-main font-grotesk text-sm font-semibold text-main no-underline hover:bg-main hover:text-secondary active:bg-main active:text-secondary mobile-nav-link opacity-0 transform translate-y-4 pointer-events-auto font-bold uppercase tracking-wide cursor-pointer whitespace-nowrap justify-center shadow-[inset_0_0_0_2px_var(--color-secondary)]"
        style={`transition-delay: ${(index + 1) * 150}ms; transition: opacity 0.4s ease-out, transform 0.4s ease-out;`}
      >
        {item.label}
      </a>
    ))}
  </div>
</div>
  

 

<script>
  // Hide static placeholders when React components mount
  function hideStaticPlaceholders() {
    const placeholder = document.getElementById('header-controls-placeholder');
    if (placeholder) {
      placeholder.style.display = 'none';
    }
  }

  // Show React components and hide placeholders
  function showReactComponents() {
    const placeholder = document.getElementById('header-controls-placeholder');
    const reactContainer = document.getElementById('header-controls-react');
    
    if (placeholder && reactContainer) {
      placeholder.style.display = 'none';
      reactContainer.style.display = 'flex';
    }
  }

  // Initialize global theme state from localStorage immediately
  function initializeGlobalTheme() {
    if (typeof window === 'undefined') return;
    
    // Set global theme state that React components can read immediately
    const savedThemeId = localStorage.getItem('theme-id');
    const savedMode = localStorage.getItem('theme-mode') || 'system';
    
    // Only mark as ready if we have a saved theme (not first visit)
    if (savedThemeId) {
      (window as any).__THEME_ID__ = savedThemeId;
      (window as any).__THEME_MODE__ = savedMode;
      (window as any).__THEME_READY__ = true;
    } else {
      // First visit - let React component handle random theme selection
      (window as any).__THEME_MODE__ = savedMode;
      (window as any).__THEME_READY__ = false;
    }
  }

  // Instant transition from placeholder to React components
  function showReactComponentsImmediately() {
    const placeholder = document.getElementById('header-controls-placeholder');
    const reactContainer = document.getElementById('header-controls-react');
    
    if (placeholder && reactContainer) {
      // Instant swap - no transitions or opacity changes for placeholder
      placeholder.style.display = 'none';
      reactContainer.style.opacity = '1';
    }
  }

  // Mobile menu functionality
  document.addEventListener('astro:page-load', () => {
    // Mobile menu elements
    const mobileMenuTrigger = document.getElementById('mobile-menu-trigger');
    const mobileMenuOverlay = document.getElementById('mobile-menu-overlay');
    let isMenuOpen = false;

    // Function to toggle mobile menu
    function toggleMobileMenu() {
      const mobileNavItems = document.querySelectorAll('.mobile-nav-item');
      const hamburgerIcon = document.getElementById('hamburger-icon');
      const closeIcon = document.getElementById('close-icon');
      
      isMenuOpen = !isMenuOpen;
      
      if (isMenuOpen) {
        // Block scroll but keep header sticky
        document.body.style.overflow = 'hidden';
        document.body.style.position = 'fixed';
        document.body.style.top = `-${window.scrollY}px`;
        document.body.style.width = '100%';
        
        // Toggle icons
        hamburgerIcon?.classList.add('hidden');
        closeIcon?.classList.remove('hidden');
        
        // Show overlay
        mobileMenuOverlay?.classList.remove('pointer-events-none');
        mobileMenuOverlay?.classList.add('pointer-events-auto');
        
        
        // Start background fade in
        if (mobileMenuOverlay) {
          mobileMenuOverlay.style.opacity = '0';
          requestAnimationFrame(() => {
            mobileMenuOverlay.style.opacity = '1';
          });
        }
        
        // Show items one by one
        mobileNavItems.forEach(item => {
          item.classList.remove('opacity-0', 'translate-y-4');
          item.classList.add('opacity-100', 'translate-y-0');
        });
        
      } else {
        // Restore scroll and position
        const scrollY = document.body.style.top;
        document.body.style.position = '';
        document.body.style.top = '';
        document.body.style.overflow = '';
        document.body.style.width = '';
        window.scrollTo(0, parseInt(scrollY || '0') * -1);
        
        // Toggle icons back
        hamburgerIcon?.classList.remove('hidden');
        closeIcon?.classList.add('hidden');
        
        // Hide items immediately
        mobileNavItems.forEach(item => {
          item.classList.remove('opacity-100', 'translate-y-0');
          item.classList.add('opacity-0', 'translate-y-4');
        });
        
        
        // Hide overlay after animation
        if (mobileMenuOverlay) {
          mobileMenuOverlay.style.opacity = '0';
          setTimeout(() => {
            mobileMenuOverlay?.classList.remove('pointer-events-auto');
            mobileMenuOverlay?.classList.add('pointer-events-none');
          }, 600); // Wait for background fade out
        }
      }
    }

    // Mobile menu trigger click
    mobileMenuTrigger?.addEventListener('click', (e) => {
      e.preventDefault();
      toggleMobileMenu();
    });

    // Close menu when clicking outside content area
    mobileMenuOverlay?.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      if (!target.closest('.max-w-sm')) {
        toggleMobileMenu();
      }
    });

    // Close menu when clicking nav links
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
    mobileNavLinks.forEach(link => {
      link.addEventListener('click', () => {
        if (isMenuOpen) {
          toggleMobileMenu();
        }
      });
    });

    // Close menu with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isMenuOpen) {
        toggleMobileMenu();
      }
    });

    // Initialize global theme state (theme already applied by inline script)
    initializeGlobalTheme();
    
    // Show React components immediately
    showReactComponentsImmediately();
    
    // Listen for when React components are ready and show them instantly
    const observer = new MutationObserver(() => {
      if (document.body.hasAttribute('data-header-controls-ready')) {
        showReactComponentsImmediately();
        observer.disconnect();
      }
    });
    observer.observe(document.body, { attributes: true, attributeFilter: ['data-header-controls-ready'] });
    
    
    // Navigation elements
    const navLinks = document.querySelectorAll('.nav-link');
    const currentPath = window.location.pathname;

    // Navigation: Set active state based on current page
    navLinks.forEach(link => {
      const href = link.getAttribute('href');
      if (href && (href === currentPath || (currentPath.startsWith(href) && href !== '/'))) {
        link.classList.add('!bg-main', '!text-secondary');
      }
      
      // Prevent default click behavior and handle on mouseup
      link.addEventListener('click', (e: Event) => {
        e.preventDefault();
      });
      
      link.addEventListener('mouseup', () => {
        const href = link.getAttribute('href');
        if (href) {
          window.location.href = href;
        }
      });
    });

    // Keyboard navigation for main nav only
    function handleKeydown(e: KeyboardEvent) {
      // Only trigger if not typing in an input
      const target = e.target as HTMLElement;
      if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') return;
      
      const key = e.key.toLowerCase();
      const navLink = document.querySelector(`[data-hotkey="${key}"]`) as HTMLElement;
      
      if (navLink && navLink.dataset.hotkey && !e.ctrlKey && !e.metaKey && !e.altKey) {
        e.preventDefault();
        
        // Visual feedback
        navLink.classList.add('!bg-main', '!text-secondary');
        setTimeout(() => {
          navLink.classList.remove('!bg-main', '!text-secondary');
        }, 150);
        
        // Navigate
        const href = navLink.getAttribute('href');
        if (href) {
          window.location.href = href;
        }
      }
    }

    document.addEventListener('keydown', handleKeydown);
  });
</script>

<style>
  /* Ensure navbar stays sticky even when mobile overlay is active */
  nav {
    position: sticky !important;
    top: 0 !important;
  }
  
  nav.relative {
    position: relative !important;
  }


  /* Theme previews using CSS variables */
  .void-preview { 
    background: linear-gradient(45deg, var(--void-colorful) 50%, var(--void-contrasty) 50%); 
    border-color: var(--void-contrasty) !important;
  }
  .phantom-preview { 
    background: linear-gradient(45deg, var(--phantom-colorful) 50%, var(--phantom-contrasty) 50%); 
    border-color: var(--phantom-contrasty) !important;
  }
  .azure-preview { 
    background: linear-gradient(45deg, var(--azure-colorful) 50%, var(--azure-contrasty) 50%); 
    border-color: var(--azure-contrasty) !important;
  }
  .ember-preview { 
    background: linear-gradient(45deg, var(--ember-colorful) 50%, var(--ember-contrasty) 50%); 
    border-color: var(--ember-contrasty) !important;
  }
  .violet-preview { 
    background: linear-gradient(45deg, var(--violet-colorful) 50%, var(--violet-contrasty) 50%); 
    border-color: var(--violet-contrasty) !important;
  }
  .crimson-preview { 
    background: linear-gradient(45deg, var(--crimson-colorful) 50%, var(--crimson-contrasty) 50%); 
    border-color: var(--crimson-contrasty) !important;
  }
  .forest-preview { 
    background: linear-gradient(45deg, var(--forest-colorful) 50%, var(--forest-contrasty) 50%); 
    border-color: var(--forest-contrasty) !important;
  }

  /* Mode icon states */
  html:not(.dark) .sun-icon {
    opacity: 1;
  }

  html:not(.dark) .moon-icon {
    opacity: 0;
  }

  html.dark .sun-icon {
    opacity: 0;
  }

  html.dark .moon-icon {
    opacity: 1;
  }

  .system-icon {
    opacity: 0;
  }

 

  /* Hide hotkeys on mobile devices */
  @media (max-width: 768px) {
    /* Hide navigation hotkeys */
    .nav-link .text-xs.font-bold.font-mono {
      display: none;
    }
    
    /* Hide theme dropdown hotkeys */
    .theme-dropdown .border-t.border-main {
      display: none;
    }
  }
</style>