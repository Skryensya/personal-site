---
import ThemeControl from './ThemeControl.tsx';
import ModeControl from './ModeControl.tsx';
import LanguageControl from './LanguageControl.tsx';
import Button from './Button.astro';
import { getLangFromUrl } from '@/i18n/utils';
import { getTranslations } from '@/i18n/utils';
import { themes } from '../data/themes.js';
import { getLocalizedUrl, getHomeUrl } from '@/utils/localized-routes';

const currentLocale = getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname;
const t = getTranslations(currentLocale);

// Check if current page is CV to make header non-sticky
const isCVPage = currentPath.includes('/cv');

// Check if current page is home page
// Spanish default: '/' is home
// Other languages: '/en/' or '/no/' is home
const isHomePage = currentLocale === 'es' 
  ? currentPath === '/' 
  : (currentPath === `/${currentLocale}/` || currentPath === `/${currentLocale}`);

// Prepare theme data for client-side JavaScript
const themeNames = themes.reduce((acc, theme) => {
  acc[theme.id] = theme.name;
  return acc;
}, {} as Record<string, string>);

const themeColors = themes.reduce((acc, theme) => {
  acc[theme.id] = {
    colorful: theme.colorful,
    contrasty: theme.contrasty
  };
  return acc;
}, {} as Record<string, { colorful: string; contrasty: string }>);

const navItems = [
  { label: 'Allison Peña', href: getHomeUrl(currentLocale) },
  { label: t('nav.projects'), href: getLocalizedUrl(currentLocale, 'projects') },
  { label: t('nav.cv'), href: getLocalizedUrl(currentLocale, 'resume') },
];

---


<nav class={`${isCVPage ? '!relative' : '!fixed !top-0 !left-0 !right-0'} z-[400] flex justify-center mx-auto max-w-[var(--max-w-size)] @container`} style="--navbar-height: 96px; view-transition-name: navbar;">
  <div class={`max-w-[1280px] w-full px-4 pt-2`}>
    <div class="flex items-start justify-between gap-2 flex-nowrap p-2 @6xl:pl-0 diagonal-stripe" >
      <!-- Desktop Navigation -->
      <div class="hidden @6xl:flex items-start gap-x-2 gap-y-1 flex-wrap flex-1 mr-2 relative">
        <Button 
          size="sm"
          class="!w-0 focus:!ml-2 !h-8 !px-0 !overflow-hidden !opacity-0 !border-0 focus-visible:!w-auto focus-visible:!px-0.5rem focus-visible:!opacity-100 focus-visible:!border-2 motion-safe:!transition-all motion-safe:!duration-300 motion-safe:!ease-out"
          onClick="skipToMainContent()"
          aria-label={t('nav.skipToContent')}
        >
          {t('nav.skipToContentShort')}
        </Button>
        {navItems.map((item) => {
          const isCurrentPage = item.label === 'Allison Peña' ? isHomePage : (currentPath === item.href || (item.href !== '/' && currentPath.startsWith(item.href + '/')) || (item.href !== '/' && currentPath.startsWith(item.href) && currentPath.length > item.href.length));
          return (
            <Button 
              href={item.href}
              size="sm"
              filled={isCurrentPage}
              data-nav-link
              aria-label={item.label}
            >
              <span class="font-semibold select-none">{item.label}</span>
            </Button>
          );
        })}
      </div>

      <!-- Mobile Navigation -->
      <div class="@6xl:hidden flex items-center flex-1 relative">
        <Button 
          size="sm"
          class="!w-0 !h-8 !px-0 !overflow-hidden !opacity-0 !border-0 focus-visible:!w-auto focus-visible:!px-2 focus-visible:!opacity-100 focus-visible:!border-2 motion-safe:!transition-all motion-safe:!duration-300 motion-safe:!ease-out"
          onClick="skipToMainContent()"
          aria-label={t('nav.skipToContent')}
        >
          {t('nav.skipToContentShort')}
        </Button>
        <Button 
          href={getHomeUrl(currentLocale)}
          size="sm"
          filled={isHomePage}
          class="flex items-center gap-1.5"
        >
          <span class="font-semibold select-none">Allison Peña</span>
        </Button>
        <button
          type="button"
          id="mobile-menu-trigger"
          class="@6xl:hidden ml-auto px-2 py-1 h-8 bg-secondary border-double border-2 border-main text-main hover:bg-main hover:text-secondary flex items-center gap-1 font-bold tracking-wide cursor-pointer whitespace-nowrap justify-center shadow-[inset_0_0_0_2px_var(--color-secondary)] focus:outline-none [@media(hover:hover)]:focus:outline-none [&.menu-open]:focus:outline-3 [&.menu-open]:focus:outline-main [&.menu-open]:focus:outline-offset-3"
        >
          <svg id="hamburger-icon" class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
            <line x1="4" x2="20" y1="12" y2="12"/>
            <line x1="4" x2="20" y1="6" y2="6"/>
            <line x1="4" x2="20" y1="18" y2="18"/>
          </svg>
          <svg id="close-icon" class="w-4 h-4 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
            <line x1="18" x2="6" y1="6" y2="18"/>
            <line x1="6" x2="18" y1="6" y2="18"/>
          </svg>
          <span class="font-grotesk text-xs font-bold uppercase select-none">{t('nav.menu')}</span>
        </button>
      </div>

      <!-- Desktop Navbar Controls - Container with fixed positioning to prevent CLS -->
      <div class="hidden @6xl:flex items-center gap-2 flex-shrink-0 relative">
        <!-- Individual Placeholders -->
        <div class="absolute top-0 right-0 h-full flex items-center gap-x-2 gap-y-1 pointer-events-none">
          <!-- Theme Switcher Placeholder -->
          <div class="w-7 h-7 @6xl:w-full @6xl:h-8 inline-flex" id="theme-placeholder">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2 w-full">
                <div class="w-4 h-4 border border-main flex-shrink-0  " ></div>
                <span class="hidden @6xl:block font-grotesk text-xs font-semibold text-main flex-1 text-left uppercase select-none">{t('ui.loading')}</span>
              </div>
            </div>
            <div class="hidden @6xl:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>

          <!-- Mode Toggle Placeholder -->
          <div class="w-7 h-7 @6xl:w-auto @6xl:h-8 inline-flex" id="mode-placeholder">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2">
                <div class="w-3.5 h-3.5 flex-shrink-0">
                  <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24">
                    <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
                    <line x1="8" y1="21" x2="16" y2="21"></line>
                    <line x1="12" y1="17" x2="12" y2="21"></line>
                  </svg>
                </div>
                <span class="hidden @6xl:block font-grotesk text-xs font-semibold text-main uppercase select-none">{t('ui.loading')}</span>
              </div>
            </div>
            <div class="hidden @6xl:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
          
          <!-- Language Switcher Placeholder -->
          <div class="w-7 h-7 @6xl:w-auto @6xl:h-8 inline-flex" id="language-placeholder">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2">
                <span class="font-grotesk text-xs font-semibold text-main uppercase select-none">{t('ui.loading')}</span>
              </div>
            </div>
            <div class="hidden @6xl:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
        </div>
        
        <!-- Individual React components -->
        <div class="absolute top-0 right-0 h-full flex flex-row items-center gap-x-2 gap-y-1 pointer-events-auto">
          <div style="visibility: hidden;" id="theme-control">
            <ThemeControl client:load />
          </div>
          <div style="visibility: hidden;" id="mode-control">
            <ModeControl client:load />
          </div>
          <div style="visibility: hidden;" id="language-control">
            <LanguageControl currentPath={Astro.url.pathname} initialLocale={currentLocale} client:load />
          </div>
        </div>
        
        <!-- Invisible spacer to reserve space -->
        <div class="flex items-center gap-x-2 gap-y-1 opacity-0 pointer-events-none">
          <!-- Spacer for Theme Switcher -->
          <div class="w-7 h-7 @6xl:w-full @6xl:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2 w-full">
                <div class="w-4 h-4 border border-main flex-shrink-0"></div>
                <span class="hidden @6xl:block font-mono text-xs font-semibold text-main flex-1 text-left select-none">{t('ui.loading')}</span>
              </div>
            </div>
            <div class="hidden @6xl:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
          
          <!-- Spacer for Mode Toggle -->
          <div class="w-7 h-7 @6xl:w-auto @6xl:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2">
                <div class="w-3.5 h-3.5 flex-shrink-0">
                  <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24">
                    <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
                    <line x1="8" y1="21" x2="16" y2="21"></line>
                    <line x1="12" y1="17" x2="12" y2="21"></line>
                  </svg>
                </div>
                <span class="hidden @6xl:block font-mono text-xs font-semibold text-main select-none">{t('ui.loading')}</span>
              </div>
            </div>
            <div class="hidden @6xl:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
          
          <!-- Spacer for Language Switcher -->
          <div class="w-7 h-7 @6xl:w-auto @6xl:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2">
                <span class="font-grotesk text-xs font-semibold text-main uppercase select-none">{t('ui.loading')}</span>
              </div>
            </div>
            <div class="hidden @6xl:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</nav>

<!-- Mobile Dropdown Menu -->
<div
  id="mobile-dropdown"
  class="@6xl:hidden fixed z-[9999] opacity-0 pointer-events-none inset-x-4 top-14"

>
  <!-- Simple backdrop for click-to-close -->
  <div 
    class="fixed inset-0 -z-10"
    id="mobile-backdrop"
  ></div>
  
  <!-- Menu content -->
  <div class="w-full max-w-sm ml-auto">
    <div class="bg-secondary border-double border-2 border-main">
      <!-- Navigation Links -->
      <div class="p-2 flex flex-col space-y-1">
        {navItems.slice(1).map((item) => (
          <div class="w-full [&>div]:!w-full [&>div]:!block">
            <Button 
              href={item.href}  
              class="!w-full !flex !items-center !justify-center font-grotesk text-sm uppercase select-none"
            >
              {item.label}
            </Button>
          </div>
        ))}
      </div>
      
      <!-- Divider -->
      <div class="border-t border-main"></div>
      
      <!-- Controls -->
      <div class="p-2 space-y-2">
        <!-- Theme Control -->
        <div class="w-full flex bg-secondary border border-main">
          <button 
            class="aspect-square h-8 flex items-center justify-center bg-main text-secondary border-r border-main hover:bg-secondary hover:text-main"
            id="mobile-theme-prev"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left-icon lucide-chevron-left">
              <path d="m15 18-6-6 6-6"/>
            </svg>
          </button>
          <button 
            class="flex-1 flex items-center justify-center gap-2 px-3 h-8 font-grotesk text-xs font-bold tracking-wide bg-secondary hover:bg-main hover:text-secondary border-0 cursor-pointer uppercase select-none ring-2 ring-inset ring-secondary"
            id="mobile-theme-center"
          >
          <div class="border border-main">
            <div class="w-4 h-4 mobile-theme-preview-container p-0.5 ">
              <div class="w-full h-full mobile-theme-preview" style="background: linear-gradient(135deg, var(--color-main) 50%, var(--color-secondary) 50%);"></div>
            </div>
          </div>
            <span id="mobile-theme-label">Tema</span>
          </button>
          <button 
            class="aspect-square h-8 flex items-center justify-center bg-main text-secondary border-l border-main hover:bg-secondary hover:text-main"
            id="mobile-theme-next"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right-icon lucide-chevron-right">
              <path d="m9 18 6-6-6-6"/>
            </svg>
          </button>
        </div>
        
        <!-- Mode Control -->
        <div class="w-full flex bg-secondary border border-main">
          <button 
            class="aspect-square h-8 flex items-center justify-center bg-main text-secondary border-r border-main hover:bg-secondary hover:text-main"
            id="mobile-mode-prev"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left-icon lucide-chevron-left">
              <path d="m15 18-6-6 6-6"/>
            </svg>
          </button>
          <button 
            class="flex-1 flex items-center justify-center gap-2 px-3 h-8 font-grotesk text-xs font-bold tracking-wide bg-secondary hover:bg-main hover:text-secondary border-0 cursor-pointer uppercase select-none ring-2 ring-inset ring-secondary"
            id="mobile-mode-center"
          >
            <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24" id="mobile-mode-icon">
              <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
              <line x1="8" y1="21" x2="16" y2="21"></line>
              <line x1="12" y1="17" x2="12" y2="21"></line>
            </svg>
            <span id="mobile-mode-label">Modo</span>
          </button>
          <button 
            class="aspect-square h-8 flex items-center justify-center bg-main text-secondary border-l border-main hover:bg-secondary hover:text-main"
            id="mobile-mode-next"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right-icon lucide-chevron-right">
              <path d="m9 18 6-6-6-6"/>
            </svg>
          </button>
        </div>
        
        <!-- Language Control -->
        <div class="w-full flex bg-secondary border border-main">
          <button 
            class="aspect-square h-8 flex items-center justify-center bg-main text-secondary border-r border-main hover:bg-secondary hover:text-main"
            id="mobile-lang-prev"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left-icon lucide-chevron-left">
              <path d="m15 18-6-6 6-6"/>
            </svg>
          </button>
          <button 
            class="flex-1 flex items-center justify-center gap-2 px-3 h-8 font-grotesk text-xs font-bold tracking-wide bg-secondary hover:bg-main hover:text-secondary border-0 cursor-pointer uppercase select-none ring-2 ring-inset ring-secondary"
            id="mobile-lang-center"
          >
            <span id="mobile-lang-label">Idioma</span>
          </button>
          <button 
            class="aspect-square h-8 flex items-center justify-center bg-main text-secondary border-l border-main hover:bg-secondary hover:text-main"
            id="mobile-lang-next"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right-icon lucide-chevron-right">
              <path d="m9 18 6-6-6-6"/>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
</div>
  

 

<script define:vars={{ themeNames, themeColors }}>

  // Skip to main content functionality
  function skipToMainContent() {
    // Obtener la navbar
    const navbar = document.querySelector('nav');
    if (!navbar) return;

    // Lista de elementos focuseables que pueden tener tabindex explícito
    const elementsWithTabindex = document.querySelectorAll('[tabindex]:not([tabindex="-1"])');
    
    // Buscar el primer elemento con tabindex después de la navbar
    let targetElement = null;
    const navbarRect = navbar.getBoundingClientRect();
    
    for (const element of elementsWithTabindex) {
      const elementRect = element.getBoundingClientRect();
      // Verificar si el elemento está después de la navbar
      if (elementRect.top > navbarRect.bottom) {
        targetElement = element;
        break;
      }
    }

    // Si no hay elementos con tabindex después de la navbar, buscar elementos focuseables naturales
    if (!targetElement) {
      const focusableSelectors = [
        'a[href]:not([tabindex="-1"])',
        'button:not([disabled]):not([tabindex="-1"])',
        'input:not([disabled]):not([tabindex="-1"])',
        'textarea:not([disabled]):not([tabindex="-1"])',
        'select:not([disabled]):not([tabindex="-1"])',
        'details',
        'summary'
      ].join(',');

      const allFocusable = document.querySelectorAll(focusableSelectors);
      
      for (const element of allFocusable) {
        const elementRect = element.getBoundingClientRect();
        if (elementRect.top > navbarRect.bottom) {
          targetElement = element;
          break;
        }
      }
    }

    // Fallback: buscar contenido principal
    if (!targetElement) {
      const mainContentSelectors = [
        'main',
        '#project-content',
        '[role="main"]',
        '.prose',
        'h1',
        'article'
      ];

      for (const selector of mainContentSelectors) {
        const element = document.querySelector(selector);
        if (element) {
          const elementRect = element.getBoundingClientRect();
          if (elementRect.top > navbarRect.bottom) {
            targetElement = element;
            break;
          }
        }
      }
    }

    if (targetElement) {
      // Si el elemento no es naturalmente focuseable, hacerlo temporalmente focuseable
      const wasTabIndex = targetElement.getAttribute('tabindex');
      const needsTabIndex = !targetElement.matches('a, button, input, textarea, select, [tabindex]');
      
      if (needsTabIndex) {
        targetElement.setAttribute('tabindex', '-1');
      }

      // Enfocar el elemento y scroll suave
      targetElement.focus();
      
      // Scroll suave al elemento
      targetElement.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'start',
        inline: 'nearest'
      });

      // Restaurar tabindex original después de un breve delay
      if (needsTabIndex) {
        setTimeout(() => {
          if (wasTabIndex === null) {
            targetElement.removeAttribute('tabindex');
          } else {
            targetElement.setAttribute('tabindex', wasTabIndex);
          }
        }, 100);
      }
    }
  }

  // Initialize global theme state from localStorage immediately and update placeholder
  function initializeGlobalTheme() {
    if (typeof window === 'undefined') return;
    
    // Get theme and mode from localStorage
    const savedThemeId = localStorage.getItem('theme-id');
    const savedMode = localStorage.getItem('theme-mode') || 'system';
    
    // The theme preview should always use CSS variables, no need to update colors
    // This maintains consistency with the design system
    
    // Set global theme state that React components can read immediately
    if (savedThemeId) {
      window.__THEME_ID__ = savedThemeId;
      window.__THEME_MODE__ = savedMode;
      window.__THEME_READY__ = true;
    } else {
      // First visit - let React component handle random theme selection
      window.__THEME_MODE__ = savedMode;
      window.__THEME_READY__ = false;
    }
  }

  // Individual placeholder management
  function showReactComponent(componentName) {
    const placeholder = document.getElementById(`${componentName}-placeholder`);
    const reactComponent = document.getElementById(`${componentName}-control`);
    
    if (placeholder && reactComponent) {
      // Hide individual placeholder and show React component
      placeholder.style.display = 'none';
      reactComponent.style.visibility = 'visible';
    }
  }
  
  // Show all components at once (fallback)
  function showAllReactComponents() {
    showReactComponent('theme');
    showReactComponent('mode');
    showReactComponent('language');
  }

  // Mobile menu functionality
  document.addEventListener('astro:page-load', () => {
    // Mobile menu elements
    const mobileMenuTrigger = document.getElementById('mobile-menu-trigger');



    // Handle responsive accessibility for mobile menu button
    function handleMobileMenuAccessibility() {
      const button = document.getElementById('mobile-menu-trigger');
      if (!button) return;
      
      // Check if we're on desktop viewport (container query @6xl = 1536px)
      const isDesktop = window.matchMedia('(min-width: 1536px)').matches;
      
      if (isDesktop) {
        // On desktop: make button inaccessible to keyboard and screen readers
        button.setAttribute('tabindex', '-1');
        button.setAttribute('aria-hidden', 'true');
      } else {
        // On mobile: make button accessible
        button.removeAttribute('tabindex');
        button.removeAttribute('aria-hidden');
      }
    }

    // Create the simplest possible mobile menu toggle
    function setupMobileMenu() {
      const button = document.getElementById('mobile-menu-trigger');
      const dropdown = document.getElementById('mobile-dropdown');
      const backdrop = document.getElementById('mobile-backdrop');
      const hamburgerIcon = document.getElementById('hamburger-icon');
      const closeIcon = document.getElementById('close-icon');
      
      
      if (!button || !dropdown || !backdrop) {
        console.error('Mobile menu elements not found!', { button, dropdown, backdrop });
        return;
      }

      let isOpen = false;
      
      // Initialize all interactive elements with tabindex=-1 since dropdown starts closed
      const interactiveElements = dropdown.querySelectorAll('button, a');
      interactiveElements.forEach(el => {
        el.setAttribute('tabindex', '-1');
      });

      function closeMenu() {
        isOpen = false;
        dropdown.style.opacity = '0';
        dropdown.style.pointerEvents = 'none';
        hamburgerIcon?.classList.remove('hidden');
        closeIcon?.classList.add('hidden');
        button.classList.remove('menu-open');
        
        // Set tabindex=-1 for all interactive elements when closed
        const interactiveElements = dropdown.querySelectorAll('button, a, [tabindex]');
        interactiveElements.forEach(el => {
          el.setAttribute('tabindex', '-1');
        });
        
      }

      function openMenu() {
        isOpen = true;
        dropdown.style.opacity = '1';
        dropdown.style.pointerEvents = 'auto';
        hamburgerIcon?.classList.add('hidden');
        closeIcon?.classList.remove('hidden');
        button.classList.add('menu-open');
        
        // Remove tabindex=-1 from interactive elements when open
        const interactiveElements = dropdown.querySelectorAll('button, a, [tabindex="-1"]');
        interactiveElements.forEach(el => {
          el.removeAttribute('tabindex');
        });
        
      }

      function handleToggle(e) {
        e.preventDefault();
        e.stopPropagation();
        
        
        if (isOpen) {
          closeMenu();
        } else {
          openMenu();
        }
      }

      button.onclick = handleToggle;

      // Close menu when clicking on the gradient backdrop
      backdrop.onclick = function(e) {
        e.preventDefault();
        closeMenu();
      };

      // Also close when clicking anywhere in the dropdown container except menu content
      dropdown.onclick = function(e) {
        // Only close if clicking on the dropdown container itself, not its children
        if (e.target === dropdown) {
          closeMenu();
        }
      };
      
      // Handle touch events for mobile without conflicts
      button.addEventListener('touchend', function(e) {
        e.preventDefault();
        e.stopPropagation();
        handleToggle(e);
      }, { passive: false });

    }

    // Setup mobile menu accessibility
    handleMobileMenuAccessibility();
    
    // Listen for viewport changes to update accessibility
    const mediaQuery = window.matchMedia('(min-width: 1536px)');
    mediaQuery.addEventListener('change', handleMobileMenuAccessibility);
    
    // Call setup function
    setupMobileMenu();

    // Prevent scroll when tabbing through header elements
    function preventHeaderScrollOnFocus() {
      const header = document.querySelector('header');
      if (!header) return;

      const focusableElements = header.querySelectorAll('button, a, [tabindex]:not([tabindex="-1"])');
      
      focusableElements.forEach(element => {
        element.addEventListener('focus', (e) => {
          // Prevent default scroll behavior when focusing header elements
          e.preventDefault();
          
          // Manually set focus without scrolling
          const currentScroll = window.scrollY;
          element.focus({ preventScroll: true });
          window.scrollTo(0, currentScroll);
        });
      });
    }

    // Setup scroll prevention for header focus
    preventHeaderScrollOnFocus();

    // Mobile control buttons functionality
    function setupMobileControlButtons() {
      const themePrev = document.getElementById('mobile-theme-prev');
      const themeNext = document.getElementById('mobile-theme-next');
      const themeCenter = document.getElementById('mobile-theme-center');
      const modePrev = document.getElementById('mobile-mode-prev');
      const modeNext = document.getElementById('mobile-mode-next');
      const modeCenter = document.getElementById('mobile-mode-center');
      const langPrev = document.getElementById('mobile-lang-prev');
      const langNext = document.getElementById('mobile-lang-next');
      const langCenter = document.getElementById('mobile-lang-center');
      
      // Theme navigation
      if (themePrev) {
        themePrev.onclick = function() {
          // Use keyboard shortcut for previous theme
          const event = new KeyboardEvent('keydown', { 
            key: 'ArrowLeft', 
            metaKey: true 
          });
          document.dispatchEvent(event);
          setTimeout(updateMobileThemeDisplay, 10);
        };
      }
      
      if (themeNext) {
        themeNext.onclick = function() {
          // Use keyboard shortcut for next theme
          const event = new KeyboardEvent('keydown', { 
            key: 'ArrowRight', 
            metaKey: true 
          });
          document.dispatchEvent(event);
          setTimeout(updateMobileThemeDisplay, 10);
        };
      }
      
      if (themeCenter) {
        themeCenter.onclick = function() {
          // Use keyboard shortcut for next theme (same as next button)
          const event = new KeyboardEvent('keydown', { 
            key: 'ArrowRight', 
            metaKey: true 
          });
          document.dispatchEvent(event);
          setTimeout(updateMobileThemeDisplay, 10);
        };
      }

      // Mode navigation
      if (modePrev) {
        modePrev.onclick = function() {
          const desktopModeButton = document.querySelector('#mode-control button:first-child');
          if (desktopModeButton) {
            desktopModeButton.click();
            setTimeout(updateMobileModeDisplay, 10);
          }
        };
      }
      
      if (modeNext) {
        modeNext.onclick = function() {
          const desktopModeButton = document.querySelector('#mode-control button:first-child');
          if (desktopModeButton) {
            desktopModeButton.click();
            setTimeout(updateMobileModeDisplay, 10);
          }
        };
      }
      
      if (modeCenter) {
        modeCenter.onclick = function() {
          const desktopModeButton = document.querySelector('#mode-control button:first-child');
          if (desktopModeButton) {
            desktopModeButton.click();
            setTimeout(updateMobileModeDisplay, 10);
          }
        };
      }

      // Language navigation
      if (langPrev) {
        langPrev.onclick = function() {
          const desktopLangButton = document.querySelector('[data-component="language-control"] .inline-flex button:first-child');
          if (desktopLangButton) {
            desktopLangButton.click();
            setTimeout(updateMobileLangDisplay, 100);
          }
        };
      }
      
      if (langNext) {
        langNext.onclick = function() {
          const desktopLangButton = document.querySelector('[data-component="language-control"] .inline-flex button:first-child');
          if (desktopLangButton) {
            desktopLangButton.click();
            setTimeout(updateMobileLangDisplay, 100);
          }
        };
      }
      
      if (langCenter) {
        langCenter.onclick = function() {
          const desktopLangButton = document.querySelector('[data-component="language-control"] .inline-flex button:first-child');
          if (desktopLangButton) {
            desktopLangButton.click();
            setTimeout(updateMobileLangDisplay, 100);
          }
        };
      }
    }

    // Update mobile theme display to show current theme name
    function updateMobileThemeDisplay() {
      const themeLabel = document.getElementById('mobile-theme-label');
      const themePreview = document.querySelector('.mobile-theme-preview');
      
      if (themeLabel) {
        // Get current theme from localStorage
        const currentThemeId = localStorage.getItem('theme-id');
        if (currentThemeId) {
          themeLabel.textContent = themeNames[currentThemeId] || currentThemeId.charAt(0).toUpperCase() + currentThemeId.slice(1);
          
          // Update mobile theme preview with theme's own colorful color border
          const themePreviewContainer = document.querySelector('.mobile-theme-preview-container');
          if (themePreview && themePreviewContainer && themeColors[currentThemeId]) {
            const colors = themeColors[currentThemeId];
            themePreview.style.background = `linear-gradient(135deg, ${colors.colorful} 50%, ${colors.contrasty} 50%)`;
            themePreviewContainer.style.borderColor = colors.colorful;
          }
        }
      }
    }

    // Update mobile mode display to show current mode name and icon
    function updateMobileModeDisplay() {
      const modeLabel = document.getElementById('mobile-mode-label');
      const modeIcon = document.getElementById('mobile-mode-icon');
      
      if (modeLabel && modeIcon) {
        // Get current mode from localStorage
        const currentMode = localStorage.getItem('theme-mode') || 'system';
        
        // Get current language from URL
        const currentLang = getCurrentLanguageFromURL();
        
        const modeTranslations = {
          'es': { 'light': 'Claro', 'dark': 'Oscuro', 'system': 'Sistema' },
          'en': { 'light': 'Light', 'dark': 'Dark', 'system': 'System' },
          'no': { 'light': 'Lys', 'dark': 'Mørk', 'system': 'System' }
        };
        
        const modeNames = modeTranslations[currentLang] || modeTranslations['es'];
        
        modeLabel.textContent = modeNames[currentMode] || (currentMode.charAt(0).toUpperCase() + currentMode.slice(1));
        
        // Update icon based on mode
        switch(currentMode) {
          case 'light':
            modeIcon.innerHTML = '<circle cx="12" cy="12" r="5" /><path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42" />';
            break;
          case 'dark':
            modeIcon.innerHTML = '<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" />';
            break;
          case 'system':
          default:
            modeIcon.innerHTML = '<rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect><line x1="8" y1="21" x2="16" y2="21"></line><line x1="12" y1="17" x2="12" y2="21"></line>';
            break;
        }
      }
    }

    // Get current language from URL
    function getCurrentLanguageFromURL() {
      const path = window.location.pathname;
      if (path.startsWith('/en/')) return 'en';
      if (path.startsWith('/no/')) return 'no';
      return 'es'; // Default to Spanish for root paths (new default)
    }

    // Update mobile language display to show current language name
    function updateMobileLangDisplay() {
      const langLabel = document.getElementById('mobile-lang-label');
      
      if (langLabel) {
        const currentLang = getCurrentLanguageFromURL();
        
        const langNames = {
          'es': 'Español',
          'en': 'English', 
          'no': 'Norsk'
        };
        
        langLabel.textContent = langNames[currentLang] || 'Español';
      }
    }

    // Initialize mobile controls
    setupMobileControlButtons();
    
    // Update displays on page load
    setTimeout(() => {
      updateMobileThemeDisplay();
      updateMobileModeDisplay();
      updateMobileLangDisplay();
    }, 50);
    
    // Listen for theme changes to update mobile display
    window.addEventListener('storage', function(e) {
      if (e.key === 'theme-id') {
        updateMobileThemeDisplay();
      }
      if (e.key === 'theme-mode') {
        updateMobileModeDisplay();
      }
    });
    
    // Also listen for custom events for mode changes
    window.addEventListener('mode-changed', function() {
      setTimeout(updateMobileModeDisplay, 50);
    });

    // Initialize global theme state (theme already applied by inline script)
    initializeGlobalTheme();
    
    // Listen for individual component ready events
    const handleThemeReady = (event) => {
      showReactComponent('theme');
    };
    
    const handleModeReady = (event) => {
      showReactComponent('mode');
    };
    
    const handleLanguageReady = (event) => {
      showReactComponent('language');
      // Update mobile language display when language control is ready
      updateMobileLangDisplay();
    };
    
    window.addEventListener('theme-control-ready', handleThemeReady);
    window.addEventListener('mode-control-ready', handleModeReady);
    window.addEventListener('language-control-ready', handleLanguageReady);
    
    // Fallback: Show all components after a delay if events don't fire
    setTimeout(() => {
      showAllReactComponents();
    }, 2000);
    
    // Cleanup function for page navigation
    const cleanup = () => {
      window.removeEventListener('theme-control-ready', handleThemeReady);
      window.removeEventListener('mode-control-ready', handleModeReady);
      window.removeEventListener('language-control-ready', handleLanguageReady);
    };
    
    // Clean up on navigation
    document.addEventListener('astro:before-preparation', cleanup);
    
    
    // Navigation elements
    const navLinks = document.querySelectorAll('[data-nav-link]');
    const currentPath = window.location.pathname;

    // Navigation: Set active state based on current page
    navLinks.forEach(link => {
      const href = link.getAttribute('href');
      if (href && (href === currentPath || (currentPath.startsWith(href) && href !== '/'))) {
        link.classList.add('!bg-main', '!text-secondary');
      }
      
      // Prevent default click behavior and handle on mouseup
      link.addEventListener('click', (e) => {
        e.preventDefault();
      });
      
      link.addEventListener('mouseup', () => {
        const href = link.getAttribute('href');
        if (href) {
          window.location.href = href;
        }
      });
    });

  });
</script>

<style>
  /* Ensure navbar stays sticky even when mobile overlay is active */
  nav {
    position: sticky !important;
    top: 0 !important;
  }
  
  nav.relative {
    position: relative !important;
  }

</style>