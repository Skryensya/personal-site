--- 
import HeaderControls from './HeaderControls.tsx';
import LanguageSwitcher from './LanguageSwitcher.tsx'; 
import Button from './Button.astro';
import { getLangFromUrl } from '@/i18n/utils';
import { useTranslations } from '@/i18n/utils';
import { themes } from '../data/themes.js';
import { getLocalizedUrl, getHomeUrl } from '@/utils/localized-routes';

const currentLocale = getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname;
const t = useTranslations(currentLocale);

// Check if current page is CV to make header non-sticky
const isCVPage = currentPath.includes('/cv');

// Prepare theme data for client-side JavaScript
const themeNames = themes.reduce((acc, theme) => {
  acc[theme.id] = theme.name;
  return acc;
}, {} as Record<string, string>);

const themeColors = themes.reduce((acc, theme) => {
  acc[theme.id] = {
    colorful: theme.colorful,
    contrasty: theme.contrasty
  };
  return acc;
}, {} as Record<string, { colorful: string; contrasty: string }>);

const navItems = [
  { label: 'Allison Peña', href: getHomeUrl(currentLocale), hotkey: null },
  { label: t('nav.projects'), href: getLocalizedUrl(currentLocale, 'projects'), hotkey: 'p' },
  { label: t('nav.cv'), href: getLocalizedUrl(currentLocale, 'resume'), hotkey: 'c' },
];

---


<nav class={`${isCVPage ? '!relative' : '!sticky !top-0'} z-[300] flex justify-center mx-auto max-w-[var(--max-w-size)] @container`} style="--navbar-height: 76px;">
  <div class={`max-w-[1280px] w-full px-4 mt-4`}>
    <div class="flex items-start justify-between gap-2 flex-nowrap p-2" style="width: 100%; background-image: repeating-linear-gradient(315deg, var(--color-main) 0 1px, var(--color-secondary) 1px 2px, transparent 2px 50%); background-size: 10px 10px; background-attachment: local; background-repeat: repeat;">
      <!-- Desktop Navigation -->
      <div class="hidden @6xl:flex items-start gap-x-2 gap-y-1 flex-wrap flex-1 mr-2">
        {navItems.map((item) => (
          <a 
            href={item.href}
            class="flex items-center gap-1.5 px-2 py-1 h-7 @6xl:h-8 bg-secondary border-double border-2 border-main font-grotesk text-sm !font-thin text-main no-underline pointer-events-auto hover:bg-main hover:text-secondary active:bg-main active:text-secondary font-bold tracking-wide cursor-pointer whitespace-nowrap justify-center shadow-[inset_0_0_0_2px_var(--color-secondary)]"
            data-nav-link
            data-hotkey={item.hotkey}
            aria-label={item.hotkey ? `${item.label} (Press ${item.hotkey.toUpperCase()})` : item.label}
          >
            {item.hotkey && <span class="text-xs font-bold font-mono hidden md:inline">[{item.hotkey.toUpperCase()}]</span>}
            <span class="font-semibold">{item.label}</span>
          </a>
        ))}
      </div>

      <!-- Mobile Navigation -->
      <div class="@6xl:hidden flex items-center flex-1 relative">
        <a 
          href={getHomeUrl(currentLocale)}
          class="flex items-center gap-1.5 px-2 py-1 h-8 bg-secondary border-double border-2 border-main font-grotesk text-sm !font-thin text-main no-underline pointer-events-auto hover:bg-main hover:text-secondary active:bg-main active:text-secondary font-bold tracking-wide cursor-pointer whitespace-nowrap justify-center shadow-[inset_0_0_0_2px_var(--color-secondary)]"
        >
          <span class="font-semibold">Allison Peña</span>
        </a>
        <button
          type="button"
          id="mobile-menu-trigger"
          class="@6xl:hidden ml-auto px-2 py-1 h-8 bg-secondary border-double border-2 border-main text-main hover:bg-main hover:text-secondary flex items-center gap-1 font-bold tracking-wide cursor-pointer whitespace-nowrap justify-center shadow-[inset_0_0_0_2px_var(--color-secondary)]"
        >
          <svg id="hamburger-icon" class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
            <line x1="4" x2="20" y1="12" y2="12"/>
            <line x1="4" x2="20" y1="6" y2="6"/>
            <line x1="4" x2="20" y1="18" y2="18"/>
          </svg>
          <svg id="close-icon" class="w-4 h-4 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
            <line x1="18" x2="6" y1="6" y2="18"/>
            <line x1="6" x2="18" y1="6" y2="18"/>
          </svg>
          <span class="font-mono text-xs font-bold">Menu</span>
        </button>
      </div>

      <!-- Desktop Header Controls - Container with fixed positioning to prevent CLS -->
      <div class="hidden @6xl:flex items-center gap-2 flex-shrink-0 relative">
        <!-- Placeholder layer - absolute positioned with constant opacity -->
        <div class="absolute top-0 right-0 h-full flex items-center gap-x-2 gap-y-1 pointer-events-none" id="header-controls-placeholder">
          <!-- Theme Switcher Placeholder -->
          <div class="w-7 h-7 @6xl:w-full @6xl:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2 w-full">
                <div id="theme-placeholder-preview" class="w-4 h-4 border border-main flex-shrink-0" style="background: linear-gradient(135deg, var(--color-main) 50%, var(--color-secondary) 50%)"></div>
                <span id="theme-placeholder-text" class="hidden @6xl:block font-mono text-xs font-semibold text-main flex-1 text-left">{t('ui.loading')}</span>
              </div>
            </div>
            <div class="hidden @6xl:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>

          <!-- Mode Toggle Placeholder -->
          <div class="w-7 h-7 @6xl:w-auto @6xl:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2">
                <div class="w-3.5 h-3.5 flex-shrink-0">
                  <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24">
                    <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
                    <line x1="8" y1="21" x2="16" y2="21"></line>
                    <line x1="12" y1="17" x2="12" y2="21"></line>
                  </svg>
                </div>
                <span id="mode-placeholder-text" class="hidden @6xl:block font-mono text-xs font-semibold text-main">{t('ui.loading')}</span>
              </div>
            </div>
            <div class="hidden @6xl:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
          
          <!-- Language Switcher Placeholder -->
          <div class="w-7 h-7 @6xl:w-auto @6xl:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2">
                <span class="font-mono text-xs font-semibold text-main">{t('ui.loading')}</span>
              </div>
            </div>
            <div class="hidden @6xl:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
        </div>
        
        <!-- React components layer - absolute positioned to match exactly -->
        <div class="absolute top-0 right-0 h-full flex flex-row items-center gap-x-2 gap-y-1 pointer-events-auto" id="header-controls-react" style="visibility: hidden;">
          <div data-theme-control class="flex flex-row items-center gap-x-2">
            <HeaderControls client:idle />
          </div>
          <div data-lang-control>
            <LanguageSwitcher initialLocale={currentLocale} client:idle />
          </div>
        </div>
        
        <!-- Invisible spacer to reserve space -->
        <div class="flex items-center gap-x-2 gap-y-1 opacity-0 pointer-events-none">
          <!-- Spacer for Theme Switcher -->
          <div class="w-7 h-7 @6xl:w-full @6xl:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2 w-full">
                <div class="w-4 h-4 border border-main flex-shrink-0"></div>
                <span class="hidden @6xl:block font-mono text-xs font-semibold text-main flex-1 text-left">{t('ui.loading')}</span>
              </div>
            </div>
            <div class="hidden @6xl:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
          
          <!-- Spacer for Mode Toggle -->
          <div class="w-7 h-7 @6xl:w-auto @6xl:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2">
                <div class="w-3.5 h-3.5 flex-shrink-0">
                  <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24">
                    <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
                    <line x1="8" y1="21" x2="16" y2="21"></line>
                    <line x1="12" y1="17" x2="12" y2="21"></line>
                  </svg>
                </div>
                <span class="hidden @6xl:block font-mono text-xs font-semibold text-main">{t('ui.loading')}</span>
              </div>
            </div>
            <div class="hidden @6xl:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
          
          <!-- Spacer for Language Switcher -->
          <div class="w-7 h-7 @6xl:w-auto @6xl:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border-double border-2 border-main border-r-0">
              <div class="flex items-center gap-2">
                <span class="font-mono text-xs font-semibold text-main">{t('ui.loading')}</span>
              </div>
            </div>
            <div class="hidden @6xl:flex items-center justify-center w-8 bg-secondary border-double border-2 border-main">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</nav>

<!-- Mobile Dropdown Menu -->
<div 
  id="mobile-dropdown"
  class="@6xl:hidden fixed z-[9999] opacity-0 pointer-events-none"
  style="top: calc(var(--navbar-height) + 1rem); right: calc(1.5rem );"
>
  <!-- Simple backdrop for click-to-close -->
  <div 
    class="fixed inset-0 -z-10"
    id="mobile-backdrop"
  ></div>
  
  <!-- Menu content -->
  <div class="w-[210px] max-w-[85vw]">
    <div class="bg-secondary border-double border-2 border-main">
      <!-- Navigation Links -->
      <div class="p-2 flex flex-col space-y-1">
        {navItems.slice(1).map((item) => (
          <div class="w-full [&>div]:!w-full [&>div]:!block">
            <Button 
              href={item.href}  
              class="!w-full !flex !items-center !justify-center font-mono text-sm"
            >
              {item.label}
            </Button>
          </div>
        ))}
      </div>
      
      <!-- Divider -->
      <div class="border-t border-main"></div>
      
      <!-- Controls -->
      <div class="p-2 space-y-2">
        <!-- Theme Control -->
        <div class="w-full flex bg-secondary border border-main">
          <button 
            class="aspect-square h-8 flex items-center justify-center bg-main text-secondary border-r border-main hover:bg-secondary hover:text-main"
            id="mobile-theme-prev"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left-icon lucide-chevron-left">
              <path d="m15 18-6-6 6-6"/>
            </svg>
          </button>
          <button 
            class="flex-1 flex items-center justify-center gap-2 px-3 py-2 font-mono text-xs font-bold tracking-wide bg-secondary hover:bg-main hover:text-secondary border-0 cursor-pointer"
            id="mobile-theme-center"
          >
          <div class="border border-main">
            <div class="w-4 h-4 mobile-theme-preview-container p-0.5 ">
              <div class="w-full h-full mobile-theme-preview" style="background: linear-gradient(135deg, var(--color-main) 50%, var(--color-secondary) 50%);"></div>
            </div>
          </div>
            <span id="mobile-theme-label">Tema</span>
          </button>
          <button 
            class="aspect-square h-8 flex items-center justify-center bg-main text-secondary border-l border-main hover:bg-secondary hover:text-main"
            id="mobile-theme-next"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right-icon lucide-chevron-right">
              <path d="m9 18 6-6-6-6"/>
            </svg>
          </button>
        </div>
        
        <!-- Mode Control -->
        <div class="w-full flex bg-secondary border border-main">
          <button 
            class="aspect-square h-8 flex items-center justify-center bg-main text-secondary border-r border-main hover:bg-secondary hover:text-main"
            id="mobile-mode-prev"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left-icon lucide-chevron-left">
              <path d="m15 18-6-6 6-6"/>
            </svg>
          </button>
          <button 
            class="flex-1 flex items-center justify-center gap-2 px-3 py-2 font-mono text-xs font-bold tracking-wide bg-secondary hover:bg-main hover:text-secondary border-0 cursor-pointer"
            id="mobile-mode-center"
          >
            <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24" id="mobile-mode-icon">
              <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
              <line x1="8" y1="21" x2="16" y2="21"></line>
              <line x1="12" y1="17" x2="12" y2="21"></line>
            </svg>
            <span id="mobile-mode-label">Modo</span>
          </button>
          <button 
            class="aspect-square h-8 flex items-center justify-center bg-main text-secondary border-l border-main hover:bg-secondary hover:text-main"
            id="mobile-mode-next"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right-icon lucide-chevron-right">
              <path d="m9 18 6-6-6-6"/>
            </svg>
          </button>
        </div>
        
        <!-- Language Control -->
        <div class="w-full flex bg-secondary border border-main">
          <button 
            class="aspect-square h-8 flex items-center justify-center bg-main text-secondary border-r border-main hover:bg-secondary hover:text-main"
            id="mobile-lang-prev"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left-icon lucide-chevron-left">
              <path d="m15 18-6-6 6-6"/>
            </svg>
          </button>
          <button 
            class="flex-1 flex items-center justify-center gap-2 px-3 py-2 font-mono text-xs font-bold tracking-wide bg-secondary hover:bg-main hover:text-secondary border-0 cursor-pointer"
            id="mobile-lang-center"
          >
            <span id="mobile-lang-label">{currentLocale === 'en' ? 'English' : currentLocale === 'es' ? 'Español' : 'Norsk'}</span>
          </button>
          <button 
            class="aspect-square h-8 flex items-center justify-center bg-main text-secondary border-l border-main hover:bg-secondary hover:text-main"
            id="mobile-lang-next"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right-icon lucide-chevron-right">
              <path d="m9 18 6-6-6-6"/>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
</div>
  

 

<script define:vars={{ themeNames, themeColors }}>

  // Initialize global theme state from localStorage immediately and update placeholder
  function initializeGlobalTheme() {
    if (typeof window === 'undefined') return;
    
    // Get theme and mode from localStorage
    const savedThemeId = localStorage.getItem('theme-id');
    const savedMode = localStorage.getItem('theme-mode') || 'system';
    
    // The theme preview should always use CSS variables, no need to update colors
    // This maintains consistency with the design system
    
    // Set global theme state that React components can read immediately
    if (savedThemeId) {
      window.__THEME_ID__ = savedThemeId;
      window.__THEME_MODE__ = savedMode;
      window.__THEME_READY__ = true;
    } else {
      // First visit - let React component handle random theme selection
      window.__THEME_MODE__ = savedMode;
      window.__THEME_READY__ = false;
    }
  }

  // Instant transition from placeholder to React components  
  function showReactComponentsImmediately() {
    const placeholder = document.getElementById('header-controls-placeholder');
    const reactContainer = document.getElementById('header-controls-react');
    
    if (placeholder && reactContainer) {
      // Instant swap - hide placeholder and show React components
      placeholder.style.display = 'none';
      reactContainer.style.visibility = 'visible';
    }
  }

  // Mobile menu functionality
  document.addEventListener('astro:page-load', () => {
    // Mobile menu elements
    const mobileMenuTrigger = document.getElementById('mobile-menu-trigger');


    // Debug mobile menu setup
    console.log('=== MOBILE MENU DEBUG ===');
    console.log('mobileMenuTrigger:', mobileMenuTrigger);
    console.log('mobile-dropdown element:', document.getElementById('mobile-dropdown'));
    console.log('hamburger-icon:', document.getElementById('hamburger-icon'));
    console.log('close-icon:', document.getElementById('close-icon'));

    // Create the simplest possible mobile menu toggle
    function setupMobileMenu() {
      const button = document.getElementById('mobile-menu-trigger');
      const dropdown = document.getElementById('mobile-dropdown');
      const backdrop = document.getElementById('mobile-backdrop');
      const hamburgerIcon = document.getElementById('hamburger-icon');
      const closeIcon = document.getElementById('close-icon');
      
      console.log('setupMobileMenu called:', { button, dropdown, backdrop });
      
      if (!button || !dropdown || !backdrop) {
        console.error('Mobile menu elements not found!', { button, dropdown, backdrop });
        return;
      }

      let isOpen = false;

      function closeMenu() {
        isOpen = false;
        dropdown.style.opacity = '0';
        dropdown.style.pointerEvents = 'none';
        hamburgerIcon?.classList.remove('hidden');
        closeIcon?.classList.add('hidden');
        console.log('Closing dropdown...');
      }

      function openMenu() {
        isOpen = true;
        dropdown.style.opacity = '1';
        dropdown.style.pointerEvents = 'auto';
        hamburgerIcon?.classList.add('hidden');
        closeIcon?.classList.remove('hidden');
        console.log('Opening dropdown...');
      }

      function handleToggle(e) {
        e.preventDefault();
        e.stopPropagation();
        
        console.log('BUTTON CLICKED! isOpen:', isOpen);
        
        if (isOpen) {
          closeMenu();
        } else {
          openMenu();
        }
      }

      button.onclick = handleToggle;

      // Close menu when clicking on the gradient backdrop
      backdrop.onclick = function(e) {
        e.preventDefault();
        closeMenu();
      };

      // Also close when clicking anywhere in the dropdown container except menu content
      dropdown.onclick = function(e) {
        // Only close if clicking on the dropdown container itself, not its children
        if (e.target === dropdown) {
          closeMenu();
        }
      };
      
      // Handle touch events for mobile without conflicts
      button.addEventListener('touchend', function(e) {
        e.preventDefault();
        e.stopPropagation();
        console.log('TOUCH END EVENT!');
        handleToggle(e);
      }, { passive: false });

      console.log('Mobile menu setup complete!');
    }

    // Call setup function
    setupMobileMenu();

    // Mobile control buttons functionality
    function setupMobileControlButtons() {
      const themePrev = document.getElementById('mobile-theme-prev');
      const themeNext = document.getElementById('mobile-theme-next');
      const themeCenter = document.getElementById('mobile-theme-center');
      const modePrev = document.getElementById('mobile-mode-prev');
      const modeNext = document.getElementById('mobile-mode-next');
      const modeCenter = document.getElementById('mobile-mode-center');
      const langPrev = document.getElementById('mobile-lang-prev');
      const langNext = document.getElementById('mobile-lang-next');
      const langCenter = document.getElementById('mobile-lang-center');
      
      // Theme navigation
      if (themePrev) {
        themePrev.onclick = function() {
          // Use keyboard shortcut for previous theme
          const event = new KeyboardEvent('keydown', { 
            key: 'ArrowLeft', 
            metaKey: true 
          });
          document.dispatchEvent(event);
          setTimeout(updateMobileThemeDisplay, 10);
        };
      }
      
      if (themeNext) {
        themeNext.onclick = function() {
          // Use keyboard shortcut for next theme
          const event = new KeyboardEvent('keydown', { 
            key: 'ArrowRight', 
            metaKey: true 
          });
          document.dispatchEvent(event);
          setTimeout(updateMobileThemeDisplay, 10);
        };
      }
      
      if (themeCenter) {
        themeCenter.onclick = function() {
          // Use keyboard shortcut for next theme (same as next button)
          const event = new KeyboardEvent('keydown', { 
            key: 'ArrowRight', 
            metaKey: true 
          });
          document.dispatchEvent(event);
          setTimeout(updateMobileThemeDisplay, 10);
        };
      }

      // Mode navigation
      if (modePrev) {
        modePrev.onclick = function() {
          const desktopModeButton = document.querySelector('[data-theme-control] .inline-flex:nth-child(2) button:first-child');
          if (desktopModeButton) {
            desktopModeButton.click();
            setTimeout(updateMobileModeDisplay, 10);
          }
        };
      }
      
      if (modeNext) {
        modeNext.onclick = function() {
          const desktopModeButton = document.querySelector('[data-theme-control] .inline-flex:nth-child(2) button:first-child');
          if (desktopModeButton) {
            desktopModeButton.click();
            setTimeout(updateMobileModeDisplay, 10);
          }
        };
      }
      
      if (modeCenter) {
        modeCenter.onclick = function() {
          const desktopModeButton = document.querySelector('[data-theme-control] .inline-flex:nth-child(2) button:first-child');
          if (desktopModeButton) {
            desktopModeButton.click();
            setTimeout(updateMobileModeDisplay, 10);
          }
        };
      }

      // Language navigation
      if (langPrev) {
        langPrev.onclick = function() {
          const desktopLangButton = document.querySelector('[data-lang-control] .inline-flex button:first-child');
          if (desktopLangButton) {
            desktopLangButton.click();
          }
        };
      }
      
      if (langNext) {
        langNext.onclick = function() {
          const desktopLangButton = document.querySelector('[data-lang-control] .inline-flex button:first-child');
          if (desktopLangButton) {
            desktopLangButton.click();
          }
        };
      }
      
      if (langCenter) {
        langCenter.onclick = function() {
          const desktopLangButton = document.querySelector('[data-lang-control] .inline-flex button:first-child');
          if (desktopLangButton) {
            desktopLangButton.click();
          }
        };
      }
    }

    // Update mobile theme display to show current theme name
    function updateMobileThemeDisplay() {
      const themeLabel = document.getElementById('mobile-theme-label');
      const themePreview = document.querySelector('.mobile-theme-preview');
      
      if (themeLabel) {
        // Get current theme from localStorage
        const currentThemeId = localStorage.getItem('theme-id');
        if (currentThemeId) {
          themeLabel.textContent = themeNames[currentThemeId] || currentThemeId.charAt(0).toUpperCase() + currentThemeId.slice(1);
          
          // Update mobile theme preview with theme's own colorful color border
          const themePreviewContainer = document.querySelector('.mobile-theme-preview-container');
          if (themePreview && themePreviewContainer && themeColors[currentThemeId]) {
            const colors = themeColors[currentThemeId];
            themePreview.style.background = `linear-gradient(135deg, ${colors.colorful} 50%, ${colors.contrasty} 50%)`;
            themePreviewContainer.style.borderColor = colors.colorful;
          }
        }
      }
    }

    // Update mobile mode display to show current mode name and icon
    function updateMobileModeDisplay() {
      const modeLabel = document.getElementById('mobile-mode-label');
      const modeIcon = document.getElementById('mobile-mode-icon');
      
      if (modeLabel && modeIcon) {
        // Get current mode from localStorage
        const currentMode = localStorage.getItem('theme-mode') || 'system';
        
        // Get current language from URL - English has no prefix
        const currentLang = (() => {
          const path = window.location.pathname;
          if (path.startsWith('/es/')) return 'es';
          if (path.startsWith('/no/')) return 'no';
          return 'en'; // Default to English for root paths
        })();
        
        const modeTranslations = {
          'es': { 'light': 'Claro', 'dark': 'Oscuro', 'system': 'Sistema' },
          'en': { 'light': 'Light', 'dark': 'Dark', 'system': 'System' },
          'no': { 'light': 'Lys', 'dark': 'Mørk', 'system': 'System' }
        };
        
        const modeNames = modeTranslations[currentLang] || modeTranslations['es'];
        
        modeLabel.textContent = modeNames[currentMode] || (currentMode.charAt(0).toUpperCase() + currentMode.slice(1));
        
        // Update icon based on mode
        switch(currentMode) {
          case 'light':
            modeIcon.innerHTML = '<circle cx="12" cy="12" r="5" /><path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42" />';
            break;
          case 'dark':
            modeIcon.innerHTML = '<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" />';
            break;
          case 'system':
          default:
            modeIcon.innerHTML = '<rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect><line x1="8" y1="21" x2="16" y2="21"></line><line x1="12" y1="17" x2="12" y2="21"></line>';
            break;
        }
      }
    }

    // Initialize mobile controls
    setupMobileControlButtons();
    
    // Update displays on page load
    setTimeout(() => {
      updateMobileThemeDisplay();
      updateMobileModeDisplay();
    }, 50);
    
    // Listen for theme changes to update mobile display
    window.addEventListener('storage', function(e) {
      if (e.key === 'theme-id') {
        updateMobileThemeDisplay();
      }
      if (e.key === 'theme-mode') {
        updateMobileModeDisplay();
      }
    });

    // Initialize global theme state (theme already applied by inline script)
    initializeGlobalTheme();
    
    // Listen for when React components are ready with the correct theme
    const handleReactReady = (event) => {
      console.log('React header ready with theme:', event.detail);
      showReactComponentsImmediately();
    };
    
    window.addEventListener('react-header-ready', handleReactReady);
    
    // Cleanup function for page navigation
    const cleanup = () => {
      window.removeEventListener('react-header-ready', handleReactReady);
    };
    
    // Clean up on navigation
    document.addEventListener('astro:before-preparation', cleanup);
    
    
    // Navigation elements
    const navLinks = document.querySelectorAll('[data-nav-link]');
    const currentPath = window.location.pathname;

    // Navigation: Set active state based on current page
    navLinks.forEach(link => {
      const href = link.getAttribute('href');
      if (href && (href === currentPath || (currentPath.startsWith(href) && href !== '/'))) {
        link.classList.add('!bg-main', '!text-secondary');
      }
      
      // Prevent default click behavior and handle on mouseup
      link.addEventListener('click', (e) => {
        e.preventDefault();
      });
      
      link.addEventListener('mouseup', () => {
        const href = link.getAttribute('href');
        if (href) {
          window.location.href = href;
        }
      });
    });

    // Keyboard navigation for main nav only
    function handleKeydown(e) {
      // Only trigger if not typing in an input
      const target = e.target;
      if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') return;
      
      const key = e.key.toLowerCase();
      const navLink = document.querySelector(`[data-hotkey="${key}"]`);
      
      if (navLink && navLink.dataset.hotkey && !e.ctrlKey && !e.metaKey && !e.altKey) {
        e.preventDefault();
        
        // Visual feedback
        navLink.classList.add('!bg-main', '!text-secondary');
        setTimeout(() => {
          navLink.classList.remove('!bg-main', '!text-secondary');
        }, 150);
        
        // Navigate
        const href = navLink.getAttribute('href');
        if (href) {
          window.location.href = href;
        }
      }
    }

    document.addEventListener('keydown', handleKeydown);
  });
</script>

<style>
  /* Ensure navbar stays sticky even when mobile overlay is active */
  nav {
    position: sticky !important;
    top: 0 !important;
  }
  
  nav.relative {
    position: relative !important;
  }

  /* Hide hotkeys on mobile devices */
  @media (max-width: 768px) {
    /* Hide navigation hotkeys */
    [data-nav-link] .text-xs.font-bold.font-mono {
      display: none;
    }
    
  }
</style>