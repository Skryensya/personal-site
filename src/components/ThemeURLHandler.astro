---
// Component to handle theme URL parameters on page load
---

<script>
  import { parseThemeFromURL, saveCustomColors, applyTheme } from '../data/themes.js';

  // Handle URL theme parameters on page load
  document.addEventListener('astro:page-load', () => {
    handleURLTheme();
  });

  function handleURLTheme() {
    const urlTheme = parseThemeFromURL();
    
    if (urlTheme) {
      // Save the shared theme as custom colors
      const customColors = saveCustomColors(urlTheme.colorful, urlTheme.contrasty, urlTheme.name);
      
      if (customColors) {
        // Switch to custom theme
        localStorage.setItem('theme-id', 'custom');
        
        // Apply the theme
        const currentMode = document.documentElement.classList.contains('dark');
        applyTheme('custom', currentMode, customColors);
        
        // Update UI to show custom theme as active
        updateActiveThemeOption('custom');
        updateThemeName(urlTheme.name);
        updateCustomPreviews(customColors);
        
        // Clean URL without reloading page
        const url = new URL(window.location);
        url.searchParams.delete('theme');
        window.history.replaceState({}, '', url);
      }
    }
  }

  // Update custom theme previews in UI
  function updateCustomPreviews(customColors) {
    // Update ThemeControl preview
    const customPreview = document.querySelector('[data-custom-preview="true"]');
    if (customPreview) {
      customPreview.style.background = `linear-gradient(135deg, ${customColors.colorful} 50%, ${customColors.contrasty} 50%)`;
      const icon = customPreview.querySelector('div');
      if (icon) icon.style.display = 'none';
    }

    // Update Header preview
    const headerPreview = document.querySelector('[data-custom-header-preview="true"]');
    if (headerPreview) {
      headerPreview.style.background = `linear-gradient(135deg, ${customColors.colorful} 50%, ${customColors.contrasty} 50%)`;
      const icon = headerPreview.querySelector('div');
      if (icon) icon.style.display = 'none';
    }
  }

  // Update active theme option in UI
  function updateActiveThemeOption(themeId) {
    // Update ThemeControl
    const themeOptions = document.querySelectorAll('.color-option');
    themeOptions.forEach(option => {
      option.classList.toggle('active', option.dataset.theme === themeId);
    });

    // Update Header
    const headerOptions = document.querySelectorAll('.theme-option');
    headerOptions.forEach(option => {
      const checkmark = option.querySelector('.theme-checkmark');
      if (checkmark) {
        checkmark.style.opacity = option.dataset.theme === themeId ? '1' : '0';
      }
    });
  }

  // Update theme name in header
  function updateThemeName(themeName) {
    const themeNameText = document.querySelector('.theme-name-text');
    if (themeNameText) {
      themeNameText.textContent = themeName || 'CUSTOM';
    }
  }
</script>