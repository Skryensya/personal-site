---
import TypingEffect from './TypingEffect.astro';
import siteConfig from '../data/site-config';

// ASCII art for the footer
const asciiArt = `
   ‚ñÑ‚ñÑ‚ñÑ       ‚ñà‚ñà‚ñì     ‚ñà‚ñà‚ñì     ‚ñà‚ñà‚ñì  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñÑ    ‚ñà 
  ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñì‚ñà‚ñà‚ñí    ‚ñì‚ñà‚ñà‚ñí    ‚ñì‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà    ‚ñí ‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí ‚ñà‚ñà ‚ñÄ‚ñà   ‚ñà 
  ‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñí‚ñà‚ñà‚ñë    ‚ñí‚ñà‚ñà‚ñë    ‚ñí‚ñà‚ñà‚ñí‚ñë ‚ñì‚ñà‚ñà‚ñÑ   ‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà  ‚ñÄ‚ñà ‚ñà‚ñà‚ñí
  ‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñí‚ñà‚ñà‚ñë    ‚ñí‚ñà‚ñà‚ñë    ‚ñë‚ñà‚ñà‚ñë  ‚ñí   ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñì‚ñà‚ñà‚ñí  ‚ñê‚ñå‚ñà‚ñà‚ñí
   ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñí‚ñà‚ñà‚ñë   ‚ñì‚ñà‚ñà‚ñë
   ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñë ‚ñí‚ñë‚ñì  ‚ñë‚ñë ‚ñí‚ñë‚ñì  ‚ñë‚ñë‚ñì  ‚ñí ‚ñí‚ñì‚ñí ‚ñí ‚ñë‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë ‚ñë ‚ñí‚ñë   ‚ñí ‚ñí 
    ‚ñí   ‚ñí‚ñí ‚ñë‚ñë ‚ñë ‚ñí  ‚ñë‚ñë ‚ñë ‚ñí  ‚ñë ‚ñí ‚ñë‚ñë ‚ñë‚ñí  ‚ñë ‚ñë  ‚ñë ‚ñí ‚ñí‚ñë ‚ñë ‚ñë‚ñë   ‚ñë ‚ñí‚ñë
    ‚ñë   ‚ñí     ‚ñë ‚ñë     ‚ñë ‚ñë    ‚ñí ‚ñë‚ñë  ‚ñë  ‚ñë  ‚ñë ‚ñë ‚ñë ‚ñí     ‚ñë   ‚ñë ‚ñë 
        ‚ñë  ‚ñë    ‚ñë  ‚ñë    ‚ñë  ‚ñë ‚ñë        ‚ñë      ‚ñë ‚ñë           ‚ñë 
`;

const finalPhrase = "Thanks for visiting. Let's build something amazing together! üöÄ";

// Site navigation links for the sitemap
const siteLinks = [
  { text: 'INICIO', href: '/', description: 'Home page' },
  { text: 'PROYECTOS', href: '/projects', description: 'My work and projects' },
  { text: 'CONWAY\'S GAME', href: '/conways-game-of-life', description: 'Interactive simulation' },
  { text: 'LINKEDIN', href: 'https://linkedin.com/in/skryensya', description: 'Professional profile' }
];
---

<footer class="terminal-footer bg-main text-secondary min-h-screen flex items-center justify-center py-8 px-4 mt-16">
  <div class="terminal-window w-full max-w-6xl bg-secondary text-main p-8">
    <!-- Terminal header -->
    <div class="terminal-header flex items-center gap-2 mb-6 pb-3 border-b border-main">
      <span class="text-sm font-mono">allisonpena@portfolio:~$</span>
    </div>

      <!-- Terminal content -->
      <div class="terminal-content font-mono text-sm space-y-4" id="terminal-content">
        <!-- ASCII Art -->
        <div class="ascii-section">
          <TypingEffect 
            id="ascii-art" 
            text={asciiArt} 
            speed={5} 
            delay={500}
            className="whitespace-pre text-xs leading-tight"
          />
        </div>

        <!-- Name and title -->
        <div class="name-section">
          <TypingEffect 
            id="name" 
            text="Allison Pe√±a - Full-stack Web Developer" 
            speed={60} 
            delay={0}
            className="text-lg font-bold"
          />
        </div>

        <!-- Sitemap -->
        <div class="sitemap-section">
          <TypingEffect 
            id="sitemap-title" 
            text="SITEMAP:" 
            speed={80} 
            delay={0}
            className="text-sm font-bold mb-2"
          />
          
          <div class="sitemap-links space-y-2 ml-2">
            {siteLinks.map((link, index) => (
              <div class="sitemap-item">
                <TypingEffect 
                  id={`link-${index}`}
                  text={`‚îú‚îÄ‚îÄ ${link.text} ‚Üí ${link.href}`}
                  speed={40}
                  delay={0}
                  className="text-sm"
                />
                <a 
                  href={link.href} 
                  class="block ml-4 text-main hover:bg-main hover:text-secondary px-2 py-1 transition-colors opacity-0"
                  target={link.href.startsWith('http') ? '_blank' : '_self'}
                  rel={link.href.startsWith('http') ? 'noopener noreferrer' : undefined}
                  data-link-index={index}
                >
                  {link.description}
                </a>
              </div>
            ))}
          </div>
        </div>

        <!-- Final phrase -->
        <div class="final-phrase">
          <TypingEffect 
            id="final-phrase" 
            text={finalPhrase} 
            speed={70} 
            delay={0}
            className="text-base italic"
          />
        </div>

        <!-- Prompt line -->
        <div class="prompt-line">
          <TypingEffect 
            id="prompt" 
            text="allisonpena@portfolio:~$ " 
            speed={100} 
            delay={0}
            className="text-sm"
          />
        </div>
      </div>
    </div>
  </div>
</footer>

<style>
  .terminal-footer {
    background: var(--color-main);
    color: var(--color-secondary);
  }

  .terminal-window {
    font-family: 'JetBrains Mono', 'IBM Plex Mono', monospace;
    background: var(--color-secondary);
    color: var(--color-main);
    border: 2px solid var(--color-main);
  }

  @keyframes fadeInLink {
    from { opacity: 0; transform: translateX(-10px); }
    to { opacity: 1; transform: translateX(0); }
  }

  /* Hide all content initially */
  .terminal-content > div {
    opacity: 0;
  }

  .terminal-content.active > div {
    opacity: 1;
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const footer = document.querySelector('.terminal-footer');
    const terminalContent = document.querySelector('#terminal-content');
    let hasStarted = false;

    if (!footer || !terminalContent) return;

    // Intersection Observer to trigger animation when footer comes into view
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting && !hasStarted) {
          hasStarted = true;
          startSequentialTyping();
        }
      });
    }, {
      threshold: 0.2
    });

    observer.observe(footer);

    async function startSequentialTyping() {
      terminalContent.classList.add('active');
      const manager = (window as any).TypingManager.getInstance();
      
      // Sequential typing with delays between sections
      const typingSequence = [
        { id: 'ascii-art', delay: 500 },
        { id: 'name', delay: 1000 },
        { id: 'sitemap-title', delay: 800 },
        { id: 'link-0', delay: 400 },
        { id: 'link-1', delay: 300 },
        { id: 'link-2', delay: 300 },
        { id: 'link-3', delay: 300 },
        { id: 'final-phrase', delay: 800 },
        { id: 'prompt', delay: 500 }
      ];

      for (const item of typingSequence) {
        const container = document.querySelector(`[data-typing-id="${item.id}"]`) as HTMLElement;
        if (container) {
          const textElement = container.querySelector('.typing-text') as HTMLElement;
          const text = textElement?.dataset.text || '';
          const speed = item.id === 'ascii-art' ? 5 : item.id.startsWith('link-') ? 40 : 60;
          
          await manager.typeText(container, text, speed, item.delay);
          
          // Animate sitemap links after they're typed
          if (item.id.startsWith('link-')) {
            const linkIndex = item.id.split('-')[1];
            const linkElement = document.querySelector(`[data-link-index="${linkIndex}"]`) as HTMLElement;
            if (linkElement) {
              setTimeout(() => {
                linkElement.style.animation = 'fadeInLink 0.3s ease-in forwards';
                linkElement.style.opacity = '1';
              }, 500);
            }
          }
        }
      }
    }
  });
</script>