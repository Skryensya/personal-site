---
import CardSwapAstro from './CardSwapAstro.astro';
import HeroCard from './HeroCard.astro';

interface Props {
  cardDistance?: number;
  verticalDistance?: number;
  delay?: number;
  pauseOnHover?: boolean;
  width?: number;
  height?: number;
  frontendTitle?: string;
  frontendDescription?: string;
  backendTitle?: string;
  backendDescription?: string;
  designTitle?: string;
  designDescription?: string;
  forceOS?: 'macos' | 'windows' | null;
  class?: string;
}

const {
  cardDistance = 60,
  verticalDistance = 70,
  delay = 5000,
  pauseOnHover = false,
  width = 300,
  height = 200,
  frontendTitle = 'Visión de Producto',
  frontendDescription = 'Estrategia centrada en el usuario',
  backendTitle = 'Atención al Detalle',
  backendDescription = 'Calidad en cada implementación',
  designTitle = 'Simpleza Eficaz',
  designDescription = 'Soluciones directas y funcionales',
  forceOS = null,
  class: className = ''
} = Astro.props;

const cardData = [
  {
    title: frontendTitle,
    description: frontendDescription,
    pageContent: 'vision'
  },
  {
    title: backendTitle,
    description: backendDescription,
    pageContent: 'detail'
  },
  {
    title: designTitle,
    description: designDescription,
    pageContent: 'simplicity'
  }
];
---

<CardSwapAstro
  width={width}
  height={height}
  cardDistance={cardDistance}
  verticalDistance={verticalDistance}
  delay={delay}
  pauseOnHover={pauseOnHover}
  easing="elastic"
  skewAmount={6}
  class={className}
>
  {cardData.map((card, index) => (
    <HeroCard 
      title={card.title}
      description={card.description}
      type={card.pageContent as 'vision' | 'detail' | 'simplicity'}
      width={width}
      height={height}
      forceOS={forceOS}
      class="card-swap-card absolute top-1/2 left-1/2 [transform-style:preserve-3d] [will-change:transform] [backface-visibility:hidden]"
      data-card-index={index}
    />
  ))}
</CardSwapAstro>

<script>
  import { debugLogger } from '@/utils/debug-logger';

  // Card reveal functionality specifically for HeroCards
  function revealHeroCards() {
    debugLogger.log('🔍 Searching for hero cards...');
    const heroCards = document.querySelectorAll('.card-swap-card[data-card-index]');
    debugLogger.log('📋 Found hero cards:', heroCards.length, heroCards);

    if (heroCards.length === 0) {
      debugLogger.warn('⚠️ No hero cards found with data-card-index attribute');
      return;
    }

    setTimeout(() => {
      debugLogger.log('✨ Adding card-revealed class to cards...');
      heroCards.forEach((card, index) => {
        debugLogger.log(`🎯 Revealing card ${index}:`, card);
        card.classList.add('card-revealed');
      });
    }, 100);
  }

  // Initialize card reveal
  function initHeroCardReveal() {
    debugLogger.log('🚀 Initializing hero card reveal...');
    revealHeroCards();
  }

  // Initialize reveal when DOM is ready
  if (document.readyState === 'loading') {
    debugLogger.log('⏳ DOM loading, waiting for DOMContentLoaded...');
    document.addEventListener('DOMContentLoaded', initHeroCardReveal);
  } else {
    debugLogger.log('✅ DOM ready, initializing immediately...');
    initHeroCardReveal();
  }

  // Handle Astro page transitions for card reveal
  document.addEventListener('astro:page-load', () => {
    debugLogger.log('🔄 Astro page load event triggered');
    initHeroCardReveal();
  });
</script>
