---
import CardSwapAstro from './CardSwapAstro.astro';

interface Props {
  cardDistance?: number;
  verticalDistance?: number;
  delay?: number;
  pauseOnHover?: boolean;
  width?: number;
  height?: number;
  frontendTitle?: string;
  frontendDescription?: string;
  backendTitle?: string;
  backendDescription?: string;
  designTitle?: string;
  designDescription?: string;
  forceOS?: 'macos' | 'windows' | null;
  class?: string;
}

const {
  cardDistance = 60,
  verticalDistance = 70,
  delay = 5000,
  pauseOnHover = false,
  width = 300,
  height = 200,
  frontendTitle = 'Frontend',
  frontendDescription = 'React, TypeScript, Astro',
  backendTitle = 'Backend',
  backendDescription = 'Node.js, Python, APIs',
  designTitle = 'Design',
  designDescription = 'UI/UX, Figma, Prototyping',
  forceOS = null,
  class: className = ''
} = Astro.props;

const cardData = [
  {
    title: frontendTitle,
    description: frontendDescription,
    pageContent: 'frontend'
  },
  {
    title: backendTitle,
    description: backendDescription,
    pageContent: 'backend'
  },
  {
    title: designTitle,
    description: designDescription,
    pageContent: 'design'
  }
];
---

<CardSwapAstro
  width={width}
  height={height}
  cardDistance={cardDistance}
  verticalDistance={verticalDistance}
  delay={delay}
  pauseOnHover={pauseOnHover}
  easing="elastic"
  skewAmount={6}
  class={className}
>
  {cardData.map((card, index) => (
    <div 
      class="card-swap-card absolute top-1/2 left-1/2 border-2 border-main bg-secondary [transform-style:preserve-3d] [will-change:transform] [backface-visibility:hidden]" 
      style={`width: ${typeof width === 'number' ? width + 'px' : width}; height: ${typeof height === 'number' ? height + 'px' : height};`}
      data-card-index={index}
      key={index}>
      <!-- Browser window header -->
      <div class="window-header w-full h-8 bg-secondary text-main flex items-center" data-force-os={forceOS}>
        <!-- macOS style - traffic lights on left (will be toggled by script) -->
        <div class="macos-controls flex gap-2 pl-2 hidden">
          <div class="w-3 h-3 bg-main rounded-full flex items-center justify-center">
            <!-- X icon -->
            <svg width="8" height="8" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3.5" class="text-secondary">
              <path d="M18 6L6 18M6 6l12 12"></path>
            </svg>
          </div>
          <div class="w-3 h-3 bg-main rounded-full flex items-center justify-center">
            <!-- Minus icon -->
            <svg width="8" height="8" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3.5" class="text-secondary">
              <path d="M5 12h14"></path>
            </svg>
          </div>
          <div class="w-3 h-3 bg-main rounded-full flex items-center justify-center">
            <!-- Maximize icon -->
            <svg width="6" height="6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3.5" class="text-secondary">
              <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
              <rect x="9" y="9" width="6" height="6"></rect>
            </svg>
          </div>
        </div>
        
        <!-- Windows style - controls on right (will be toggled by script) -->
        <div class="windows-controls flex w-full">
          <div class="flex-1"></div>
          <div class="flex">
            <div class="w-8 h-8 bg-secondary border-l border-main flex items-center justify-center">
              <!-- Minus icon -->
              <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3.5" class="text-main">
                <path d="M5 12h14"></path>
              </svg>
            </div>
            <div class="w-8 h-8 bg-secondary border-l border-main flex items-center justify-center">
              <!-- Square icon -->
              <svg width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3.5" class="text-main">
                <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
              </svg>
            </div>
            <div class="w-8 h-8 bg-secondary border-l border-main flex items-center justify-center">
              <!-- X icon -->
              <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3.5" class="text-main">
                <path d="M18 6L6 18M6 6l12 12"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- Window content -->
      <div class="p-4 h-[calc(100%-2rem)] flex flex-col border-t-2 border-main">
        <div class="text-center mb-4">
          <h3 class="text-sm font-bold mb-2 font-mono uppercase tracking-wide">{card.title}</h3>
          <p class="text-xs text-main/70 font-mono leading-relaxed">{card.description}</p>
        </div>
        <div class="flex-1 flex items-center justify-center">
          {card.pageContent === 'frontend' && (
            <div class="space-y-2 w-full">
              <div class="h-4 bg-main/20 w-3/4"></div>
              <div class="h-3 bg-main/10 w-full"></div>
              <div class="h-3 bg-main/10 w-5/6"></div>
              <div class="flex gap-2 mt-3">
                <div class="h-6 w-16 bg-main/30 border border-main/40"></div>
                <div class="h-6 w-12 bg-main/20 border border-main/40"></div>
              </div>
            </div>
          )}
          
          {card.pageContent === 'backend' && (
            <div class="space-y-3 w-full">
              <div class="h-3 bg-main/30 w-2/3"></div>
              <div class="space-y-2">
                <div class="h-2 bg-main/20 w-full"></div>
                <div class="h-2 bg-main/20 w-4/5"></div>
                <div class="h-2 bg-main/20 w-3/4"></div>
              </div>
              <div class="grid grid-cols-2 gap-2 mt-4">
                <div class="h-8 bg-main/10 border border-main/30 flex items-center justify-center">
                  <div class="w-4 h-1 bg-main/40"></div>
                </div>
                <div class="h-8 bg-main/10 border border-main/30 flex items-center justify-center">
                  <div class="w-4 h-1 bg-main/40"></div>
                </div>
              </div>
              <div class="h-1 bg-main/50 w-1/2 mt-3"></div>
            </div>
          )}
          
          {card.pageContent === 'design' && (
            <div class="space-y-2 w-full">
              <div class="grid grid-cols-3 gap-1">
                <div class="h-8 bg-main/20 border border-main/30"></div>
                <div class="h-8 bg-main/30 border border-main/30"></div>
                <div class="h-8 bg-main/20 border border-main/30"></div>
              </div>
              <div class="h-2 bg-main/10 w-full mt-2"></div>
              <div class="h-2 bg-main/10 w-4/5"></div>
              <div class="flex justify-between mt-3">
                <div class="w-8 h-8 bg-main/20 border border-main/30"></div>
                <div class="w-8 h-8 bg-main/30 border border-main/30"></div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  ))}
</CardSwapAstro>

<script>
  // OS Detection and Window Style Management
  class WindowStyleManager {
    private detectOS(): 'macos' | 'windows' {
      if (typeof window === 'undefined') return 'windows';
      
      const userAgent = window.navigator.userAgent;
      if (/Mac|iPhone|iPad|iPod/.test(userAgent)) {
        return 'macos';
      }
      return 'windows';
    }

    private updateWindowStyles() {
      const headers = document.querySelectorAll('.window-header');
      
      headers.forEach((header) => {
        const headerElement = header as HTMLElement;
        const forceOS = headerElement.dataset.forceOs;
        
        // Check localStorage first for debug override
        let windowStyle: 'macos' | 'windows';
        const debugOS = localStorage.getItem('debug-os');
        
        if (debugOS && (debugOS === 'macos' || debugOS === 'windows')) {
          windowStyle = debugOS as 'macos' | 'windows';
        } else if (forceOS && (forceOS === 'macos' || forceOS === 'windows')) {
          windowStyle = forceOS as 'macos' | 'windows';
        } else {
          windowStyle = this.detectOS();
        }

        const macosControls = header.querySelector('.macos-controls');
        const windowsControls = header.querySelector('.windows-controls');

        if (windowStyle === 'macos') {
          macosControls?.classList.remove('hidden');
          macosControls?.classList.add('flex');
          windowsControls?.classList.add('hidden');
          windowsControls?.classList.remove('flex');
        } else {
          macosControls?.classList.add('hidden');
          macosControls?.classList.remove('flex');
          windowsControls?.classList.remove('hidden');
          windowsControls?.classList.add('flex');
        }
      });
    }

    public init() {
      this.updateWindowStyles();

      // Listen for localStorage changes
      const handleStorageChange = () => {
        this.updateWindowStyles();
      };

      window.addEventListener('storage', handleStorageChange);

      // Also listen for custom events that might change the OS setting
      window.addEventListener('os-style-changed', () => {
        this.updateWindowStyles();
      });
    }
  }

  // Initialize window style management
  function initWindowStyles() {
    const manager = new WindowStyleManager();
    manager.init();
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initWindowStyles);
  } else {
    initWindowStyles();
  }

  // Handle Astro page transitions
  document.addEventListener('astro:page-load', initWindowStyles);

  // Card reveal functionality specifically for HeroCards
  function revealHeroCards() {
    console.log('üîç Searching for hero cards...');
    const heroCards = document.querySelectorAll('.card-swap-card[data-card-index]');
    console.log('üìã Found hero cards:', heroCards.length, heroCards);
    
    if (heroCards.length === 0) {
      console.warn('‚ö†Ô∏è No hero cards found with data-card-index attribute');
      return;
    }
    
    setTimeout(() => {
      console.log('‚ú® Adding card-revealed class to cards...');
      heroCards.forEach((card, index) => {
        console.log(`üéØ Revealing card ${index}:`, card);
        card.classList.add('card-revealed');
      });
    }, 100);
  }

  // Initialize card reveal
  function initHeroCardReveal() {
    console.log('üöÄ Initializing hero card reveal...');
    revealHeroCards();
  }

  // Initialize reveal when DOM is ready
  if (document.readyState === 'loading') {
    console.log('‚è≥ DOM loading, waiting for DOMContentLoaded...');
    document.addEventListener('DOMContentLoaded', initHeroCardReveal);
  } else {
    console.log('‚úÖ DOM ready, initializing immediately...');
    initHeroCardReveal();
  }

  // Handle Astro page transitions for card reveal
  document.addEventListener('astro:page-load', () => {
    console.log('üîÑ Astro page load event triggered');
    initHeroCardReveal();
  });
</script>