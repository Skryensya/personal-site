---
import { getTranslations } from '@/i18n/utils';
import { defaultLang, type Language, ui } from '@/i18n/ui';

interface Props {
  lang?: Language;
}

const { lang = defaultLang } = Astro.props;
const t = getTranslations(lang);
const translations = ui[lang];
---

<article class="max-w-none">
  <h1 id="accessibility-title" class="!text-2xl font-bold text-main mb-6 font-mono">
    {t('accessibility.title')}
  </h1>

  <div class="space-y-6 text-main text-base leading-relaxed">
    <section>
      <h2 id="commitment" class="text-lg font-semibold text-main mb-3 font-mono">
        {t('accessibility.commitment.title')}
      </h2>
      <p class="mb-4">
        {t('accessibility.commitment.content')}
      </p>
    </section>

    <section>
      <h2 id="standards" class="text-lg font-semibold text-main mb-3 font-mono">
        {t('accessibility.standards.title')}
      </h2>
      <div class="space-y-3">
        <p>
          {lang === 'es' && (
            <>
              Este sitio procura cumplir con las Pautas de Accesibilidad para el Contenido Web (<a
                href="https://www.w3.org/TR/WCAG22/"
                target="_blank"
                rel="noopener noreferrer"
                class="text-main underline hover:bg-main hover:text-secondary transition-colors"
              >WCAG</a>) 2.2 en nivel AA, que definen cómo hacer que los contenidos digitales sean más accesibles para personas con discapacidad.
            </>
          )}
          {lang === 'en' && (
            <>
              This site aims to comply with the Web Content Accessibility Guidelines (<a
                href="https://www.w3.org/TR/WCAG22/"
                target="_blank"
                rel="noopener noreferrer"
                class="text-main underline hover:bg-main hover:text-secondary transition-colors"
              >WCAG</a>) 2.2, Level AA, which define how to make digital content more accessible to people with disabilities.
            </>
          )}
          {lang === 'no' && (
            <>
              Denne nettsiden streber etter å oppfylle retningslinjene for tilgjengelig webinnhold (<a
                href="https://www.w3.org/TR/WCAG22/"
                target="_blank"
                rel="noopener noreferrer"
                class="text-main underline hover:bg-main hover:text-secondary transition-colors"
              >WCAG</a>) 2.2, nivå AA, som definerer hvordan man gjør digitalt innhold mer tilgjengelig for personer med funksjonshemming.
            </>
          )}
        </p>
      </div>
    </section>

    <section>
      <h2 id="features" class="text-lg font-semibold text-main mb-3 font-mono">
        {t('accessibility.features.title')}
      </h2>
      <div class="space-y-3">
        {(translations['accessibility.features.items'] as readonly string[]).map((item: string) => (
          <p>{item}</p>
        ))}
      </div>
    </section>

    <section>
      <h2 id="feedback" class="text-lg font-semibold text-main mb-3 font-mono">
        {t('accessibility.feedback.title')}
      </h2>
      <p class="mb-3">
        {t('accessibility.feedback.content')}
      </p>
      <p>
        {t('accessibility.feedback.contact')}
        <a href="mailto:allison.jpb+accessibility@gmail.com"
           class="text-main underline hover:bg-main hover:text-secondary transition-colors">
          allison.jpb+accessibility@gmail.com
        </a>
      </p>
    </section>

    <section>
      <h2 id="contrast" class="text-lg font-semibold text-main mb-3 font-mono">
        {t('accessibility.contrast.title')}
      </h2>
      <p class="mb-4">
        {t('accessibility.contrast.content')}
      </p>
      <div class="bg-main text-secondary p-4 border border-main">
        <div class="font-mono text-sm">
          <strong>Current theme contrast:</strong>
          <span id="contrast-display" class="ml-2">Calculating...</span>
        </div>
      </div>
    </section>

    <section>
      <h2 id="updates" class="text-lg font-semibold text-main mb-3 font-mono">
        {t('accessibility.updates.title')}
      </h2>
      <p>
        {t('accessibility.updates.content')}
      </p>
    </section>
  </div>
</article>

<script>
    document.addEventListener('astro:page-load', () => {
        // Contrast ratio calculation functions
        function hexToRgb(hex: string): { r: number; g: number; b: number } | null {
            const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        }

        function getRelativeLuminance(r: number, g: number, b: number): number {
            const [rNorm, gNorm, bNorm] = [r, g, b].map(c => {
                c = c / 255;
                return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
            });
            return 0.2126 * rNorm + 0.7152 * gNorm + 0.0722 * bNorm;
        }

        function getContrastRatio(color1: string, color2: string): number {
            const rgb1 = hexToRgb(color1);
            const rgb2 = hexToRgb(color2);

            if (!rgb1 || !rgb2) return 1;

            const lum1 = getRelativeLuminance(rgb1.r, rgb1.g, rgb1.b);
            const lum2 = getRelativeLuminance(rgb2.r, rgb2.g, rgb2.b);

            const brightest = Math.max(lum1, lum2);
            const darkest = Math.min(lum1, lum2);

            return (brightest + 0.05) / (darkest + 0.05);
        }

        function getWCAGLevel(ratio: number): string {
            if (ratio >= 7) return 'AAA';
            if (ratio >= 4.5) return 'AA';
            if (ratio >= 3) return 'AA Large';
            return 'Fail';
        }

        function rgbToHex(rgb: string): string {
            const result = rgb.match(/\d+/g);
            if (!result || result.length < 3) return '#000000';

            const r = parseInt(result[0]);
            const g = parseInt(result[1]);
            const b = parseInt(result[2]);

            return '#' + [r, g, b].map(x => {
                const hex = x.toString(16);
                return hex.length === 1 ? '0' + hex : hex;
            }).join('');
        }

        function calculateAndDisplayContrast(): void {
            const contrastDisplay = document.getElementById('contrast-display');
            if (!contrastDisplay) return;

            try {
                // Get the computed CSS custom properties
                const rootStyles = getComputedStyle(document.documentElement);
                const colorMain = rootStyles.getPropertyValue('--color-main').trim();
                const colorSecondary = rootStyles.getPropertyValue('--color-secondary').trim();

                // If custom properties aren't available, try to get from theme data attribute
                let mainColor = colorMain;
                let secondaryColor = colorSecondary;

                // Fallback: get from current theme or assume default values
                if (!mainColor || !secondaryColor) {
                    const isDarkMode = document.documentElement.getAttribute('data-theme') === 'dark';
                    mainColor = isDarkMode ? '#ffffff' : '#000000';
                    secondaryColor = isDarkMode ? '#000000' : '#ffffff';
                }

                // Ensure we have hex values
                if (!mainColor.startsWith('#')) {
                    mainColor = mainColor.startsWith('rgb') ? rgbToHex(mainColor) : '#000000';
                }
                if (!secondaryColor.startsWith('#')) {
                    secondaryColor = secondaryColor.startsWith('rgb') ? rgbToHex(secondaryColor) : '#ffffff';
                }

                const contrastRatio = getContrastRatio(mainColor, secondaryColor);
                const wcagLevel = getWCAGLevel(contrastRatio);

                const displayText = `${contrastRatio.toFixed(1)}:1 (${wcagLevel})`;
                contrastDisplay.textContent = displayText;

                console.log('Contrast calculated:', { mainColor, secondaryColor, contrastRatio, wcagLevel });

            } catch (error) {
                console.warn('Failed to calculate contrast ratio:', error);
                contrastDisplay.textContent = 'Available on page load';
            }
        }

        // Calculate contrast ratio on load and theme changes
        calculateAndDisplayContrast();

        // Listen for theme changes
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === 'attributes' &&
                    (mutation.attributeName === 'data-theme' || mutation.attributeName === 'class')) {
                    setTimeout(calculateAndDisplayContrast, 100);
                }
            });
        });

        observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ['data-theme', 'class']
        });
    });
</script>