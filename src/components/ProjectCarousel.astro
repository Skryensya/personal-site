---
interface Props {
  projectCount: number;
  class?: string;
}

const { projectCount, class: className = '' } = Astro.props;

// Generate unique ID for this carousel instance
const carouselId = `carousel-${Math.random().toString(36).substr(2, 9)}`;
---

{projectCount <= 3 ? (
  <!-- Simple grid for 3 or fewer projects -->
  <div class={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 ${className}`}>
    <slot />
  </div>
) : (
  <!-- Full carousel for more than 3 projects -->
  <div class={`relative ${className}`} data-carousel={carouselId}>
    <!-- Embla viewport -->
    <div class="overflow-visible" data-embla-viewport>
      <div class="flex" data-embla-container>
        <slot />
      </div>
    </div>

    <!-- Navigation controls -->
    <div class="flex justify-between items-center mt-8">
      <button
        type="button"
        data-embla-prev
        class="bg-secondary border border-main px-4 py-2 font-mono disabled:opacity-50 disabled:cursor-not-allowed hover:bg-main hover:text-secondary"
        aria-label="Previous projects"
        disabled
      >
        ← PREV
      </button>

      <!-- Dots indicator -->
      <div class="flex gap-2" data-embla-dots>
        <!-- Dots will be generated by JavaScript -->
      </div>

      <button
        type="button"
        data-embla-next
        class="bg-secondary border border-main px-4 py-2 font-mono disabled:opacity-50 disabled:cursor-not-allowed hover:bg-main hover:text-secondary"
        aria-label="Next projects"
      >
        NEXT →
      </button>
    </div>
  </div>
)}

<script>
  import EmblaCarousel from 'embla-carousel';
  import Autoplay from 'embla-carousel-autoplay';

  class ProjectCarousel {
    private emblaApi: any;
    private viewport: HTMLElement;
    private container: HTMLElement;
    private prevButton: HTMLButtonElement;
    private nextButton: HTMLButtonElement;
    private dotsContainer: HTMLElement;
    private slides: HTMLElement[] = [];
    private dotButtons: HTMLButtonElement[] = [];

    constructor(carouselElement: HTMLElement) {
      this.viewport = carouselElement.querySelector('[data-embla-viewport]') as HTMLElement;
      this.container = carouselElement.querySelector('[data-embla-container]') as HTMLElement;
      this.prevButton = carouselElement.querySelector('[data-embla-prev]') as HTMLButtonElement;
      this.nextButton = carouselElement.querySelector('[data-embla-next]') as HTMLButtonElement;
      this.dotsContainer = carouselElement.querySelector('[data-embla-dots]') as HTMLElement;

      if (!this.viewport || !this.container || !this.prevButton || !this.nextButton || !this.dotsContainer) {
        console.error('ProjectCarousel: Required elements not found');
        return;
      }

      this.init();
    }

    private init() {
      this.setupSlides();
      this.initEmbla();
      this.bindEvents();
    }

    private setupSlides() {
      // Get all direct children as slides and setup their styling
      this.slides = Array.from(this.container.children) as HTMLElement[];
      
      this.slides.forEach((slide, index) => {
        // Set up responsive slide sizing
        slide.classList.add('flex-shrink-0', 'px-2');
        if (index === 0) slide.classList.add('pl-0');
        if (index === this.slides.length - 1) slide.classList.add('pr-0');
        
        // Responsive width classes
        slide.classList.add('w-full', 'md:w-1/2', 'lg:w-1/3');
      });
    }

    private initEmbla() {
      // Embla options with responsive breakpoints
      const options = {
        loop: false,
        align: 'start' as const,
        slidesToScroll: 1,
        containScroll: 'trimSnaps' as const,
        breakpoints: {
          '(min-width: 768px)': { slidesToScroll: 2 },
          '(min-width: 1024px)': { slidesToScroll: 3 }
        }
      };

      // Initialize Embla with autoplay
      const autoplayOptions = {
        delay: 4000,
        stopOnInteraction: false,
        stopOnMouseEnter: true,
        stopOnFocusIn: true
      };

      this.emblaApi = EmblaCarousel(this.viewport, options, [Autoplay(autoplayOptions)]);
      
      // Set up event listeners
      this.emblaApi.on('select', this.onSelect.bind(this));
      this.emblaApi.on('init', this.onInit.bind(this));
    }

    private onInit() {
      this.createDotButtons();
      this.updateButtons();
      this.updateDots();
    }

    private onSelect() {
      this.updateButtons();
      this.updateDots();
    }

    private createDotButtons() {
      this.dotsContainer.innerHTML = '';
      this.dotButtons = [];

      const scrollSnaps = this.emblaApi.scrollSnapList();
      
      scrollSnaps.forEach((_, index) => {
        const button = document.createElement('button');
        button.type = 'button';
        button.className = 'w-3 h-3 border border-main bg-secondary';
        button.setAttribute('aria-label', `Go to slide ${index + 1}`);
        
        button.addEventListener('click', () => this.emblaApi.scrollTo(index));
        
        this.dotsContainer.appendChild(button);
        this.dotButtons.push(button);
      });
    }

    private updateButtons() {
      this.prevButton.disabled = !this.emblaApi.canScrollPrev();
      this.nextButton.disabled = !this.emblaApi.canScrollNext();
    }

    private updateDots() {
      const selectedIndex = this.emblaApi.selectedScrollSnap();
      
      this.dotButtons.forEach((button, index) => {
        if (index === selectedIndex) {
          button.classList.remove('bg-secondary');
          button.classList.add('bg-main');
        } else {
          button.classList.remove('bg-main');
          button.classList.add('bg-secondary');
        }
      });
    }

    private bindEvents() {
      this.prevButton.addEventListener('click', () => {
        this.emblaApi.scrollPrev();
      });

      this.nextButton.addEventListener('click', () => {
        this.emblaApi.scrollNext();
      });

      // Pause autoplay on hover/focus
      this.viewport.addEventListener('mouseenter', () => {
        const autoplay = this.emblaApi.plugins().autoplay;
        if (autoplay) autoplay.stop();
      });

      this.viewport.addEventListener('mouseleave', () => {
        const autoplay = this.emblaApi.plugins().autoplay;
        if (autoplay) autoplay.play();
      });
    }

    public destroy() {
      if (this.emblaApi) {
        this.emblaApi.destroy();
      }
    }
  }

  // Initialize all carousels on the page
  function initCarousels() {
    const carousels = document.querySelectorAll('[data-carousel]');
    const carouselInstances: ProjectCarousel[] = [];

    carousels.forEach(carousel => {
      const instance = new ProjectCarousel(carousel as HTMLElement);
      carouselInstances.push(instance);
    });

    // Clean up on page unload
    window.addEventListener('beforeunload', () => {
      carouselInstances.forEach(instance => instance.destroy());
    });
  }

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCarousels);
  } else {
    initCarousels();
  }

  // Re-initialize on Astro page navigation
  document.addEventListener('astro:page-load', initCarousels);
</script>

<style>
  /* Embla carousel specific styles */
  [data-embla-viewport] {
    overflow: visible;
    position: relative;
  }

  [data-embla-container] {
    display: flex;
  }


  /* Focus styles for accessibility */
  [data-embla-prev]:focus,
  [data-embla-next]:focus {
    outline: 2px solid var(--color-main);
    outline-offset: 2px;
  }

  [data-embla-dots] button:focus {
    outline: 2px solid var(--color-main);
    outline-offset: 2px;
  }

  /* Ensure proper slide sizing */
  [data-embla-container] > * {
    min-width: 0;
  }

  /* Mobile responsive behavior */
  @media (max-width: 767px) {
    [data-embla-container] > * {
      flex: 0 0 100%;
    }
  }

  @media (min-width: 768px) and (max-width: 1023px) {
    [data-embla-container] > * {
      flex: 0 0 50%;
    }
  }

  @media (min-width: 1024px) {
    [data-embla-container] > * {
      flex: 0 0 33.333333%;
    }
  }
</style>