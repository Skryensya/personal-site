---
interface Props {
  width?: number;
  height?: number;
  forceOS?: 'macos' | 'windows' | null;
  class?: string;
}

const {
  width = 400,
  height = 342,
  forceOS = null,
  class: className = ''
} = Astro.props;
---

<div 
  class={`border-2 border-main bg-secondary text-main shadow-none ${className}`}
  style={`width: ${typeof width === 'number' ? width + 'px' : width}; height: ${typeof height === 'number' ? height + 'px' : height};`}
>
  <!-- Browser window header -->
  <div class={`window-header w-full h-8 bg-secondary text-main flex items-center`} data-force-os={forceOS}>
    <!-- macOS style - traffic lights on left (will be toggled by script) -->
    <div class="macos-controls flex gap-2 pl-2 hidden">
      <div class="w-3 h-3 bg-main rounded-full flex items-center justify-center">
        <!-- X icon -->
        <svg width="8" height="8" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" class="text-secondary">
          <path d="M18 6 6 18"/>
          <path d="m6 6 12 12"/>
        </svg>
      </div>
      <div class="w-3 h-3 bg-main rounded-full flex items-center justify-center">
        <!-- Minus icon -->
        <svg width="8" height="8" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" class="text-secondary">
          <path d="M5 12h14"/>
        </svg>
      </div>
      <div class="w-3 h-3 bg-main rounded-full flex items-center justify-center">
        <!-- Expand icon (rotated -45deg) -->
        <svg width="8" height="8" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" class="text-secondary" style="transform: rotate(-45deg);">
          <path d="m7 15 5 5 5-5"/>
          <path d="m7 9 5-5 5 5"/>
        </svg>
      </div>
    </div>
    
    <!-- Windows style - controls on right (will be toggled by script) -->
    <div class="windows-controls flex w-full">
      <div class="flex-1"></div>
      <div class="flex">
        <div class="w-8 h-8 bg-secondary border-l border-main flex items-center justify-center">
          <!-- Minus icon -->
          <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3.5" class="text-main">
            <path d="M5 12h14"></path>
          </svg>
        </div>
        <div class="w-8 h-8 bg-secondary border-l border-main flex items-center justify-center">
          <!-- Square icon -->
          <svg width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3.5" class="text-main">
            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
          </svg>
        </div>
        <div class="w-8 h-8 bg-secondary border-l border-main flex items-center justify-center">
          <!-- X icon -->
          <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3.5" class="text-main">
            <path d="M18 6L6 18M6 6l12 12"></path>
          </svg>
        </div>
      </div>
    </div>
  </div>

  <!-- Window content -->
  <div class="h-[calc(100%-2rem)] border-t-2 border-main">
    <slot />
  </div>
</div>

<script>
  import { debugLogger } from '@/utils/debug-logger';

  // OS Detection and Window Style Management
  class WindowStyleManager {
    private detectOS(): 'macos' | 'windows' {
      if (typeof window === 'undefined') return 'windows';
      
      const userAgent = window.navigator.userAgent;
      if (/Mac|iPhone|iPad|iPod/.test(userAgent)) {
        return 'macos';
      }
      return 'windows';
    }

    private updateWindowStyles() {
      const headers = document.querySelectorAll('.window-header');
      
      headers.forEach((header) => {
        const headerElement = header as HTMLElement;
        const forceOS = headerElement.dataset.forceOs;
        
        // Check localStorage first for debug override
        let windowStyle: 'macos' | 'windows';
        const debugOS = localStorage.getItem('debug-os');
        
        if (debugOS && (debugOS === 'macos' || debugOS === 'windows')) {
          windowStyle = debugOS as 'macos' | 'windows';
        } else if (forceOS && (forceOS === 'macos' || forceOS === 'windows')) {
          windowStyle = forceOS as 'macos' | 'windows';
        } else {
          windowStyle = this.detectOS();
        }

        const macosControls = header.querySelector('.macos-controls');
        const windowsControls = header.querySelector('.windows-controls');

        if (windowStyle === 'macos') {
          macosControls?.classList.remove('hidden');
          macosControls?.classList.add('flex');
          windowsControls?.classList.add('hidden');
          windowsControls?.classList.remove('flex');
        } else {
          macosControls?.classList.add('hidden');
          macosControls?.classList.remove('flex');
          windowsControls?.classList.remove('hidden');
          windowsControls?.classList.add('flex');
        }
      });
    }

    public init() {
      this.updateWindowStyles();

      // Listen for localStorage changes
      const handleStorageChange = () => {
        this.updateWindowStyles();
      };

      window.addEventListener('storage', handleStorageChange);

      // Also listen for custom events that might change the OS setting
      window.addEventListener('os-style-changed', () => {
        this.updateWindowStyles();
      });
    }
  }

  // Initialize window style management
  function initWindowStyles() {
    const manager = new WindowStyleManager();
    manager.init();
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initWindowStyles);
  } else {
    initWindowStyles();
  }

  // Handle Astro page transitions
  document.addEventListener('astro:page-load', initWindowStyles);
</script>