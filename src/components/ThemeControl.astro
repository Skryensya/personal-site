---
import { themes } from '../data/themes.js';
---

<div class="theme-control relative inline-block">
  <button class="theme-control-trigger w-8 h-8 cursor-pointer p-0 bg-secondary border border-main text-main hover:bg-main hover:text-secondary" aria-label="Theme settings">
    <div class="theme-preview w-full h-full flex">
      <div class="theme-half flex-1 bg-secondary"></div>
      <div class="theme-half flex-1 bg-main"></div>
    </div>
  </button>
  
  <div class="theme-control-dropdown absolute top-[calc(100%+0.5rem)] right-0 bg-secondary border border-main p-3 opacity-0 invisible  duration-200 ease-in-out z-50 min-w-64">
    <div class="theme-section mb-3">
      <div class="section-label text-main mono text-xs font-bold mb-2">MODE</div>
      <div class="mode-dropdown relative">
        <button class="mode-dropdown-trigger flex items-center justify-between w-full p-2 border border-main bg-secondary text-main text-xs font-semibold hover:bg-main hover:text-secondary cursor-pointer">
          <div class="selected-mode flex items-center gap-2">
            <div class="mode-preview w-3 h-3" style="background: #ffffff; border: 1px solid #000000;"></div>
            <span class="mode-name">LIGHT</span>
          </div>
          <div class="dropdown-arrow text-xs">â–¼</div>
        </button>
        <div class="mode-dropdown-options absolute top-full left-0 w-full bg-secondary border border-main border-t-0 opacity-0 invisible transition-all duration-200 ease-in-out z-50">
          <button class="mode-option flex items-center gap-2 p-2 border-transparent bg-transparent cursor-pointer text-main text-xs font-semibold text-left w-full hover:bg-main hover:text-secondary" data-mode="light">
            <div class="mode-preview w-3 h-3" style="background: #ffffff; border: 1px solid #000000;"></div>
            <span>LIGHT</span>
          </button>
          <button class="mode-option flex items-center gap-2 p-2 border-transparent bg-transparent cursor-pointer text-main text-xs font-semibold text-left w-full hover:bg-main hover:text-secondary" data-mode="dark">
            <div class="mode-preview w-3 h-3" style="background: #000000; border: 1px solid #ffffff;"></div>
            <span>DARK</span>
          </button>
          <button class="mode-option flex items-center gap-2 p-2 border-transparent bg-transparent cursor-pointer text-main text-xs font-semibold text-left w-full hover:bg-main hover:text-secondary" data-mode="system">
            <div class="mode-preview w-3 h-3" style="background: linear-gradient(45deg, #ffffff 50%, #000000 50%); border: 1px solid #666666;"></div>
            <span>SYSTEM</span>
          </button>
        </div>
      </div>
    </div>
    
    <div class="theme-section">
      <div class="section-label text-main mono text-xs font-bold mb-2">THEME</div>
      <div class="color-options grid grid-cols-3 gap-2">
        {themes.map(theme => (
          <button 
            class="color-option flex items-center gap-2 p-2 border-transparent bg-transparent cursor-pointer text-main text-[10px] font-semibold text-left w-full hover:bg-main hover:text-secondary"
            data-theme={theme.id}
            title={theme.description}
          >
            <div 
              class="color-sample w-4 h-4 relative overflow-hidden flex-shrink-0"
              style={`background: linear-gradient(135deg, ${theme.colorful} 50%, ${theme.contrasty} 50%); border: 1px solid ${theme.contrasty}`}
            ></div>
            <div class="flex flex-col items-start flex-1">
              <span class="font-bold">{theme.name}</span>
              <span class="text-[8px] opacity-70">{theme.description}</span>
            </div>
          </button>
        ))}
      </div>
    </div>
    
    <!-- Keyboard shortcuts footer -->
    <div class="theme-footer border-t border-main mt-3 pt-3">
      <div class="shortcuts text-main text-[10px] font-mono space-y-1">
        <div class="shortcut-row flex justify-between items-center">
          <span class="shortcut-desc">Next theme</span>
          <kbd class="shortcut-key px-1 py-0.5 bg-main text-secondary text-[8px] font-bold">N</kbd>
        </div>
        <div class="shortcut-row flex justify-between items-center">
          <span class="shortcut-desc">Previous theme</span>
          <kbd class="shortcut-key px-1 py-0.5 bg-main text-secondary text-[8px] font-bold">P</kbd>
        </div>
        <div class="shortcut-row flex justify-between items-center">
          <span class="shortcut-desc">Toggle mode</span>
          <kbd class="shortcut-key px-1 py-0.5 bg-main text-secondary text-[8px] font-bold">M</kbd>
        </div>
        <div class="shortcut-row flex justify-between items-center">
          <span class="shortcut-desc">Close</span>
          <kbd class="shortcut-key px-1 py-0.5 bg-main text-secondary text-[8px] font-bold">ESC</kbd>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .theme-control.open .theme-control-dropdown {
    opacity: 1;
    visibility: visible;
  }

  .theme-control-trigger:hover .theme-half:first-child {
    background: var(--color-main) !important;
  }

  .theme-control-trigger:hover .theme-half:last-child {
    background: var(--color-secondary) !important;
  }

  .theme-option.active,
  .color-option.active,
  .mode-option.active {
    background: var(--color-main) !important;
    color: var(--color-secondary) !important;
  }

  .mode-dropdown.open .mode-dropdown-options {
    opacity: 1;
    visibility: visible;
  }

  .mode-dropdown.open .dropdown-arrow {
    transform: rotate(180deg);
  }

  .dropdown-arrow {
    transition: transform 0.2s ease-in-out;
  }
</style>

<script>
  import { applyTheme, loadThemeFromStorage, themes } from '../data/themes.js';

  document.addEventListener('astro:page-load', () => {
    const themeControl = document.querySelector('.theme-control');
    const trigger = document.querySelector('.theme-control-trigger');
    const dropdown = document.querySelector('.theme-control-dropdown');
    const modeDropdown = document.querySelector('.mode-dropdown');
    const modeDropdownTrigger = document.querySelector('.mode-dropdown-trigger');
    const modeOptions = document.querySelectorAll('.mode-option');
    const themeOptions = document.querySelectorAll('.color-option');

    if (!themeControl || !trigger || !dropdown) return;

    // Function to get system preference
    function getSystemPreference() {
      return window.matchMedia('(prefers-color-scheme: dark)').matches;
    }

    // Function to apply theme based on mode
    function applyThemeForMode(mode, themeId) {
      let isDark;
      if (mode === 'system') {
        isDark = getSystemPreference();
      } else {
        isDark = mode === 'dark';
      }
      applyTheme(themeId, isDark, mode);
      return isDark;
    }

    // Load saved settings with validation
    let { themeId: savedTheme, isDark, mode: savedMode } = loadThemeFromStorage();
    if (!savedMode) {
      savedMode = isDark ? 'dark' : 'light';
    }
    
    // Apply initial theme
    const actualDark = applyThemeForMode(savedMode, savedTheme);
    updateActiveOptions(savedMode, savedTheme);
    updateModeDisplay(savedMode);

    // Listen for system preference changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
      if (savedMode === 'system') {
        applyThemeForMode('system', savedTheme);
      }
    });

    // Toggle main dropdown
    trigger.addEventListener('click', (e) => {
      e.stopPropagation();
      themeControl.classList.toggle('open');
      // Close mode dropdown if open
      if (modeDropdown) {
        modeDropdown.classList.remove('open');
      }
    });

    // Toggle mode dropdown
    if (modeDropdownTrigger && modeDropdown) {
      modeDropdownTrigger.addEventListener('click', (e) => {
        e.stopPropagation();
        modeDropdown.classList.toggle('open');
      });
    }

    // Function to update mode dropdown display
    function updateModeDisplay(mode) {
      const modePreview = document.querySelector('.selected-mode .mode-preview');
      const modeName = document.querySelector('.selected-mode .mode-name');
      
      if (modePreview && modeName) {
        switch(mode) {
          case 'light':
            modePreview.style.background = '#ffffff';
            modePreview.style.border = '1px solid #000000';
            modeName.textContent = 'LIGHT';
            break;
          case 'dark':
            modePreview.style.background = '#000000';
            modePreview.style.border = '1px solid #ffffff';
            modeName.textContent = 'DARK';
            break;
          case 'system':
            modePreview.style.background = 'linear-gradient(45deg, #ffffff 50%, #000000 50%)';
            modePreview.style.border = '1px solid #666666';
            modeName.textContent = 'SYSTEM';
            break;
        }
      }
    }

    // Handle mode selection
    modeOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        e.stopPropagation();
        const mode = option.dataset.mode;
        if (mode) {
          savedMode = mode;
          applyThemeForMode(mode, savedTheme);
          updateActiveOptions(mode, savedTheme);
          updateModeDisplay(mode);
          // Close mode dropdown
          if (modeDropdown) {
            modeDropdown.classList.remove('open');
          }
        }
      });
    });

    // Handle theme selection
    themeOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        e.stopPropagation();
        const themeId = option.dataset.theme;
        if (themeId) {
          console.log('Theme selected:', themeId);
          savedTheme = themeId;
          applyThemeForMode(savedMode, themeId);
          updateActiveOptions(savedMode, themeId);
        }
      });
    });


    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!themeControl.contains(e.target)) {
        themeControl.classList.remove('open');
        if (modeDropdown) {
          modeDropdown.classList.remove('open');
        }
      }
    });

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      // Only handle shortcuts when theme control is open
      const isThemeControlOpen = themeControl.classList.contains('open');
      
      if (e.key === 'Escape') {
        themeControl.classList.remove('open');
        if (modeDropdown) {
          modeDropdown.classList.remove('open');
        }
        return;
      }
      
      // Handle theme shortcuts only when dropdown is open
      if (!isThemeControlOpen) return;
      
      switch(e.key.toLowerCase()) {
        case 'n': // Next theme
          e.preventDefault();
          cycleTheme(1);
          break;
        case 'p': // Previous theme
          e.preventDefault();
          cycleTheme(-1);
          break;
        case 'm': // Toggle mode
          e.preventDefault();
          toggleMode();
          break;
      }
    });

    // Function to cycle through themes
    function cycleTheme(direction) {
      const currentIndex = themes.findIndex(theme => theme.id === savedTheme);
      let newIndex = currentIndex + direction;
      
      // Wrap around
      if (newIndex >= themes.length) newIndex = 0;
      if (newIndex < 0) newIndex = themes.length - 1;
      
      const newTheme = themes[newIndex];
      savedTheme = newTheme.id;
      applyThemeForMode(savedMode, newTheme.id);
      updateActiveOptions(savedMode, newTheme.id);
    }

    // Function to toggle mode
    function toggleMode() {
      const modes = ['light', 'dark', 'system'];
      const currentIndex = modes.indexOf(savedMode);
      const newIndex = (currentIndex + 1) % modes.length;
      
      savedMode = modes[newIndex];
      applyThemeForMode(savedMode, savedTheme);
      updateActiveOptions(savedMode, savedTheme);
      updateModeDisplay(savedMode);
      
      // Close mode dropdown if open
      if (modeDropdown) {
        modeDropdown.classList.remove('open');
      }
    }

    function updateActiveOptions(mode, themeId) {
      modeOptions.forEach(option => {
        option.classList.toggle('active', option.dataset.mode === mode);
      });
      
      themeOptions.forEach(option => {
        option.classList.toggle('active', option.dataset.theme === themeId);
      });
    }

  });
</script>