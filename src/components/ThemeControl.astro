---
import { themes } from '../data/themes.js';
---

<div class="theme-control relative inline-block">
  <button class="theme-control-trigger w-8 h-8 cursor-pointer p-0 bg-secondary border border-main text-main hover:bg-main hover:text-secondary" aria-label="Theme settings">
    <div class="theme-preview w-full h-full flex">
      <div class="theme-half flex-1 bg-secondary"></div>
      <div class="theme-half flex-1 bg-main"></div>
    </div>
  </button>
  
  <div class="theme-control-dropdown absolute top-[calc(100%+0.5rem)] right-0 bg-secondary border border-main p-3 opacity-0 invisible transition-all duration-200 ease-in-out z-50 min-w-64">
    <div class="theme-section mb-3">
      <div class="section-label text-main mono text-xs font-bold mb-2">MODE</div>
      <div class="theme-options">
        <button class="theme-option flex items-center gap-2 p-2 border-transparent bg-transparent cursor-pointer text-main text-xs font-semibold text-left w-full hover:bg-main hover:text-secondary" data-mode="light">
          <div class="mode-preview w-3 h-3 bg-white border border-black"></div>
          <span>LIGHT</span>
        </button>
        <button class="theme-option flex items-center gap-2 p-2 border-transparent bg-transparent cursor-pointer text-main text-xs font-semibold text-left w-full hover:bg-main hover:text-secondary" data-mode="dark">
          <div class="mode-preview w-3 h-3 bg-black border border-white"></div>
          <span>DARK</span>
        </button>
      </div>
    </div>
    
    <div class="theme-section">
      <div class="section-label text-main mono text-xs font-bold mb-2">THEME</div>
      <div class="color-options grid grid-cols-2 gap-2">
        {themes.map(theme => (
          <button 
            class="color-option flex items-center gap-2 p-2 border-transparent bg-transparent cursor-pointer text-main text-[10px] font-semibold text-left w-full hover:bg-main hover:text-secondary"
            data-theme={theme.id}
            title={theme.description}
          >
            <div 
              class="color-sample w-4 h-4 border border-main relative overflow-hidden flex-shrink-0"
              style={theme.id === 'custom' ? '' : `background: linear-gradient(135deg, ${theme.colorful} 50%, ${theme.contrasty} 50%)`}
              data-custom-preview={theme.id === 'custom' ? 'true' : 'false'}
            >
              {theme.id === 'custom' && (
                <div class="w-full h-full flex items-center justify-center text-[8px] font-bold">âš™</div>
              )}
            </div>
            <div class="flex flex-col items-start">
              <span class="font-bold">{theme.name}</span>
              <span class="text-[8px] opacity-70">{theme.description}</span>
            </div>
          </button>
        ))}
      </div>
    </div>
  </div>
</div>

<style>
  .theme-control.open .theme-control-dropdown {
    opacity: 1;
    visibility: visible;
  }

  .theme-control-trigger:hover .theme-half:first-child {
    background: var(--color-main) !important;
  }

  .theme-control-trigger:hover .theme-half:last-child {
    background: var(--color-secondary) !important;
  }

  .theme-option.active,
  .color-option.active {
    background: var(--color-main) !important;
    color: var(--color-secondary) !important;
  }
</style>

<script>
  import { applyTheme, loadThemeFromStorage } from '../data/themes.js';

  document.addEventListener('astro:page-load', () => {
    const themeControl = document.querySelector('.theme-control');
    const trigger = document.querySelector('.theme-control-trigger');
    const dropdown = document.querySelector('.theme-control-dropdown');
    const modeOptions = document.querySelectorAll('.theme-option');
    const themeOptions = document.querySelectorAll('.color-option');

    if (!themeControl || !trigger || !dropdown) return;

    // Load saved settings with validation
    const { themeId: savedTheme, isDark, customColors } = loadThemeFromStorage();
    const savedMode = isDark ? 'dark' : 'light';
    
    // Update custom theme preview if available
    if (savedTheme === 'custom' && customColors) {
      const customPreview = document.querySelector('[data-custom-preview="true"]');
      if (customPreview) {
        customPreview.style.background = `linear-gradient(135deg, ${customColors.colorful} 50%, ${customColors.contrasty} 50%)`;
        customPreview.querySelector('div').style.display = 'none';
      }
    }
    
    updateActiveOptions(savedMode, savedTheme);

    // Toggle dropdown
    trigger.addEventListener('click', (e) => {
      e.stopPropagation();
      themeControl.classList.toggle('open');
    });

    // Handle mode selection
    modeOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        e.stopPropagation();
        const mode = option.dataset.mode;
        if (mode) {
          applyTheme(savedTheme, mode === 'dark');
          updateActiveOptions(mode, savedTheme);
        }
      });
    });

    // Handle theme selection
    themeOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        e.stopPropagation();
        const themeId = option.dataset.theme;
        if (themeId) {
          if (themeId === 'custom') {
            // Open color picker for custom theme
            if (window.openColorPicker) {
              window.openColorPicker(option);
            }
          } else {
            applyTheme(themeId, savedMode === 'dark');
            updateActiveOptions(savedMode, themeId);
          }
        }
      });
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!themeControl.contains(e.target)) {
        themeControl.classList.remove('open');
      }
    });

    // Close dropdown on escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        themeControl.classList.remove('open');
      }
    });

    function updateActiveOptions(mode, themeId) {
      modeOptions.forEach(option => {
        option.classList.toggle('active', option.dataset.mode === mode);
      });
      
      themeOptions.forEach(option => {
        option.classList.toggle('active', option.dataset.theme === themeId);
      });
    }
  });
</script>