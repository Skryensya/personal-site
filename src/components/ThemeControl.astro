---
---

<div class="theme-control">
  <button class="theme-control-trigger" aria-label="Theme settings">
    <div class="theme-preview">
      <div class="theme-half theme-half-light"></div>
      <div class="theme-half theme-half-dark"></div>
    </div>
  </button>
  
  <div class="theme-control-dropdown">
    <div class="theme-section">
      <div class="section-label">MODE</div>
      <div class="theme-options">
        <button class="theme-option" data-mode="light">
          <div class="mode-preview light-mode"></div>
          <span>LIGHT</span>
        </button>
        <button class="theme-option" data-mode="dark">
          <div class="mode-preview dark-mode"></div>
          <span>DARK</span>
        </button>
      </div>
    </div>
    
    <div class="theme-section">
      <div class="section-label">COLOR</div>
      <div class="color-options">
        <button class="color-option" data-scheme="classic">
          <div class="color-sample classic"></div>
          <span>CLASSIC</span>
        </button>
        
        <button class="color-option" data-scheme="terminal">
          <div class="color-sample terminal"></div>
          <span>TERMINAL</span>
        </button>
        
        <button class="color-option" data-scheme="blue">
          <div class="color-sample blue"></div>
          <span>BLUE</span>
        </button>
        
        <button class="color-option" data-scheme="red">
          <div class="color-sample red"></div>
          <span>RED</span>
        </button>
        
        <button class="color-option" data-scheme="orange">
          <div class="color-sample orange"></div>
          <span>ORANGE</span>
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .theme-control {
    position: relative;
    display: inline-block;
  }

  .theme-control-trigger {
    width: 2rem;
    height: 2rem;
    border: 1px solid rgb(var(--color-border-main));
    background: rgb(var(--color-bg-main));
    cursor: pointer;
    padding: 0;
    pointer-events: auto;
  }

  .theme-control-trigger:hover {
    background: rgb(var(--color-text-main));
  }

  .theme-preview {
    width: 100%;
    height: 100%;
    display: flex;
  }

  .theme-half {
    flex: 1;
  }

  .theme-half-light {
    background: rgb(var(--color-bg-main));
  }

  .theme-half-dark {
    background: rgb(var(--color-text-main));
  }

  .theme-control-trigger:hover .theme-half-light {
    background: rgb(var(--color-text-main));
  }

  .theme-control-trigger:hover .theme-half-dark {
    background: rgb(var(--color-bg-main));
  }

  .theme-control-dropdown {
    position: absolute;
    top: calc(100% + 0.5rem);
    right: 0;
    background: rgb(var(--color-bg-main));
    border: 1px solid rgb(var(--color-border-main));
    padding: 0.5rem;
    opacity: 0;
    visibility: hidden;
    transition: all 0.2s ease;
    z-index: 50;
    min-width: 8rem;
  }

  .theme-control.open .theme-control-dropdown {
    opacity: 1;
    visibility: visible;
  }

  .theme-section {
    margin-bottom: 0.75rem;
  }

  .theme-section:last-child {
    margin-bottom: 0;
  }

  .section-label {
    font-size: 0.65rem;
    font-weight: 700;
    color: rgb(var(--color-text-main));
    margin-bottom: 0.375rem;
    font-family: 'SF Mono', 'Monaco', 'Consolas', monospace;
  }

  .theme-options,
  .color-options {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .theme-option,
  .color-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.375rem;
    border: 1px solid transparent;
    background: transparent;
    cursor: pointer;
    color: rgb(var(--color-text-main));
    font-size: 0.7rem;
    font-weight: 600;
    text-align: left;
    width: 100%;
  }

  .theme-option:hover,
  .color-option:hover {
    background: rgb(var(--color-text-main));
    color: rgb(var(--color-bg-main));
  }

  .theme-option.active,
  .color-option.active {
    background: rgb(var(--color-text-main));
    color: rgb(var(--color-bg-main));
  }

  .mode-preview,
  .color-sample {
    width: 0.75rem;
    height: 0.75rem;
    flex-shrink: 0;
  }

  /* Mode previews */
  .light-mode {
    background: rgb(250, 250, 250);
    border: 1px solid rgb(30, 30, 30);
  }

  .dark-mode {
    background: rgb(30, 30, 30);
    border: 1px solid rgb(250, 250, 250);
  }

  /* Color samples */
  .color-sample.classic {
    background: linear-gradient(45deg, rgb(30, 30, 30) 50%, rgb(250, 250, 250) 50%);
  }

  .color-sample.terminal {
    background: linear-gradient(45deg, rgb(15, 23, 42) 50%, rgb(34, 197, 94) 50%);
  }

  .color-sample.blue {
    background: linear-gradient(45deg, rgb(248, 250, 252) 50%, rgb(59, 130, 246) 50%);
  }

  .color-sample.red {
    background: linear-gradient(45deg, rgb(254, 249, 249) 50%, rgb(239, 68, 68) 50%);
  }

  .color-sample.orange {
    background: linear-gradient(45deg, rgb(255, 251, 235) 50%, rgb(249, 115, 22) 50%);
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const themeControl = document.querySelector('.theme-control');
    const trigger = document.querySelector('.theme-control-trigger');
    const dropdown = document.querySelector('.theme-control-dropdown');
    const modeOptions = document.querySelectorAll('.theme-option');
    const colorOptions = document.querySelectorAll('.color-option');

    if (!themeControl || !trigger || !dropdown) return;

    // Load saved settings
    const savedTheme = localStorage.getItem('theme') || 'light';
    const savedScheme = localStorage.getItem('color-scheme') || 'classic';
    
    applyTheme(savedTheme);
    applyColorScheme(savedScheme);
    updateActiveOptions(savedTheme, savedScheme);

    // Toggle dropdown
    trigger.addEventListener('click', (e) => {
      e.stopPropagation();
      themeControl.classList.toggle('open');
    });

    // Handle mode selection
    modeOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        e.stopPropagation();
        const mode = option.dataset.mode;
        if (mode) {
          applyTheme(mode);
          localStorage.setItem('theme', mode);
          updateActiveOptions(mode, savedScheme);
        }
      });
    });

    // Handle color selection
    colorOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        e.stopPropagation();
        const scheme = option.dataset.scheme;
        if (scheme) {
          applyColorScheme(scheme);
          localStorage.setItem('color-scheme', scheme);
          updateActiveOptions(savedTheme, scheme);
        }
      });
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!themeControl.contains(e.target)) {
        themeControl.classList.remove('open');
      }
    });

    // Close dropdown on escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        themeControl.classList.remove('open');
      }
    });

    function applyTheme(theme) {
      document.documentElement.classList.toggle('dark', theme === 'dark');
    }

    function applyColorScheme(scheme) {
      document.documentElement.setAttribute('data-color-scheme', scheme);
    }

    function updateActiveOptions(theme, scheme) {
      modeOptions.forEach(option => {
        option.classList.toggle('active', option.dataset.mode === theme);
      });
      
      colorOptions.forEach(option => {
        option.classList.toggle('active', option.dataset.scheme === scheme);
      });
    }
  });
</script>