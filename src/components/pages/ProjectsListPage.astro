---
import type { Page } from 'astro';
import { type CollectionEntry } from 'astro:content';
import Layout from '@/layouts/Layout.astro';
import { getSlugFromId } from '@/utils/content-utils';
import { getTranslations } from '@/i18n/utils';
import { defaultLang, type Language } from '@/i18n/ui';
import FolderStack from '@/components/sections/FolderStack.astro';
import ProjectsWithSearch from '@/components/ProjectsWithSearch';

interface Props {
    lang?: Language;
    page?: Page<CollectionEntry<'projects'>>;
    projects?: CollectionEntry<'projects'>[];
    useSearch?: boolean;
}

const {
    lang = defaultLang,
    page,
    projects,
    useSearch = false
} = Astro.props;

const t = getTranslations(lang);

// Get the correct projects path for each language
const getProjectsPath = (language: Language) => {
    switch (language) {
        case 'en':
            return '/en/projects';
        case 'no':
            return '/no/prosjekter';
        default:
            return '/projects';
    }
};

const projectsPath = getProjectsPath(lang);

// Use either paginated projects or direct projects array
const projectsList = page ? page.data : projects || [];
---

<Layout
    title={t('nav.projects')}
    description={t('nav.projects')}
    showHeader={true}
    headerTitle={t('nav.projects')}
    headerSubtitle={t('nav.projects')}
    lang={lang}
>
    {useSearch && projects ? (
        <!-- Search-based view -->
        <div class="space-y-8">
            <div class="flex items-center justify-between">
                <h1 class="text-2xl leading-tight font-mono sm:text-4xl">{t('nav.projects')}</h1>
                <div class="text-sm font-mono opacity-60">
                    {projects.length} {projects.length === 1 ?
                        (lang === 'en' ? 'project' : lang === 'no' ? 'prosjekt' : 'proyecto') :
                        (lang === 'en' ? 'projects' : lang === 'no' ? 'prosjekter' : 'proyectos')
                    }
                </div>
            </div>

            <ProjectsWithSearch
                initialProjects={projects}
                language={lang}
                client:load
            />
        </div>
    ) : (
        <!-- Traditional paginated view -->
        <>
            <h1 class="mb-12 text-2xl leading-tight font-mono sm:mb-16 sm:text-4xl">{t('nav.projects')}</h1>
            <div class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
                {projectsList.map((project) => (
                    <article class="border border-main bg-secondary p-4 hover:bg-main hover:text-secondary group">
                        <div class="mb-4">
                            <h2 class="text-xl font-mono font-bold mb-2 group-hover:text-secondary">
                                <a href={`${projectsPath}/${getSlugFromId(project.id)}`} class="no-underline">
                                    {project.data.name}
                                </a>
                            </h2>
                            {project.data.hook && (
                                <p class="text-sm leading-relaxed opacity-80 group-hover:text-secondary">
                                    {project.data.hook}
                                </p>
                            )}
                        </div>
                        {project.data.tags && project.data.tags.length > 0 && (
                            <div class="flex flex-wrap gap-1 mb-3">
                                {project.data.tags.slice(0, 4).map((tag) => (
                                    <span class="text-xs px-2 py-1 border border-main font-mono bg-main text-secondary group-hover:bg-secondary group-hover:text-main group-hover:border-secondary">
                                        {tag}
                                    </span>
                                ))}
                                {project.data.tags.length > 4 && (
                                    <span class="text-xs px-2 py-1 border border-main font-mono opacity-70 group-hover:text-secondary">
                                        +{project.data.tags.length - 4}
                                    </span>
                                )}
                            </div>
                        )}
                        <div class="text-xs font-mono opacity-70 group-hover:text-secondary">
                            {new Date(project.data.publishDate).toLocaleDateString(
                                lang === 'en' ? 'en-US' : lang === 'no' ? 'no-NO' : 'es-ES'
                            )}
                        </div>
                    </article>
                ))}
            </div>

            {page && (page.url.prev || page.url.next) ? (
                <nav class="flex justify-between items-center my-8 sm:my-12">
                    {page.url.prev ? (
                        <a href={page.url.prev} class="px-4 py-2 border border-main bg-secondary hover:bg-main hover:text-secondary font-mono text-sm">
                            ← {t('pagination.previous') || (lang === 'en' ? 'Previous' : lang === 'no' ? 'Forrige' : 'Anterior')}
                        </a>
                    ) : (
                        <div></div>
                    )}

                    <span class="font-mono text-sm">
                        {t('pagination.page') || (lang === 'en' ? 'Page' : lang === 'no' ? 'Side' : 'Página')} {page.currentPage} {t('pagination.of') || (lang === 'en' ? 'of' : lang === 'no' ? 'av' : 'de')} {page.lastPage}
                    </span>

                    {page.url.next ? (
                        <a href={page.url.next} class="px-4 py-2 border border-main bg-secondary hover:bg-main hover:text-secondary font-mono text-sm">
                            {t('pagination.next') || (lang === 'en' ? 'Next' : lang === 'no' ? 'Neste' : 'Siguiente')} →
                        </a>
                    ) : (
                        <div></div>
                    )}
                </nav>
            ) : null}

            <FolderStack lang={lang} />
        </>
    )}
</Layout>