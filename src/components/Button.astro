---
export interface Props {
  href?: string;
  variant?: 'filled' | 'outline';
  size?: 'small' | 'medium' | 'large';
  elevated?: boolean;
  class?: string;
}

const { 
  href, 
  variant = 'filled', 
  size = 'medium',
  elevated = true,
  class: className = ''
} = Astro.props;

const Tag = href ? 'a' : 'button';
---

<div class={`btn-group relative isolate ${elevated ? 'btn-group--elevated' : 'btn-group--flat'}`}>
  <!-- Moving button -->
  <Tag 
    class={`btn btn--${variant} btn--${size} ${elevated ? 'btn--elevated' : 'btn--flat'} ${className}`}
    href={href}
  >
    <slot />
  </Tag>
  
  {elevated && (
    <!-- Fixed shadow with same content (invisible) -->
    <div class={`btn-shadow btn-shadow--${size}`} aria-hidden="true">
      <span class="invisible">
        <slot />
      </span>
    </div>
  )}
</div>

<style>
  .btn-group {
    @apply relative inline-block w-fit;
  }

  .btn {
    @apply font-bold uppercase tracking-wide cursor-pointer border-2 transition-all duration-100 ease-in-out whitespace-nowrap;
    text-decoration: none;
    font-family: inherit;
    z-index: 2;
  }

  /* Elevated buttons */
  .btn--elevated {
    @apply absolute;
    top: -12px;
    left: -12px;
  }

  /* Flat buttons */
  .btn--flat {
    @apply relative;
    top: 0;
    left: 0;
  }

  .btn-shadow {
    @apply relative border whitespace-nowrap pointer-events-none font-bold uppercase tracking-wide;
    background-image: repeating-linear-gradient(
      315deg,
      var(--color-main) 0,
      var(--color-main) 1px,
      transparent 0,
      transparent 50%
    );
    background-size: 8px 8px;
    border-color: var(--color-main);
    font-family: inherit;
    z-index: 1;
    /* Shadow has exact same dimensions as button with same text content */
  }

  /* Hover and Active states - only for elevated buttons */
  .btn-group--elevated:active .btn--elevated {
    top: 0;
    left: 0;
  }

  /* Flat buttons don't have special active states */
  .btn-group--flat .btn--flat:active {
    transform: scale(0.98);
  }

  /* Button Variants using simplified colors */
  .btn--filled {
    background: var(--color-main);
    color: var(--color-secondary);
    border-color: var(--color-main);
  }

  .btn--outline {
    background: transparent;
    color: var(--color-main);
    border-color: var(--color-main);
  }

  .btn--outline:hover {
    background: var(--color-main);
    color: var(--color-secondary);
  }

  /* Button Sizes */
  .btn--small {
    @apply px-3 py-2 text-xs;
  }

  .btn--medium {
    @apply px-6 py-3 text-sm;
  }

  .btn--large {
    @apply px-8 py-4 text-base;
  }

  /* Shadow Sizes (exact match to button dimensions) */
  .btn-shadow--small {
    @apply px-3 py-2 text-xs;
  }

  .btn-shadow--medium {
    @apply px-6 py-3 text-sm;
  }

  .btn-shadow--large {
    @apply px-8 py-4 text-base;
  }
</style>

