---
import { cn } from '@/lib/utils';

export interface Props {
  href?: string;
  filled?: boolean;
  size?: 'sm' | 'md' | 'lg';
  elevated?: boolean;
  class?: string;
  style?: string;
}

const {
  href,
  filled = false,
  size: rawSize = 'md',
  elevated = false,
  class: className,
  style,
} = Astro.props;

const size = ['sm', 'md', 'lg'].includes(rawSize) ? rawSize : 'md';
const variant = filled ? 'filled' : 'outline';

const Tag = href ? 'a' : 'button';

const sizeClasses = {
  sm: 'px-3 text-xs h-8',
  md: 'px-6 text-sm h-12',
  lg: 'px-8 text-base h-16',
};

const buttonClasses = cn(
  'font-bold uppercase tracking-wide cursor-pointer border-double border-2 whitespace-nowrap flex items-center justify-center',
  'no-underline',
  {
    'absolute -top-3 -left-3 active:top-0 active:left-0 z-30 border-double border-2': elevated,
    'relative top-0 left-0 z-20': !elevated,
    'bg-main text-secondary border-main shadow-[inset_0_0_0_2px_var(--color-secondary)]': variant === 'filled',
    'bg-secondary text-main border-main shadow-[inset_0_0_0_2px_var(--color-secondary)] hover:bg-main hover:text-secondary cursor-pointer': variant === 'outline',
  },
  sizeClasses[size],
  className
);

const shadowClasses = cn(
  'relative border-2 whitespace-nowrap pointer-events-none font-bold uppercase tracking-wide flex items-center justify-center',
  'bg-secondary bg-opacity-60 z-10',
  sizeClasses[size]
);
---

<div class={cn('relative inline-block w-fit', { 
  'isolate z-30': elevated,
  'z-20': !elevated 
})}>
  <Tag class={cn(buttonClasses, { 'button-with-sound': elevated })} href={href} style={style}>
    <slot />
  </Tag>

  {elevated && (
    <div
      class={shadowClasses}
      style="border-color: color-mix(in srgb, var(--color-main) 60%, transparent); background-image: repeating-linear-gradient(315deg, color-mix(in srgb, var(--color-main) 60%, transparent) 0, color-mix(in srgb, var(--color-main) 60%, transparent) 1px, transparent 0, transparent 50%); background-size: 8px 8px;"
      aria-hidden="true"
    >
      <span class="invisible">
        <slot />
      </span>
    </div>
  )}
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    // Create audio element for button click sound
    const clickAudio = new Audio('/buttonPress.wav');
    clickAudio.volume = 0.3;
    clickAudio.preload = 'auto';
    
    // Play click sound
    function playClickSound() {
      try {
        clickAudio.currentTime = 0; // Reset to start
        clickAudio.play().catch(() => {
          // Silently handle autoplay restrictions
        });
      } catch (error) {
        // Silently handle any audio errors
      }
    }
    
    // Add click sound to all buttons
    const buttons = document.querySelectorAll('.button-with-sound');
    buttons.forEach(button => {
      button.addEventListener('click', () => {
        playClickSound();
      });
    });
  });
</script>

