---
import { getTranslations } from '@/i18n/utils';
import { defaultLang, type Language } from '@/i18n/ui';

interface Props {
    contentId?: string;
    className?: string;
    lang?: Language;
}

const { 
    contentId = 'main-content', 
    className = '',
    lang = defaultLang 
} = Astro.props;

const t = getTranslations(lang);
---

<nav class={`toc-nav ${className}`}>
    <div class="mb-6">
        <h2 class="text-xs font-mono font-medium text-main uppercase tracking-wide">{t('sidebar.toc')}</h2>
    </div>
    <div class="relative max-h-[50vh] overflow-y-auto scrollbar-custom">
        <!-- Progress indicator background -->
        <div class="absolute left-0 top-0 bottom-0 w-0.5 bg-main opacity-30" id="progress-bg"></div>
        <!-- Active progress indicator - animated shadow -->
        <div class="absolute left-3 right-0 bg-main transition-all duration-300 ease-out" id="progress-indicator" style="height: 0px; top: 0px;"></div>
        <!-- TOC list with modern styling -->
        <ul id="toc-list" class="relative space-y-1 pl-3 pr-2">
            <!-- TOC will be generated by JavaScript -->
        </ul>
    </div>
</nav>

<style>
    .scrollbar-custom {
        scrollbar-width: thin;
        scrollbar-color: var(--color-main) transparent;
    }
    
    .scrollbar-custom::-webkit-scrollbar {
        width: 8px;
    }
    
    .scrollbar-custom::-webkit-scrollbar-track {
        background: transparent;
        border-radius: 0;
    }
    
    .scrollbar-custom::-webkit-scrollbar-thumb {
        background: var(--color-main);
        border-radius: 0;
        border: 2px solid var(--color-secondary);
        background-clip: content-box;
    }
    
    .scrollbar-custom::-webkit-scrollbar-thumb:hover {
        background: var(--color-main);
        opacity: 0.8;
    }
    
    .scrollbar-custom::-webkit-scrollbar-corner {
        background: transparent;
    }
</style>

<script define:vars={{ contentId }}>
    function generateTableOfContents() {
        const tocList = document.getElementById('toc-list');
        const allHeadings = document.querySelectorAll(`#${contentId} h1, #${contentId} h2`);
        
        // Filter out the hook heading (first h1 in the header section)
        const headings = Array.from(allHeadings).filter(heading => {
            const isInHeader = heading.closest('header');
            return !isInHeader;
        });
        
        if (!tocList || !headings.length) return;
        
        // Clear existing TOC
        tocList.innerHTML = '';
        
        // Generate TOC entries for desktop only
        headings.forEach((heading, index) => {
            // Create slugified ID from heading text
            const headingText = heading.textContent || '';
            const slug = headingText
                .toLowerCase()
                .normalize('NFD')
                .replace(/[\u0300-\u036f]/g, '') // Remove accents
                .replace(/[^a-z0-9\s-]/g, '') // Remove special chars
                .trim()
                .replace(/\s+/g, '-') // Replace spaces with hyphens
                .replace(/-+/g, '-'); // Remove multiple hyphens
            
            // Ensure unique ID (add index if needed)
            let id = slug;
            if (document.getElementById(id)) {
                id = `${slug}-${index}`;
            }
            
            heading.id = id;
            
            // Create TOC entry for desktop only
            const listItem = document.createElement('li');
            const link = document.createElement('a');
            
            link.href = `#${id}`;
            link.textContent = heading.textContent || '';
            
            // Add click handler to immediately mark as active
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const targetElement = document.getElementById(id);
                if (targetElement) {
                    // Scroll to 200px above the element so it becomes active
                    const elementTop = targetElement.offsetTop;
                    const scrollPosition = Math.max(0, elementTop - 200);
                    window.scrollTo({ top: scrollPosition, behavior: 'smooth' });
                    
                    // Immediately update active state
                    setTimeout(() => updateActiveTocItem(id), 100);
                }
            });
            
            // Desktop styling based on heading level
            const level = parseInt(heading.tagName.charAt(1));
            listItem.className = 'relative group';
            
            if (level === 1 || level === 2) {
                link.className = 'block text-main border-2 border-transparent hover:border-main text-xs py-2 px-3 mx-1 font-mono font-medium transition-all duration-200 ease-out cursor-pointer';
            } else {
                link.className = 'block text-main border-2 border-transparent hover:border-main text-xs py-1.5 px-3 pl-5 mx-1 font-mono transition-all duration-200 ease-out cursor-pointer';
            }
            
            listItem.appendChild(link);
            tocList.appendChild(listItem);
        });
    }

    function updateActiveTocItem(activeId) {
        const tocLinks = document.querySelectorAll('#toc-list a');
        const progressIndicator = document.getElementById('progress-indicator');
        const tocList = document.getElementById('toc-list');
        
        // Reset all links to default style
        tocLinks.forEach(link => {
            link.classList.remove('font-bold', 'text-secondary');
            link.classList.add('text-main');
        });
        
        const activeLink = document.querySelector(`#toc-list a[href="#${activeId}"]`);
        if (activeLink && progressIndicator && tocList) {
            // Style the active link text for better contrast over shadow
            activeLink.classList.remove('text-main');
            activeLink.classList.add('font-bold', 'text-secondary', 'relative', 'z-10');
            
            // Calculate position for animated shadow indicator
            const linkRect = activeLink.getBoundingClientRect();
            const tocListRect = tocList.getBoundingClientRect();
            
            // Position relative to the TOC list container
            const relativeTop = linkRect.top - tocListRect.top;
            const linkHeight = linkRect.height;
            
            // Update animated shadow position and height
            progressIndicator.style.top = `${relativeTop}px`;
            progressIndicator.style.height = `${linkHeight}px`;
            progressIndicator.style.opacity = '1';
        }
    }

    function updateCurrentHeading() {
        const allHeadings = document.querySelectorAll(`#${contentId} h1, #${contentId} h2`);
        
        // Filter out the hook heading (first h1 in the header section)
        const headings = Array.from(allHeadings).filter(heading => {
            const isInHeader = heading.closest('header');
            return !isInHeader;
        });
        
        if (!headings.length) return;
        
        let currentHeading = null;
        let detectionY = 200; // Default 200px from top
        
        
        // Find heading that is closest to being at detection point but has passed it
        for (let i = 0; i < headings.length; i++) {
            const heading = headings[i];
            const headingRect = heading.getBoundingClientRect();
            const headingScreenY = headingRect.top;
            
            // Check if heading has passed the detection point
            if (headingScreenY <= detectionY) {
                currentHeading = heading;
            } else {
                break;
            }
        }
        
        // Update active TOC item
        if (currentHeading && currentHeading.id) {
            updateActiveTocItem(currentHeading.id);
        }
    }

    function initTableOfContents() {
        generateTableOfContents();
        updateCurrentHeading();
        
        // Update active heading on scroll
        let scrollTimeout;
        
        const handleScroll = () => {
            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(updateCurrentHeading, 10);
        };

        window.addEventListener('scroll', handleScroll, { passive: true });
        
        return () => {
            window.removeEventListener('scroll', handleScroll);
        };
    }

    // Initialize on DOM ready and page transitions
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initTableOfContents);
    } else {
        initTableOfContents();
    }
    
    document.addEventListener('astro:page-load', () => {
        setTimeout(initTableOfContents, 100);
    });
</script>