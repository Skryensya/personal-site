---
import TableOfContents from './TableOfContents.astro';
import Button from './Button.astro';

interface Props {
    contentId?: string;
    className?: string;
}

const { 
    contentId = 'main-content',
    className = '' 
} = Astro.props;
---

<aside class={`w-[250px] flex-shrink-0 hidden lg:block ${className}`} id="content-sidebar">
    <div class="sticky top-20 py-8 px-4">
        <!-- Table of Contents -->
        <TableOfContents contentId={contentId} />
        
        <!-- Audio Player Toggle -->
        <div class="mt-8 pt-6 border-t border-main border-opacity-20" id="audio-section" style="display: block;">
            <div class="mb-4">
                <h3 class="text-xs font-mono font-medium text-main opacity-50 uppercase tracking-wide">Audio</h3>
            </div>
            <Button 
                id="audio-player-toggle"
                class="w-full text-left text-xs font-mono !px-3 !py-2 !h-auto !font-normal !normal-case !tracking-normal mb-3"
                aria-pressed="false"
            >
                Escuchar
            </Button>
        </div>
        
        <!-- Reading Guide Toggle -->
        <div class="mt-6 pt-6 border-t border-main border-opacity-20">
            <div class="mb-4">
                <h3 class="text-xs font-mono font-medium text-main opacity-50 uppercase tracking-wide">Guía de lectura</h3>
            </div>
            <Button 
                id="reading-guide-toggle"
                class="w-full text-left text-xs font-mono !px-3 !py-2 !h-auto !font-normal !normal-case !tracking-normal"
                aria-pressed="false"
            >
                Activar guía
            </Button>
        </div>
    </div>
</aside>

<script>
    function initAudioPlayerToggle() {
        console.log('Initializing audio player toggle...');
        const toggleButton = document.getElementById('audio-player-toggle');
        const audioPlayer = document.getElementById('persistent-audio-player');
        
        console.log('Toggle button found:', !!toggleButton);
        console.log('Audio player found:', !!audioPlayer);
        
        if (!toggleButton) {
            console.error('Toggle button not found!');
            return;
        }
        
        let isPlayerVisible = false;
        
        const showPlayer = async () => {
            console.log('Showing player...');
            
            // First, try to set the audio in the store if it's not there
            try {
                const { audioStore } = await import('../stores/audioStore');
                const currentState = audioStore.getState();
                console.log('Current store state:', currentState);
                
                // If no audio URL in store, set it manually
                if (!currentState.audioUrl) {
                    console.log('No audio URL in store, setting manually...');
                    audioStore.setTrack('/tts/es-ecosistema-uc.wav', 'Ecosistema web UC');
                }
            } catch (error) {
                console.error('Failed to update audio store:', error);
            }
            
            // Send custom event to show player
            const showEvent = new CustomEvent('showAudioPlayer');
            window.dispatchEvent(showEvent);
            
            isPlayerVisible = true;
            toggleButton.textContent = 'Ocultar';
            toggleButton.setAttribute('aria-pressed', 'true');
        };
        
        const hidePlayer = () => {
            console.log('Hiding player...');
            
            // Send custom event to hide player
            const hideEvent = new CustomEvent('hideAudioPlayer');
            window.dispatchEvent(hideEvent);
            
            isPlayerVisible = false;
            toggleButton.textContent = 'Escuchar';
            toggleButton.setAttribute('aria-pressed', 'false');
        };
        
        toggleButton.addEventListener('click', (e) => {
            e.preventDefault();
            console.log('Toggle button clicked, player visible:', isPlayerVisible);
            if (isPlayerVisible) {
                hidePlayer();
            } else {
                showPlayer();
            }
        });
        
        console.log('Audio player toggle initialized successfully');
    }
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', initAudioPlayerToggle);
    
    // Re-initialize on Astro page transitions
    document.addEventListener('astro:page-load', initAudioPlayerToggle);
</script>