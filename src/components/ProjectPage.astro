---
import { type CollectionEntry } from 'astro:content';
import Layout from '../layouts/Layout.astro';   
import DitheredImageReact from './DitheredImageReact';
import Button from './Button.astro';
import ReadingGuide from './ReadingGuide';
import ScrollProgress from './ScrollProgress';

interface Props {
    projectsByLang: Record<string, CollectionEntry<'projects'>>;
    slug: string;
    currentLocale: "es" | "en" | "no";
}

const { projectsByLang, slug, currentLocale } = Astro.props;

// Get the project for the current language, fallback to Spanish if not available
const project = projectsByLang[currentLocale] || projectsByLang['es'] || Object.values(projectsByLang)[0];

if (!project) {
    return Astro.redirect('/404');
}

const { name, hook, seo, clientLogo } = project.data;
const { Content } = await project.render();
---

<Layout title={seo?.title ?? name} description={seo?.description ?? hook} image={seo?.image} pageType="article" showHeader={true} lang={currentLocale}>
    <ScrollProgress client:load />
    <ReadingGuide client:load />
    
    <article class="min-h-screen">
        <!-- Full height layout with content and sidebar -->
        <div class="flex min-h-screen" id="project-content-container">
            <!-- Main content area -->
            <main class="flex-1 min-w-0 md:mb-64" id="project-content">
                <!-- Content with project header -->
                <div class="py-8 px-2 lg:px-4 lg:py-4 flex flex-col items-center">
                    <!-- Project Title and Hook - Part of Content -->
                    <header class="pb-8 border-b border-dotted border-main/30 w-full" style="max-width: var(--paragraph-max-width)">
                        <!-- Project Name and Reading Time -->
                        <div class="flex justify-between items-center mb-8">
                            <div class="text-base font-mono font-medium text-main opacity-60 uppercase tracking-wider" style={`view-transition-name: project-content-${project.slug}`}>
                                {name}
                            </div>
                            <div class="text-sm font-mono font-medium text-main opacity-50 uppercase tracking-wider" id="reading-time">
                                Calculando...
                            </div>
                        </div>
                        
                        <!-- Hook - Main Focus -->
                        {hook && (
                            <h1 class="text-2xl sm:text-3xl lg:text-4xl leading-snug text-main font-bold mb-10 text-pretty" style="max-width: var(--paragraph-max-width)">
                                {hook}
                            </h1>
                        )}
                        
                        <!-- Metrics Section - Supporting Data -->
                        <section class="mt-12" aria-labelledby="metrics-heading">
                            <h3 id="metrics-heading" class="text-xs font-mono font-medium text-main mb-4 uppercase tracking-widest opacity-75">Alcance del ecosistema</h3>
                            <p class="text-sm text-main opacity-70 mb-6 max-w-prose">
                                La infraestructura digital que desarrollé impacta directamente a toda la comunidad UC, desde estudiantes hasta docentes y personal administrativo.
                            </p>
                            
                            <!-- Mobile: Stack vertically in 2 columns -->
                            <div class="grid grid-cols-2 gap-2 sm:hidden" id="metrics-container-mobile" role="list" aria-label="Estadísticas del ecosistema UC">
                                <div class="bg-main text-secondary px-2 py-2 border border-main" role="listitem">
                                    <div class="text-lg font-mono font-bold mb-1" data-target="33000" aria-label="33,000 alumnos">0</div>
                                    <div class="text-xs font-mono leading-tight" aria-hidden="true">alumnos<br/>activos</div>
                                </div>
                                <div class="bg-secondary text-main px-2 py-2 border border-main" role="listitem">
                                    <div class="text-lg font-mono font-bold mb-1" data-target="3500" aria-label="3,500 profesores">0</div>
                                    <div class="text-xs font-mono leading-tight" aria-hidden="true">profesores<br/>y staff</div>
                                </div>
                                <div class="bg-secondary text-main px-2 py-2 border border-main" role="listitem">
                                    <div class="text-lg font-mono font-bold mb-1" data-target="6500" aria-label="6,500 nuevos ingresantes">0</div>
                                    <div class="text-xs font-mono leading-tight" aria-hidden="true">nuevos<br/>ingresantes</div>
                                </div>
                                <div class="bg-main text-secondary px-2 py-2 border border-main" role="listitem">
                                    <div class="text-lg font-mono font-bold mb-1" data-target="100" aria-label="Más de 100 sitios institucionales">0<span aria-hidden="true">+</span></div>
                                    <div class="text-xs font-mono leading-tight" aria-hidden="true">sitios<br/>institucionales</div>
                                </div>
                            </div>

                            <!-- Desktop: Horizontal layout -->
                            <div class="hidden sm:flex flex-wrap gap-3" id="metrics-container-desktop" role="list" aria-label="Estadísticas del ecosistema UC" style="max-width: var(--paragraph-max-width)">
                                <div class="bg-main text-secondary px-3 py-2 border border-main min-w-[100px]" role="listitem">
                                    <div class="text-lg font-mono font-bold text-left" data-target="33000" aria-label="33,000 alumnos">0</div>
                                    <div class="text-xs font-mono text-left whitespace-nowrap" aria-hidden="true">alumnos activos</div>
                                </div>
                                <div class="bg-secondary text-main px-3 py-2 border border-main min-w-[100px]" role="listitem">
                                    <div class="text-lg font-mono font-bold text-left" data-target="3500" aria-label="3,500 profesores">0</div>
                                    <div class="text-xs font-mono text-left whitespace-nowrap" aria-hidden="true">profesores y staff</div>
                                </div>
                                <div class="bg-main text-secondary px-3 py-2 border border-main min-w-[110px]" role="listitem">
                                    <div class="text-lg font-mono font-bold text-left" data-target="6500" aria-label="6,500 nuevos ingresantes">0</div>
                                    <div class="text-xs font-mono text-left whitespace-nowrap" aria-hidden="true">nuevos ingresantes</div>
                                </div>
                                <div class="bg-secondary text-main px-3 py-2 border border-main min-w-[120px]" role="listitem">
                                    <div class="text-lg font-mono font-bold text-left" data-target="100" aria-label="Más de 100 sitios institucionales">0<span aria-hidden="true">+</span></div>
                                    <div class="text-xs font-mono text-left whitespace-nowrap" aria-hidden="true">sitios institucionales</div>
                                </div>
                            </div>
                        </section>
                        
                        {clientLogo && (
                            <div class="mt-8 w-32 h-32" style={`view-transition-name: project-logo-${project.slug}`} data-client-logo={clientLogo}>
                                <DitheredImageReact 
                                    src={clientLogo} 
                                    alt={`Logo del cliente - ${name}`}
                                    className="w-full h-full object-contain"
                                    respectOriginalSize={true}
                                    client:load
                                />
                            </div>
                        )}
                    </header>
                    
                    <!-- Article Content -->
                    <div class="prose w-full [&>p]:text-base [&>p]:lg:text-lg [&>p]:leading-relaxed [&>p]:mb-6 [&>h1]:text-4xl [&>h1]:font-bold [&>h1]:mt-12 [&>h1]:mb-6 [&>h1]:scroll-mt-12 [&>h2]:text-3xl [&>h2]:font-bold [&>h2]:mt-10 [&>h2]:mb-4 [&>h2]:scroll-mt-12 [&>h3]:text-2xl [&>h3]:font-semibold [&>h3]:mt-8 [&>h3]:mb-3 [&>h3]:scroll-mt-12 [&>h4]:text-xl [&>h4]:font-semibold [&>h4]:mt-6 [&>h4]:mb-2 [&>h4]:scroll-mt-12 [&>h5]:scroll-mt-12 [&>h6]:scroll-mt-12" style="max-width: var(--paragraph-max-width)">
                        <Content />
                    </div>
                </div>
            </main>
            
            <!-- Desktop Sidebar - Table of Contents -->
            <aside class="w-48 flex-shrink-0 hidden lg:block" id="project-sidebar">
                <div class="sticky top-20 py-8 px-4">
                    <!-- Table of Contents -->
                    <nav class="toc-nav">
                        <div class="mb-6">
                            <h2 class="text-xs font-mono font-medium text-main opacity-50 uppercase tracking-wide">Contenido</h2>
                        </div>
                        <div class="relative">
                            <!-- Progress indicator background -->
                            <div class="absolute left-0 top-0 bottom-0 w-0.5 bg-main opacity-10" id="progress-bg"></div>
                            <!-- Active progress indicator - animated shadow -->
                            <div class="absolute left-3 right-0 bg-main opacity-15 transition-all duration-300 ease-out" id="progress-indicator" style="height: 0px; top: 0px;"></div>
                            <!-- TOC list with modern styling -->
                            <ul id="toc-list" class="relative space-y-1 pl-3">
                                <!-- TOC will be generated by JavaScript -->
                            </ul>
                        </div>
                    </nav>
                    
                    <!-- Reading Guide Toggle -->
                    <div class="mt-8 pt-6 border-t border-main border-opacity-20">
                        <div class="mb-4">
                            <h3 class="text-xs font-mono font-medium text-main opacity-50 uppercase tracking-wide">Guía de lectura</h3>
                        </div>
                        <Button 
                            id="reading-guide-toggle" 
                            class="w-full text-left text-xs font-mono !px-3 !py-2 !h-auto !font-normal !normal-case !tracking-normal"
                            aria-pressed="false"
                        >
                            Activar guía
                        </Button>
                    </div>
                </div>
            </aside>
        </div>

        </div>

        <script>
            function generateTableOfContents() {
                const tocList = document.getElementById('toc-list');
                const allHeadings = document.querySelectorAll('#project-content h1, #project-content h2, #project-content h3, #project-content h4, #project-content h5, #project-content h6');
                
                // Filter out the hook heading (first h1 in the header section)
                const headings = Array.from(allHeadings).filter(heading => {
                    const isInHeader = heading.closest('header');
                    return !isInHeader;
                });
                
                if (!tocList || !headings.length) return;
                
                // Clear existing TOC
                tocList.innerHTML = '';
                
                // Generate TOC entries for desktop only
                headings.forEach((heading, index) => {
                    // Create slugified ID from heading text
                    const headingText = heading.textContent || '';
                    const slug = headingText
                        .toLowerCase()
                        .normalize('NFD')
                        .replace(/[\u0300-\u036f]/g, '') // Remove accents
                        .replace(/[^a-z0-9\s-]/g, '') // Remove special chars
                        .trim()
                        .replace(/\s+/g, '-') // Replace spaces with hyphens
                        .replace(/-+/g, '-'); // Remove multiple hyphens
                    
                    // Ensure unique ID (add index if needed)
                    let id = slug;
                    if (document.getElementById(id)) {
                        id = `${slug}-${index}`;
                    }
                    
                    heading.id = id;
                    
                    // Create TOC entry for desktop only
                    const listItem = document.createElement('li');
                    const link = document.createElement('a');
                    
                    link.href = `#${id}`;
                    link.textContent = heading.textContent || '';
                    
                    // Desktop styling based on heading level
                    const level = parseInt(heading.tagName.charAt(1));
                    listItem.className = 'relative group';
                    
                    if (level === 1 || level === 2) {
                        link.className = 'block text-main border-2 border-transparent hover:border-main text-xs py-2 px-3 mx-1 font-mono font-medium transition-all duration-200 ease-out';
                    } else {
                        link.className = 'block text-main border-2 border-transparent hover:border-main text-xs py-1.5 px-3 pl-5 mx-1 font-mono opacity-70 hover:opacity-100 transition-all duration-200 ease-out';
                    }
                    
                    listItem.appendChild(link);
                    tocList.appendChild(listItem);
                });
            }
            
            function updateActiveTocItem(activeId: string) {
                const tocLinks = document.querySelectorAll('#toc-list a');
                const progressIndicator = document.getElementById('progress-indicator');
                const tocList = document.getElementById('toc-list');
                
                // Reset all links to default style
                tocLinks.forEach(link => {
                    link.classList.remove('font-bold', 'text-secondary');
                    link.classList.add('text-main');
                });
                
                const activeLink = document.querySelector(`#toc-list a[href="#${activeId}"]`);
                if (activeLink && progressIndicator && tocList) {
                    // Style the active link text for better contrast over shadow
                    activeLink.classList.remove('text-main');
                    activeLink.classList.add('font-bold', 'text-secondary', 'relative', 'z-10');
                    
                    // Calculate position for animated shadow indicator
                    const linkRect = activeLink.getBoundingClientRect();
                    const tocListRect = tocList.getBoundingClientRect();
                    
                    // Position relative to the TOC list container
                    const relativeTop = linkRect.top - tocListRect.top;
                    const linkHeight = linkRect.height;
                    
                    // Update animated shadow position and height
                    progressIndicator.style.top = `${relativeTop}px`;
                    progressIndicator.style.height = `${linkHeight}px`;
                    progressIndicator.style.opacity = '1';
                }
            }
            
            function updateCurrentHeading() {
                const allHeadings = document.querySelectorAll('#project-content h1, #project-content h2, #project-content h3, #project-content h4, #project-content h5, #project-content h6');
                
                // Filter out the hook heading (first h1 in the header section)
                const headings = Array.from(allHeadings).filter(heading => {
                    const isInHeader = heading.closest('header');
                    return !isInHeader;
                });
                
                if (!headings.length) return;
                
                let currentHeading = null;
                let detectionY = 0;
                
                // Check if reading guide is active and get its position
                const readingGuideToggle = document.getElementById('reading-guide-toggle');
                const isReadingGuideActive = readingGuideToggle && readingGuideToggle.getAttribute('aria-pressed') === 'true';
                
                if (isReadingGuideActive) {
                    // Use reading guide position from the component
                    const viewportHeight = window.innerHeight;
                    const readingGuidePosition = (window as any).getReadingGuidePosition ? (window as any).getReadingGuidePosition() : 0.5;
                    detectionY = viewportHeight * readingGuidePosition;
                    
                    // Find heading based on screen position (reading guide mode)
                    for (let i = 0; i < headings.length; i++) {
                        const heading = headings[i] as HTMLElement;
                        const headingRect = heading.getBoundingClientRect();
                        const headingScreenY = headingRect.top;
                        
                        // Check if heading has passed the detection line
                        if (headingScreenY <= detectionY) {
                            currentHeading = heading;
                        } else {
                            break;
                        }
                    }
                } else {
                    // Traditional detection - heading at middle of viewport
                    const viewportMiddle = window.innerHeight * 0.5;
                    
                    for (let i = 0; i < headings.length; i++) {
                        const heading = headings[i] as HTMLElement;
                        const headingRect = heading.getBoundingClientRect();
                        const headingScreenY = headingRect.top;
                        
                        // Check if heading has passed the middle of viewport
                        if (headingScreenY <= viewportMiddle) {
                            currentHeading = heading;
                        } else {
                            break;
                        }
                    }
                }
                
                // Update active TOC item
                if (currentHeading && currentHeading.id) {
                    updateActiveTocItem(currentHeading.id);
                }
            }

            function animateNumbers() {
                const numberElements = document.querySelectorAll('#metrics-container-mobile [data-target], #metrics-container-desktop [data-target]');
                
                numberElements.forEach(element => {
                    const target = parseInt(element.getAttribute('data-target') || '0');
                    const duration = 3500; // 3.5 seconds for slower animation
                    const startTime = performance.now();
                    
                    function updateNumber(currentTime: number) {
                        const elapsed = currentTime - startTime;
                        const progress = Math.min(elapsed / duration, 1);
                        
                        // More dramatic easing - slower as it approaches target
                        const easeOutQuart = 1 - Math.pow(1 - progress, 4);
                        
                        // Add deceleration curve for the final approach
                        const finalProgress = progress < 0.8 ? easeOutQuart : 
                            easeOutQuart + (1 - easeOutQuart) * Math.pow((progress - 0.8) / 0.2, 3);
                        
                        const currentValue = Math.floor(target * finalProgress);
                        
                        // Format number with commas for thousands
                        element.textContent = currentValue.toLocaleString();
                        
                        if (progress < 1) {
                            requestAnimationFrame(updateNumber);
                        }
                    }
                    
                    requestAnimationFrame(updateNumber);
                });
            }

            function calculateReadingTime() {
                const readingTimeElement = document.getElementById('reading-time');
                if (!readingTimeElement) return;
                
                // Get only the prose content (exclude header, sidebar, etc.)
                const proseElement = document.querySelector('.prose');
                if (!proseElement) return;
                
                // Clone the element to manipulate without affecting the original
                const contentClone = proseElement.cloneNode(true) as Element;
                
                // Remove code blocks (they read slower)
                const codeBlocks = contentClone.querySelectorAll('pre, code');
                codeBlocks.forEach((block: Element) => block.remove());
                
                // Remove headings from word count (they're scanned, not read)
                const headings = contentClone.querySelectorAll('h1, h2, h3, h4, h5, h6');
                headings.forEach((heading: Element) => heading.remove());
                
                // Extract clean text content
                const textContent = contentClone.textContent || '';
                
                // More sophisticated word counting
                const words = textContent
                    .trim()
                    .replace(/\s+/g, ' ') // Normalize whitespace
                    .split(' ')
                    .filter((word: string) => 
                        word.length > 0 && 
                        !/^[^\w]*$/.test(word) && // Filter out punctuation-only "words"
                        word.length > 1 // Filter out single characters
                    );
                
                const wordCount = words.length;
                
                // Add time for code blocks (slower reading)
                const codeWordCount = Array.from(codeBlocks).reduce((count: number, block: Element) => {
                    const codeText = block.textContent || '';
                    const codeWords = codeText.trim().split(/\s+/).filter((word: string) => word.length > 0);
                    return count + codeWords.length;
                }, 0);
                
                // Add time for headings (quick scanning)
                const headingWordCount = Array.from(headings).reduce((count: number, heading: Element) => {
                    const headingText = heading.textContent || '';
                    const headingWords = headingText.trim().split(/\s+/).filter((word: string) => word.length > 0);
                    return count + headingWords.length;
                }, 0);
                
                // More conservative reading speeds (slower, more realistic for all users)
                const regularWordsPerMinute = 180; // Regular text (more conservative)
                const codeWordsPerMinute = 60;     // Code (much slower, needs analysis)
                const headingWordsPerMinute = 300; // Headings (moderate scanning speed)
                
                const regularTime = wordCount / regularWordsPerMinute;
                const codeTime = codeWordCount / codeWordsPerMinute;
                const headingTime = headingWordCount / headingWordsPerMinute;
                
                const totalMinutes = Math.ceil(regularTime + codeTime + headingTime);
                
                // Minimum 2 minutes for any substantial content
                const readingTimeMinutes = Math.max(2, totalMinutes);
                
                // Format the reading time
                const readingTimeText = readingTimeMinutes === 1 
                    ? '1 min lectura' 
                    : `${readingTimeMinutes} min lectura`;
                
                readingTimeElement.textContent = readingTimeText;
            }



            function initPage() {
                // Generate table of contents
                generateTableOfContents();
                
                // Set initial active heading
                updateCurrentHeading();
                
                // Calculate reading time
                calculateReadingTime();
                
                // Animate metrics numbers
                setTimeout(animateNumbers, 500); // Start animation after page loads
                
                // Update active heading on scroll
                let scrollTimeout: number;
                
                window.addEventListener('scroll', () => {
                    // Throttle heading updates for performance
                    clearTimeout(scrollTimeout);
                    scrollTimeout = setTimeout(updateCurrentHeading, 10) as any;
                }, { passive: true });
                

                // Reading guide toggle is handled by the ReadingGuide component
            }

            // Run on page load
            document.addEventListener('DOMContentLoaded', initPage);
            
            // Run on Astro page transitions
            document.addEventListener('astro:page-load', initPage);
        </script>
    </article>
    {
        // (prevProject || nextProject) && (
        //     <div class="my-16 sm:my-24 ">
        //         <h2 class="mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl">Sigue leyendo</h2>
        //         {nextProject && <ProjectPreview project={nextProject} class="mb-10 sm:mb-12" headingLevel="h3" />}
        //         {prevProject && <ProjectPreview project={prevProject} class="mb-10 sm:mb-12" headingLevel="h3" />}
        //     </div>
        // )
    }
</Layout>

<!-- Preload client logo -->
{clientLogo && <link rel="preload" as="image" href={clientLogo} />}