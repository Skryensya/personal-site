---
import siteConfig, { type Link } from '@/data/site-config';
import WaveDivider from './WaveDivider.astro';
import { Heart, ChevronRight, ExternalLink } from 'lucide-react';
import { getTranslations } from '@/i18n/utils';
import { defaultLang, type Language } from '@/i18n/ui';
import { getLocalizedUrl, getHomeUrl } from '@/utils/localized-routes';
import CircularTextAstro from '@/components/CircularTextAstro.astro';

interface Props { 
  lang?: Language; 
}

interface NavigationLink {
  href: string;
  textKey: string;
  text: string;
  isExternal?: boolean;
}

const { lang = defaultLang } = Astro.props;
const t = getTranslations(lang);
const currentYear = new Date().getFullYear();

// Get CV PDF path based on language
const getCVPath = (locale: Language) => {
  // Spanish uses curriculum.pdf
  if (locale === 'es') return '/curriculum.pdf';
  // English and Norwegian use resume.pdf
  return '/resume.pdf';
};

// Navigation links configuration
const navigationLinks: NavigationLink[] = [
  {
    href: getHomeUrl(lang),
    textKey: 'footer.home',
    text: t('footer.home')
  },
  {
    href: getLocalizedUrl(lang, 'projects'),
    textKey: 'footer.projects',
    text: t('footer.projects')
  },
  {
    href: getCVPath(lang),
    textKey: 'footer.resume',
    text: t('footer.resume'),
    isExternal: true
  },
  {
    href: lang === 'es' ? '/sistema-de-diseno' : lang === 'en' ? '/en/design-system' : '/no/designsystem',
    textKey: '',
    text: lang === 'es' ? 'Sistema de Dise√±o' : lang === 'en' ? 'Design System' : 'Designsystem'
  },
  {
    href: lang === 'es' ? '/arbol-de-contenido' : lang === 'en' ? '/en/content-tree' : '/no/innholdstre',
    textKey: '',
    text: lang === 'es' ? '√Årbol de contenido' : lang === 'en' ? 'Content Tree' : 'Innholdstre'
  },
  {
    href: getLocalizedUrl(lang, 'accessibility'),
    textKey: 'footer.accessibility',
    text: t('footer.accessibility')
  }
];
---

<footer class="bg-main border-t-double border-t-2 border-secondary">
  <WaveDivider inverted />
  <div class="mx-auto max-w-[var(--max-w-size)] px-4 pb-12">
    <!-- Main content flex - Mobile: stacked, Desktop: 83.33% content + 16.67% circle -->
    <div class="flex flex-col md:flex-row gap-8 mb-8">
      <!-- Content sections container - 83.33% on desktop -->
      <div class="flex flex-col md:flex-row gap-8 md:w-[83.33%] w-full">
        <!-- Navigation - 33.33% of content area -->
        <div class="md:w-[33.33%] w-full">
          <h3 class="text-body-mono font-bold !mb-2 !mt-1 text-secondary scramble-text" data-text={t('footer.navigation')}>
            {t('footer.navigation')}
          </h3>
          <nav class="space-y-1">
            {navigationLinks.map((link) => (
              <a
                href={link.href}
                class="font-mono text-sm text-secondary hover:bg-secondary hover:text-main px-4 py-2.5 md:py-1.5 border-l-2 border-secondary scramble-text flex items-center justify-between group"
                data-text={link.text}
                target={link.isExternal ? '_blank' : undefined}
                rel={link.isExternal ? 'noopener noreferrer' : undefined}
              >
                <span class="scramble-part">{link.text}</span>
                {link.isExternal ? (
                  <ExternalLink size={14} className="text-secondary group-hover:text-main" client:idle />
                ) : (
                  <ChevronRight size={14} className="text-secondary group-hover:text-main" client:idle />
                )}
              </a>
            ))}
          </nav>
        </div>

        <!-- Social - 33.33% of content area -->
        <div class="md:w-[33.33%] w-full">
          <h3 class="text-body-mono font-bold !mb-2 !mt-1 text-secondary scramble-text" data-text={t('footer.connect')}>
            {t('footer.connect')}
          </h3>
          <nav class="space-y-1">
            {siteConfig.socialLinks?.map((link: Link) => (
              <a
                href={link.href}
                target="_blank"
                rel="noopener noreferrer"
                class="group font-mono text-sm text-secondary hover:bg-secondary hover:text-main px-4 py-2.5 md:py-1.5 border-l-2 border-secondary scramble-text flex items-center justify-between"
                data-text={`${link.text}`}
                data-has-external="true"
              >
                <span class="scramble-part">{link.text}</span>
                <ExternalLink size={14} className="text-secondary group-hover:text-main" client:idle />
              </a>
            ))}
          </nav>
        </div>

        <!-- Information - 33.33% of content area -->
        <div class="md:w-[33.33%] w-full">
          <h3 class="text-body-mono font-bold !mb-2 !mt-1 text-secondary scramble-text" data-text={t('footer.info')}>
            {t('footer.info')}
          </h3>
          <nav class="space-y-2">
            <div class="block font-mono text-sm text-secondary px-2 py-1 scramble-text" data-text="Santiago, Chile">
              Santiago, Chile
            </div>
            <div class="block font-mono text-sm text-secondary px-2 py-1 scramble-text" data-text={t('footer.availableForProjects')}>
              {t('footer.availableForProjects')}
            </div>
            <div class="block font-mono text-sm py-1">
              <div class="text-secondary font-mono text-sm">
                <div class="text-body-mono font-bold !mb-2 !mt-1 text-secondary scramble-text">{t('footer.aspectRatio.title')}</div>
                <div class="flex gap-4 items-center ">
                  <div id="footer-contrast-display" class="text-sm leading-tight  border text-secondary py-1 px-2 font-bold border-main scramble-text">--:--</div>
                  <div id="footer-wcag-levels" class="flex gap-1"></div>
                </div>
              </div>
            </div>
            <div class="block font-mono text-sm py-1">
              <div class="text-secondary font-mono text-sm">
                <div class="text-body-mono font-bold !mb-2 !mt-1 text-secondary scramble-text">{t('footer.motion.label')}</div>
                <div class=""><span id="motion-status" class="scramble-text">{t('footer.motion.detecting')}</span></div>
              </div>
            </div>
          </nav>
        </div>
      </div>

      <!-- CircularText - 16.67% on desktop, full width on mobile -->
      <div class="md:w-[16.67%] w-full flex justify-center items-start overflow-hidden" style="view-transition-name: none;">
        <CircularTextAstro text="ALLISON PE√ëA * SKRYENSYA * " onHover="speedUp" spinDuration={20}/>
      </div>
    </div>

    <!-- Copyright -->
    <div class="border-t-double border-t-2 border-secondary pt-6">
      <div class="flex flex-col md:flex-row justify-between items-center gap-4">
        <p class="font-mono text-sm text-secondary scramble-text" data-text={`¬© ${currentYear} ${siteConfig.title}. ${t('footer.copyright')}.`}>
          ¬© {currentYear} {siteConfig.title}. {t('footer.copyright')}.
        </p>
        <p class="font-mono text-sm text-secondary scramble-text flex items-center gap-2" data-text={`${t('footer.builtWith')} ${t('footer.andCode')}`} data-has-heart="true">
          <span class="scramble-part">{t('footer.builtWith')}</span>
          <Heart size={14} className="text-secondary" fill="currentColor" client:idle />
          <span class="scramble-part">{t('footer.andCode')}</span>
        </p>
      </div>
    </div>
  </div>
</footer>

<script>
  import { debugLogger } from '@/utils/debug-logger';

  // Function to initialize footer functionality
  function initFooter() {
    debugLogger.log('ü¶∂ Footer script initialized');

    let footerAnimated = false;

    // Contrast ratio calculation functions
    function hexToRgb(hex: string): { r: number; g: number; b: number } | null {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : null;
    }

    function getRelativeLuminance(r: number, g: number, b: number): number {
      const [rNorm, gNorm, bNorm] = [r, g, b].map(c => {
        c = c / 255;
        return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
      });
      return 0.2126 * rNorm + 0.7152 * gNorm + 0.0722 * bNorm;
    }

    function getContrastRatio(color1: string, color2: string): number {
      const rgb1 = hexToRgb(color1);
      const rgb2 = hexToRgb(color2);

      if (!rgb1 || !rgb2) return 1;

      const lum1 = getRelativeLuminance(rgb1.r, rgb1.g, rgb1.b);
      const lum2 = getRelativeLuminance(rgb2.r, rgb2.g, rgb2.b);

      const brightest = Math.max(lum1, lum2);
      const darkest = Math.min(lum1, lum2);

      return (brightest + 0.05) / (darkest + 0.05);
    }

    function getWCAGLevel(ratio: number): string {
      if (ratio >= 7) return 'AAA';
      if (ratio >= 4.5) return 'AA';
      if (ratio >= 3) return 'AA Large';
      return 'Fail';
    }

    function rgbToHex(rgb: string): string {
      const result = rgb.match(/\d+/g);
      if (!result || result.length < 3) return '#000000';

      const r = parseInt(result[0]);
      const g = parseInt(result[1]);
      const b = parseInt(result[2]);

      return '#' + [r, g, b].map(x => {
        const hex = x.toString(16);
        return hex.length === 1 ? '0' + hex : hex;
      }).join('');
    }

    function calculateAndDisplayFooterContrast(): void {
      const contrastDisplay = document.getElementById('footer-contrast-display');
      if (!contrastDisplay) {
        debugLogger.warn('Footer contrast display element not found');
        return;
      }

      try {
        const rootStyles = getComputedStyle(document.documentElement);
        const colorMain = rootStyles.getPropertyValue('--color-main').trim();
        const colorSecondary = rootStyles.getPropertyValue('--color-secondary').trim();

        debugLogger.log('Footer contrast calculation:', { colorMain, colorSecondary });

        let mainColor = colorMain;
        let secondaryColor = colorSecondary;

        if (!mainColor || !secondaryColor) {
          const isDarkMode = document.documentElement.getAttribute('data-theme') === 'dark';
          mainColor = isDarkMode ? '#ffffff' : '#000000';
          secondaryColor = isDarkMode ? '#000000' : '#ffffff';
        }

        if (!mainColor.startsWith('#')) {
          mainColor = mainColor.startsWith('rgb') ? rgbToHex(mainColor) : '#000000';
        }
        if (!secondaryColor.startsWith('#')) {
          secondaryColor = secondaryColor.startsWith('rgb') ? rgbToHex(secondaryColor) : '#ffffff';
        }

        const contrastRatio = getContrastRatio(mainColor, secondaryColor);

        const wcagLevelsElement = document.getElementById('footer-wcag-levels');
        const ratio = contrastRatio.toFixed(1);
        
        contrastDisplay.textContent = `${ratio}:1`;
        
        if (wcagLevelsElement) {
          // Get language from document
          const lang = document.documentElement.getAttribute('lang') || 'es';

          // Clear previous content
          wcagLevelsElement.innerHTML = '';
          
          // Define levels and their requirements
          const levels = [
            { name: 'A', requirement: 3, passed: contrastRatio >= 3 },
            { name: 'AA', requirement: 4.5, passed: contrastRatio >= 4.5 },
            { name: 'AAA', requirement: 7, passed: contrastRatio >= 7 }
          ];
          
          levels.forEach(level => {
            const levelBox = document.createElement('div');
            levelBox.className = `bg-secondary text-main px-2 py-1 text-xs font-mono font-bold flex items-center gap-1 border border-main ${level.passed ? 'opacity-100' : 'opacity-30'} cursor-help relative`;
            
            const titleKey = `footer.wcag.${level.name.toLowerCase()}.title`;
            const descKey = `footer.wcag.${level.name.toLowerCase()}.desc`;
            
            // Get tooltip text from translations
            let tooltipTitle = '';
            let tooltipDesc = '';
            if (lang === 'en') {
              const enTranslations: Record<string, string> = {
                'footer.wcag.a.title': 'WCAG A - Minimum',
                'footer.wcag.a.desc': '3:1 contrast for graphics, icons and UI components',
                'footer.wcag.aa.title': 'WCAG AA - Standard',
                'footer.wcag.aa.desc': '4.5:1 contrast for normal text and legal compliance',
                'footer.wcag.aaa.title': 'WCAG AAA - Enhanced',
                'footer.wcag.aaa.desc': '7:1 contrast for maximum accessibility and readability'
              };
              tooltipTitle = enTranslations[titleKey] || '';
              tooltipDesc = enTranslations[descKey] || '';
            } else if (lang === 'no') {
              const noTranslations: Record<string, string> = {
                'footer.wcag.a.title': 'WCAG A - Minimum',
                'footer.wcag.a.desc': '3:1 kontrast for grafikk, ikoner og UI-komponenter',
                'footer.wcag.aa.title': 'WCAG AA - Standard',
                'footer.wcag.aa.desc': '4.5:1 kontrast for normal tekst og lovmessig overholdelse',
                'footer.wcag.aaa.title': 'WCAG AAA - Forbedret',
                'footer.wcag.aaa.desc': '7:1 kontrast for maksimal tilgjengelighet og lesbarhet'
              };
              tooltipTitle = noTranslations[titleKey] || '';
              tooltipDesc = noTranslations[descKey] || '';
            } else {
              const esTranslations: Record<string, string> = {
                'footer.wcag.a.title': 'WCAG A - M√≠nimo',
                'footer.wcag.a.desc': 'Contraste 3:1 para elementos gr√°ficos, iconos y componentes de interfaz',
                'footer.wcag.aa.title': 'WCAG AA - Est√°ndar',
                'footer.wcag.aa.desc': 'Contraste 4.5:1 para texto normal y cumplimiento legal',
                'footer.wcag.aaa.title': 'WCAG AAA - Superior',
                'footer.wcag.aaa.desc': 'Contraste 7:1 para m√°xima accesibilidad y legibilidad'
              };
              tooltipTitle = esTranslations[titleKey] || '';
              tooltipDesc = esTranslations[descKey] || '';
            }
            
            // Create icon element
            const iconContainer = document.createElement('span');
            iconContainer.className = 'inline-flex w-3 h-3 items-center justify-center';
            
            if (level.passed) {
              // Use circle-check-big icon for passed levels
              iconContainer.innerHTML = '<svg width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21.801 10A10 10 0 1 1 17 3.335"/><path d="m9 11 3 3L22 4"/></svg>';
            } else {
              // Use ban icon for failed levels
              iconContainer.innerHTML = '<svg width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4.929 4.929 19.07 19.071"/><circle cx="12" cy="12" r="10"/></svg>';
            }
            
            const label = document.createElement('span');
            label.textContent = level.name;
            
            // Create tooltip element
            const tooltip = document.createElement('div');
            tooltip.className = 'fixed bg-secondary text-main border-2 border-main shadow-[4px_4px_0px_var(--color-main)] z-[9999] pointer-events-none';
            tooltip.style.width = '200px';
            tooltip.style.opacity = '0';
            tooltip.style.visibility = 'hidden';
            
            // Create tooltip content
            const tooltipContent = document.createElement('div');
            tooltipContent.className = 'p-3 flex flex-col gap-2';
            
            // Header with title and icon
            const header = document.createElement('div');
            header.className = 'flex items-center justify-between';
            
            const title = document.createElement('div');
            title.className = 'text-body-mono-sm font-bold';
            title.textContent = tooltipTitle;
            
            // Status icon
            const statusIcon = document.createElement('div');
            statusIcon.className = 'w-5 h-5 flex items-center justify-center';
            if (level.passed) {
              statusIcon.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21.801 10A10 10 0 1 1 17 3.335"/><path d="m9 11 3 3L22 4"/></svg>';
            } else {
              statusIcon.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4.929 4.929 19.07 19.071"/><circle cx="12" cy="12" r="10"/></svg>';
            }
            
            header.appendChild(title);
            header.appendChild(statusIcon);
            
            // Description
            const desc = document.createElement('div');
            desc.className = 'text-xs font-mono leading-tight text-left';
            desc.textContent = tooltipDesc;
            
            tooltipContent.appendChild(header);
            tooltipContent.appendChild(desc);
            tooltip.appendChild(tooltipContent);
            
            levelBox.appendChild(iconContainer);
            levelBox.appendChild(label);
            
            // Add hover events
            levelBox.addEventListener('mouseenter', () => {
              // Position tooltip relative to the levelBox
              const rect = levelBox.getBoundingClientRect();
              tooltip.style.left = `${rect.left + rect.width / 2}px`;
              tooltip.style.top = `${rect.top - 8}px`;
              tooltip.style.transform = 'translate(-50%, -100%)';
              tooltip.style.opacity = '1';
              tooltip.style.visibility = 'visible';
              
              // Append to body to avoid opacity inheritance
              document.body.appendChild(tooltip);
            });
            
            levelBox.addEventListener('mouseleave', () => {
              tooltip.style.opacity = '0';
              tooltip.style.visibility = 'hidden';
              // Remove from body
              if (tooltip.parentNode) {
                tooltip.parentNode.removeChild(tooltip);
              }
            });
            
            wcagLevelsElement.appendChild(levelBox);
          });
        }

      } catch (error) {
        debugLogger.warn('Failed to calculate contrast ratio:', error);
        contrastDisplay.textContent = '--:--';
      }
    }

    // Motion preference management
    function updateMotionPreference(): void {
      const motionStatus = document.getElementById('motion-status');
      if (!motionStatus) {
        debugLogger.warn('Motion status element not found');
        return;
      }

      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
      const lang = document.documentElement.getAttribute('lang') || 'es';

      // Get translations from the global translations object
      const translations = (window as any).__ASTRO_I18N__;
      let statusText = '';

      debugLogger.log('Motion preference check:', {
        prefersReducedMotion,
        lang,
        translations,
        hasTranslations: !!translations?.[lang]
      });

      if (translations && translations[lang]) {
        statusText = prefersReducedMotion ?
          translations[lang]['footer.motion.activated'] || 'Motion: reduced' :
          translations[lang]['footer.motion.deactivated'] || 'Motion: enabled';
      } else {
        // Fallback
        const statusTexts = {
          'es': prefersReducedMotion ? 'Activado' : 'Desactivado',
          'en': prefersReducedMotion ? 'Activated' : 'Deactivated',
          'no': prefersReducedMotion ? 'Aktivert' : 'Deaktivert'
        };
        statusText = statusTexts[lang as keyof typeof statusTexts] || statusTexts.es;
      }

      motionStatus.textContent = statusText;

      debugLogger.log('Motion status updated:', statusText);
    }

    // Scramble a single text node (span.scramble-part)
    function scrambleText(element: HTMLElement, originalText: string, duration: number = 800): void {
      const chars = 'abcdefghijkstuvwxyzABCDEFGHWXYZ01234!@#$%&*:.?';
      let i = 0;
      const stepMs = 30;
      const maxSteps = Math.ceil(duration / stepMs);

      const timer = setInterval(() => {
        const progress = Math.min(i / maxSteps, 1);
        const reveal = Math.floor(progress * originalText.length);

        element.textContent = originalText
          .split('')
          .map((_ch: string, idx: number) => (idx < reveal ? originalText[idx] : chars[Math.floor(Math.random() * chars.length)]))
          .join('');

        i++;
        if (progress >= 1) {
          clearInterval(timer);
          element.textContent = originalText; // ensure final
        }
      }, stepMs);
    }

    // Scramble only the .scramble-part children; never touch icons/components
    function scrambleContainer(container: HTMLElement): void {
      const parts = container.querySelectorAll('.scramble-part');
      if (parts.length) {
        parts.forEach((part: Element, idx: number) => {
          const el = part as HTMLElement;
          const txt = el.textContent || '';
          const delay = idx * 200;
          if (!txt.trim()) return;
          setTimeout(() => scrambleText(el, txt), delay);
        });
      } else {
        // fallback: if no .scramble-part, scramble the element text safely
        const txt = container.dataset.text || container.textContent || '';
        if (!txt.trim()) return;
        // Only scramble if the element has no child elements (avoid nuking icons)
        if (container.children.length === 0) {
          scrambleText(container, txt);
        }
      }
    }

    // Initialize footer functionality with a small delay to ensure CSS variables are loaded
    setTimeout(() => {
      calculateAndDisplayFooterContrast();
      updateMotionPreference();
    }, 100);

    // Listen for theme changes
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' &&
            (mutation.attributeName === 'data-theme' || mutation.attributeName === 'class')) {
          setTimeout(calculateAndDisplayFooterContrast, 100);
        }
      });
    });

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['data-theme', 'class']
    });

    // Listen for motion preference changes
    const motionMediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
    motionMediaQuery.addEventListener('change', updateMotionPreference);

    // Intersection Observer: run once when footer enters viewport
    const scrambleObserver = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry: IntersectionObserverEntry) => {
        if (entry.isIntersecting && !footerAnimated) {
          footerAnimated = true;
          const elements = document.querySelectorAll('.scramble-text');
          elements.forEach((el: Element, idx: number) => {
            setTimeout(() => scrambleContainer(el as HTMLElement), idx * 50);
          });
          scrambleObserver.disconnect();
        }
      });
    }, { threshold: 0.1, rootMargin: '50px' });

    const footer = document.querySelector('footer');
    if (footer) scrambleObserver.observe(footer);
  }

  // Initialize on first load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initFooter);
  } else {
    initFooter();
  }

  // Re-initialize on page transitions
  document.addEventListener('astro:page-load', initFooter);
</script>

<style>
 .text-body-mono {
        font-family: var(--font-mono);
        font-size: var(--fs-body);
        line-height: var(--lh-normal);
    }
</style>
