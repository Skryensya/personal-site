---
// --- INTERFACES Y PROPS ---
interface Props {
  title?: string;
  content?: string;
  corners?: {
    topLeft?: number;
    topRight?: number;
    bottomLeft?: number;
    bottomRight?: number;
  };
}

// --- VALORES POR DEFECTO ---
const {
  title = "Card Title",
  content = "lorem ipsum dolorum amedeus palaris puticos lorem ipsum dolorum amedeus palaris puticos ",
  corners: customCorners = {},
} = Astro.props;

const defaultCorners = {
  topLeft: 80, // Tamaño de esquina por defecto en píxeles
  topRight: 120,
  bottomLeft: 10,
  bottomRight: 200,
};
const corners = { ...defaultCorners, ...customCorners };

// --- LÓGICA CENTRALIZADA ---
// Se definen los datos de cada esquina para generar los elementos dinámicamente.
const cornerData = [
  { key: 'topLeft',     x: -1, y: -1, float: 'float-left',  position: 'top-0 left-0' },
  { key: 'topRight',    x:  1, y: -1, float: 'float-right', position: 'top-0 right-0' },
  { key: 'bottomLeft',  x: -1, y:  1, float: 'float-left',  position: 'bottom-0 left-0' },
  { key: 'bottomRight', x:  1, y:  1, float: 'float-right', position: 'bottom-0 right-0' },
].map(config => {
  const size = corners[config.key as keyof typeof corners] || 0;
  return {
    ...config,
    size,
    // El tamaño del espaciador que empuja el texto.
    spacerSize: Math.round(size * 0.35),
  };
});
---

<div class="relative w-full  bg-transparent overflow-hidden">

  <div class="px-4 py-2 flow-root border border-main">
    
    {cornerData.map(corner => (
      corner.size > 0 && (
        <div
          class={corner.float}
          style={`width: ${corner.spacerSize}px; height: ${corner.spacerSize}px;`}
        ></div>
      )
    ))}

    <h3 class="text-4xl font-bold mb-4">{title}</h3>
    <div class="text-main/90">
      {content && <p>{content}</p>}
      <slot />
    </div>
  </div>

  {cornerData.map(corner => (
    corner.size > 0 && (
      <div
        class:list={["absolute aspect-square bg-secondary border border-main", corner.position]}
        style={`
          --size: ${corner.size}px;
          width: var(--size);
          /* 3. La transformación es la parte más importante y delicada. */
          transform: 
            translateX(calc(var(--size) / 2 * ${corner.x})) 
            translateY(calc(var(--size) / 2 * ${corner.y})) 
            rotate(45deg);
        `}
      >
      </div>
    )
  ))}
</div>