---
import NavLink from './NavLink.astro';
import ThemeToggle from './ThemeToggle.astro';
import siteConfig from '../data/site-config';
const navLinks = siteConfig.headerNavLinks || [];
---

<nav class="border-b border-main/20">
    <div class="max-w-4xl mx-auto px-6">
        <div class="flex justify-between items-center h-16">
            <a href="/" class="font-medium text-main">
                Allison Pe√±a
            </a>

            <div class="flex items-center space-x-6">
                <div class="hidden md:flex items-center space-x-6">
                    {navLinks.map((link) => (
                        <NavLink
                            class="text-main/70 hover:text-main transition-colors"
                            href={link.href}
                            download={link.download}
                        >
                            {link.text}
                        </NavLink>
                    ))}
                </div>
                <ThemeToggle />
                {navLinks.length > 0 && (
                    <button
                        class="menu-toggle md:hidden"
                        aria-label="Open Menu"
                        aria-expanded="false"
                        aria-controls="menu-items"
                    >
                        <span class="menu-toggle-icon w-6 h-px relative bg-current" />
                    </button>
                )}
            </div>
        </div>

        {navLinks.length > 0 && (
            <div id="menu-items" class="menu md:hidden">
                <div class="py-2 space-y-1 border-t border-main/20">
                    {navLinks.map((link) => (
                        <NavLink
                            class="block py-2 text-main/70 hover:text-main transition-colors"
                            href={link.href}
                            download={link.download}
                        >
                            {link.text}
                        </NavLink>
                    ))}
                </div>
            </div>
        )}
    </div>
</nav>

<style>
    .menu {
        @apply hidden;
    }
    .menu.is-visible {
        @apply block;
    }
    .menu-toggle.is-active .menu-toggle-icon {
        @apply w-0;
    }
    .menu-toggle-icon:before,
    .menu-toggle-icon:after {
        @apply w-6 h-px absolute left-1/2 top-0 origin-center -translate-x-1/2 bg-current;
        content: '';
    }
    .menu-toggle-icon:before {
        @apply -mt-1.5;
    }
    .menu-toggle-icon:after {
        @apply mt-1.5;
    }
    .menu-toggle.is-active .menu-toggle-icon:before,
    .menu-toggle.is-active .menu-toggle-icon:after {
        @apply mt-0;
    }
    .menu-toggle.is-active .menu-toggle-icon:before {
        @apply rotate-45;
    }
    .menu-toggle.is-active .menu-toggle-icon:after {
        @apply -rotate-45;
    }
</style>

<script>
    function menuToggle(): void {
      const menu: HTMLElement | null = document.querySelector('.menu');
      const menuToggleBtn: HTMLElement | null = document.querySelector('.menu-toggle');
      const body: HTMLElement | null = document.querySelector('body');
      if(!body) return
  
      menuToggleBtn?.addEventListener('click', () => {
        const isMenuExpanded: boolean = menuToggleBtn.getAttribute('aria-expanded') === 'true';
  
        menuToggleBtn.classList.toggle('is-active');
        menuToggleBtn.setAttribute('aria-expanded', isMenuExpanded ? 'false' : 'true');
        menuToggleBtn.setAttribute('aria-label', isMenuExpanded ? 'Open Menu' : 'Close Menu');
        menu?.classList.toggle('is-visible');
  
        body.style.overflow = isMenuExpanded ? '' : 'hidden'; 
      });
  
      document.addEventListener('click', (event: MouseEvent) => {
        const target: EventTarget | null = event.target;
  
        if (!(target instanceof Node)) return;
  
        const isClickInsideMenu: boolean = menu?.contains(target) || false;
        const isClickInsideToggleBtn: boolean = menuToggleBtn?.contains(target) || false;
  
        if (!isClickInsideMenu && !isClickInsideToggleBtn && menu?.classList.contains('is-visible')) {
          menuToggleBtn?.classList.remove('is-active');
          menuToggleBtn?.setAttribute('aria-expanded', 'false');
          menuToggleBtn?.setAttribute('aria-label', 'Open Menu');
          menu?.classList.remove('is-visible');
          body.style.overflow = ''; 
        }
      });
    }
  
    menuToggle();
  
    document.addEventListener('astro:after-swap', menuToggle);
  </script>

