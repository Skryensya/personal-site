--- 
import { themes } from '../data/themes.js';
import HeaderControls from './HeaderControls.tsx';

const navItems = [
  { label: 'ALLISON PEÃ‘A', href: '/', hotkey: null },
  { label: 'PROJECTS', href: '/projects', hotkey: 'p' },
  { label: 'BLOG', href: '/_blog', hotkey: 'b' },
  { label: 'ABOUT', href: '/about', hotkey: 'a' },
  { label: 'CONTACT', href: '/contact', hotkey: 'c' }
];

---

 
<header class="sticky top-4 z-[100] flex justify-center">
  <div class="max-w-[1280px] w-full px-4">
    <div class="flex items-start justify-between gap-2 flex-nowrap diagonal-stripe px-4 py-2">
      <div class="flex items-start gap-x-2 gap-y-1 flex-wrap w-4/5">
        {navItems.map((item) => (
          <a 
            href={item.href}
            class="flex items-center gap-1.5 px-2 py-1 h-7 md:h-8 bg-secondary border border-main font-grotesk text-sm !font-thin text-main no-underline pointer-events-auto hover:bg-main hover:text-secondary active:bg-main active:text-secondary nav-link"
            data-hotkey={item.hotkey}
            aria-label={item.hotkey ? `${item.label} (Press ${item.hotkey.toUpperCase()})` : item.label}
          >
            {item.hotkey && <span class="text-xs font-bold font-mono">[{item.hotkey.toUpperCase()}]</span>}
            <span class="font-semibold">{item.label}</span>
          </a>
        ))}
      </div>

      <HeaderControls themes={themes} client:idle />
    </div>
  
  </header>
  

 

<script>
  // Keep only navigation keyboard shortcuts
  document.addEventListener('astro:page-load', () => {
    // Navigation elements
    const navLinks = document.querySelectorAll('.nav-link');
    const currentPath = window.location.pathname;

    // Navigation: Set active state based on current page
    navLinks.forEach(link => {
      const href = link.getAttribute('href');
      if (href && (href === currentPath || (currentPath.startsWith(href) && href !== '/'))) {
        link.classList.add('!bg-main', '!text-secondary');
      }
      
      // Prevent default click behavior and handle on mouseup
      link.addEventListener('click', (e: Event) => {
        e.preventDefault();
      });
      
      link.addEventListener('mouseup', () => {
        const href = link.getAttribute('href');
        if (href) {
          window.location.href = href;
        }
      });
    });

    // Keyboard navigation for main nav only
    function handleKeydown(e: KeyboardEvent) {
      // Only trigger if not typing in an input
      const target = e.target as HTMLElement;
      if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') return;
      
      const key = e.key.toLowerCase();
      const navLink = document.querySelector(`[data-hotkey="${key}"]`) as HTMLElement;
      
      if (navLink && navLink.dataset.hotkey && !e.ctrlKey && !e.metaKey && !e.altKey) {
        e.preventDefault();
        
        // Visual feedback
        navLink.classList.add('!bg-main', '!text-secondary');
        setTimeout(() => {
          navLink.classList.remove('!bg-main', '!text-secondary');
        }, 150);
        
        // Navigate
        const href = navLink.getAttribute('href');
        if (href) {
          window.location.href = href;
        }
      }
    }

    document.addEventListener('keydown', handleKeydown);
  });
</script>

<style>
  /* Theme previews using CSS variables */
  .void-preview { 
    background: linear-gradient(45deg, var(--void-colorful) 50%, var(--void-contrasty) 50%); 
    border-color: var(--void-contrasty) !important;
  }
  .phantom-preview { 
    background: linear-gradient(45deg, var(--phantom-colorful) 50%, var(--phantom-contrasty) 50%); 
    border-color: var(--phantom-contrasty) !important;
  }
  .azure-preview { 
    background: linear-gradient(45deg, var(--azure-colorful) 50%, var(--azure-contrasty) 50%); 
    border-color: var(--azure-contrasty) !important;
  }
  .ember-preview { 
    background: linear-gradient(45deg, var(--ember-colorful) 50%, var(--ember-contrasty) 50%); 
    border-color: var(--ember-contrasty) !important;
  }
  .violet-preview { 
    background: linear-gradient(45deg, var(--violet-colorful) 50%, var(--violet-contrasty) 50%); 
    border-color: var(--violet-contrasty) !important;
  }
  .crimson-preview { 
    background: linear-gradient(45deg, var(--crimson-colorful) 50%, var(--crimson-contrasty) 50%); 
    border-color: var(--crimson-contrasty) !important;
  }
  .forest-preview { 
    background: linear-gradient(45deg, var(--forest-colorful) 50%, var(--forest-contrasty) 50%); 
    border-color: var(--forest-contrasty) !important;
  }

  /* Mode icon states */
  html:not(.dark) .sun-icon {
    opacity: 1;
  }

  html:not(.dark) .moon-icon {
    opacity: 0;
  }

  html.dark .sun-icon {
    opacity: 0;
  }

  html.dark .moon-icon {
    opacity: 1;
  }

  .system-icon {
    opacity: 0;
  }

 

  /* Hide hotkeys on mobile devices */
  @media (max-width: 768px) {
    /* Hide navigation hotkeys */
    .nav-link .text-xs.font-bold.font-mono {
      display: none;
    }
    
    /* Hide theme dropdown hotkeys */
    .theme-dropdown .border-t.border-main {
      display: none;
    }
  }
</style>