--- 
import { themes } from '../data/themes.js';

const navItems = [
  { label: 'ALLISON PEÑA', href: '/', hotkey: null },
  { label: 'PROJECTS', href: '/projects', hotkey: 'p' },
  { label: 'BLOG', href: '/_blog', hotkey: 'b' },
  { label: 'ABOUT', href: '/about', hotkey: 'a' },
  { label: 'CONTACT', href: '/contact', hotkey: 'c' }
];
---

 
<header class="sticky top-4 z-[100] flex justify-center">
  <div class="max-w-[1280px] w-full px-4 ">
    <div class="flex items-start justify-between gap-2 flex-nowrap diagonal-stripe px-4 py-2">
      <div class="flex items-start gap-x-2 gap-y-1 flex-wrap w-4/5">
        {navItems.map((item) => (
          <a 
            href={item.href}
            class="flex items-center gap-1.5 px-2 py-1 h-7 md:h-8 bg-secondary border border-main font-grotesk text-sm !font-thin text-main no-underline pointer-events-auto hover:bg-main hover:text-secondary active:bg-main active:text-secondary nav-link"
            data-hotkey={item.hotkey}
            aria-label={item.hotkey ? `${item.label} (Press ${item.hotkey.toUpperCase()})` : item.label}
          >
            {item.hotkey && <span class="text-xs font-bold font-mono">[{item.hotkey.toUpperCase()}]</span>}
            <span class="font-semibold">{item.label}</span>
          </a>
        ))}
      </div>

      <div class="flex flex-col md:flex-row items-center gap-1 pointer-events-auto">
        <!-- Mode Toggle -->
        <button id="mode-toggle" class="w-7 h-7 md:w-auto md:h-8 border border-main bg-secondary flex items-center justify-center hover:bg-main group md:px-2 md:gap-2" aria-label="Cambiar modo">
          <!-- Icon container with fixed size -->
          <div class="w-3.5 h-3.5 relative flex-shrink-0">
            <!-- Sun icon for light mode -->
            <svg class="w-3.5 h-3.5 text-main absolute inset-0  duration-150 group-hover:text-secondary sun-icon" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="5"/>
              <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/>
            </svg>
            
            <!-- Moon icon for dark mode -->
            <svg class="w-3.5 h-3.5 text-main absolute inset-0  duration-150 group-hover:text-secondary moon-icon opacity-0" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24">
              <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
            </svg>
          </div>
          
          <!-- Text labels for desktop -->
          <span class="hidden md:block font-mono text-xs font-semibold text-main group-hover:text-secondary mode-text">LIGHT</span>
        </button>

        <!-- Theme Selector -->
        <div class="relative theme-selector">
          <button 
            id="theme-toggle" 
            class="w-7 h-7 md:w-auto md:h-8 border border-main bg-secondary flex items-center justify-center hover:bg-main md:px-2 md:gap-2 group" 
            aria-label="Cambiar tema"
            aria-haspopup="true"
            aria-expanded="false"
          >
            <div class="w-4 h-4 border border-main theme-preview-current void-preview md:flex-shrink-0"></div>
            <span class="hidden md:block font-mono text-xs font-semibold text-main group-hover:text-secondary theme-name-text">TEMAS</span>
          </button>
          
          <div 
            id="theme-dropdown" 
            class="fixed bg-secondary border border-main opacity-0 invisible transform scale-95  duration-200 z-[999] theme-dropdown rounded-none"
            role="menu"
            aria-labelledby="theme-toggle"
          >
            <div class="grid gap-0">
              {themes.map((theme) => {
                return (
                  <div 
                    class="flex items-center gap-2 p-1 cursor-pointer font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap border-b border-main last:border-b-0"
                    data-theme={theme.id}
                    role="menuitem"
                    tabindex="-1"
                  >
                    <div 
                      class="w-3 h-3 border border-main flex-shrink-0 theme-preview-sample"
                      style={theme.id === 'custom' ? '' : `background: linear-gradient(135deg, ${theme.colorful} 50%, ${theme.contrasty} 50%)`}
                      data-custom-header-preview={theme.id === 'custom' ? 'true' : 'false'}
                    >
                      {theme.id === 'custom' && (
                        <div class="w-full h-full flex items-center justify-center text-[8px] font-bold">⚙</div>
                      )}
                    </div>
                    <span class="flex-1 px-1">{theme.name}</span>
                    <span class="opacity-0 theme-checkmark text-xs">✓</span>
                  </div>
                );
              })}
            </div>
            <div class="border-t border-main bg-main p-1 flex justify-between items-center gap-1 font-mono text-xs font-semibold text-secondary">
              <button class="hover:text-main hover:bg-secondary px-1 py-0.5" data-hotkey="[">PREV [</button>
              <button class="hover:text-main hover:bg-secondary px-1 py-0.5" data-hotkey="]">NEXT ]</button>
              <button class="hover:text-main hover:bg-secondary px-1 py-0.5" data-hotkey="_">RANDOM _</button>
            </div>
          </div>
        </div>

    </div>
    </div>
  
  </header>
  

 

<script>
  import { applyTheme, loadThemeFromStorage } from '../data/themes.js';
  
  document.addEventListener('astro:page-load', () => {
    // Navigation elements
    const navLinks = document.querySelectorAll('.nav-link');
    const currentPath = window.location.pathname;

    // Theme elements
    const themeToggle = document.getElementById('theme-toggle');
    const themeDropdown = document.querySelector('.theme-dropdown');
    const themeOptions = document.querySelectorAll('.theme-option');
    const modeToggle = document.getElementById('mode-toggle');
    const currentThemePreview = document.querySelector('.theme-preview-current');
    const themeNameText = document.querySelector('.theme-name-text');
    const modeText = document.querySelector('.mode-text');
    // Load saved settings
    const savedTheme = localStorage.getItem('theme') || 'void';
    const savedMode = localStorage.getItem('mode') || 'light';
    
    let lastThemeChange = 0;
    const themeChangeDelay = 150; // milliseconds
    
    applyTheme(savedTheme);
    applyMode(savedMode);
    // Apply CRT effect permanently
    document.documentElement.classList.add('crt-effect');
    updateActiveThemeOption(savedTheme);
    updateCurrentThemePreview(savedTheme);

    // Get all theme names from data attributes
    const allThemes = Array.from(themeOptions).map(option => (option as HTMLElement).dataset.theme).filter(Boolean);
    let currentThemeIndex = allThemes.indexOf(savedTheme);

    // Navigation: Set active state based on current page
    navLinks.forEach(link => {
      const href = link.getAttribute('href');
      if (href && (href === currentPath || (currentPath.startsWith(href) && href !== '/'))) {
        link.classList.add('!bg-main', '!text-secondary');
      }
      
      // Prevent default click behavior and handle on mouseup
      link.addEventListener('click', (e: Event) => {
        e.preventDefault();
      });
      
      link.addEventListener('mouseup', () => {
        const href = link.getAttribute('href');
        if (href) {
          window.location.href = href;
        }
      });
    });

    // Mode toggle (dark/light)
    modeToggle?.addEventListener('click', () => {
      const isDark = document.documentElement.classList.contains('dark');
      const newMode = isDark ? 'light' : 'dark';
      applyMode(newMode);
      localStorage.setItem('mode', newMode);
    });


    // Theme dropdown functionality
    let isDropdownOpen = false;

    function positionDropdown() {
      if (!themeToggle || !themeDropdown) return;
      
      const toggleRect = themeToggle.getBoundingClientRect();
      const dropdownRect = themeDropdown.getBoundingClientRect();
      const viewportWidth = window.innerWidth;
      const viewportHeight = window.innerHeight;
      
      // Reset position to measure natural size
      (themeDropdown as HTMLElement).style.left = '';
      (themeDropdown as HTMLElement).style.right = '';
      (themeDropdown as HTMLElement).style.top = '';
      (themeDropdown as HTMLElement).style.bottom = '';
      
      let left = toggleRect.left;
      let top = toggleRect.bottom + 4;
      
      // Estimate dropdown size (compact version)
      const dropdownWidth = 200; // More compact width
      const dropdownHeight = 400; // Approximate height for all themes
      
      // Adjust horizontal position if dropdown would overflow viewport
      if (left + dropdownWidth > viewportWidth - 8) {
        left = toggleRect.right - dropdownWidth;
      }
      
      // Ensure dropdown doesn't go off left edge
      if (left < 8) {
        left = 8;
      }
      
      // Adjust vertical position if dropdown would overflow viewport
      if (top + dropdownHeight > viewportHeight - 8) {
        top = toggleRect.top - dropdownHeight - 4;
      }
      
      // Ensure dropdown doesn't go off top edge
      if (top < 8) {
        top = 8;
      }
      
      (themeDropdown as HTMLElement).style.left = `${left}px`;
      (themeDropdown as HTMLElement).style.top = `${top}px`;
    }

    function openDropdown() {
      if (!themeToggle || !themeDropdown) return;
      
      isDropdownOpen = true;
      themeToggle.setAttribute('aria-expanded', 'true');
      positionDropdown();
      
      themeDropdown.classList.remove('opacity-0', 'invisible', 'scale-95');
      themeDropdown.classList.add('opacity-100', 'visible', 'scale-100');
      
      // Focus first theme option for keyboard navigation
      const firstOption = themeDropdown.querySelector('.theme-option');
      if (firstOption) {
        (firstOption as HTMLElement).focus();
      }
    }

    function closeDropdown() {
      if (!themeToggle || !themeDropdown) return;
      
      isDropdownOpen = false;
      themeToggle.setAttribute('aria-expanded', 'false');
      
      themeDropdown.classList.remove('opacity-100', 'visible', 'scale-100');
      themeDropdown.classList.add('opacity-0', 'invisible', 'scale-95');
    }

    // Theme dropdown toggle
    themeToggle?.addEventListener('click', (e: Event) => {
      e.stopPropagation();
      if (isDropdownOpen) {
        closeDropdown();
      } else {
        openDropdown();
      }
    });

    // Handle theme selection
    themeOptions.forEach(option => {
      option.addEventListener('click', (e: Event) => {
        e.stopPropagation();
        const theme = (option as HTMLElement).dataset.theme;
        if (theme) {
          if (theme === 'custom') {
            // Check if we have saved custom colors in localStorage
            const hasCustomColors = localStorage.getItem('custom-theme-colors') !== null;
            const currentMode = document.documentElement.classList.contains('dark');
            
            if (!hasCustomColors) {
              // No custom colors saved, use defaults and apply immediately
              const defaultCustomColors = { colorful: '#3b82f6', contrasty: '#1e293b', name: 'CUSTOM' };
              applyTheme('custom', currentMode, defaultCustomColors);
              localStorage.setItem('theme-id', 'custom');
              localStorage.setItem('theme', 'custom'); // Keep both for compatibility
            } else {
              // Custom colors exist, apply them  
              const { customColors } = loadThemeFromStorage();
              applyTheme('custom', currentMode, customColors);
              localStorage.setItem('theme-id', 'custom');
              localStorage.setItem('theme', 'custom'); // Keep both for compatibility
            }
            updateActiveThemeOption(theme);
            updateCurrentThemePreview(theme);
            currentThemeIndex = allThemes.indexOf(theme);
          } else {
            const currentMode = document.documentElement.classList.contains('dark');
            applyTheme(theme, currentMode);
            localStorage.setItem('theme-id', theme);
            localStorage.setItem('theme', theme); // Keep both for compatibility
            updateActiveThemeOption(theme);
            updateCurrentThemePreview(theme);
            currentThemeIndex = allThemes.indexOf(theme);
          }
          closeDropdown();
        }
      });
      
      // Keyboard navigation for menu items
      option.addEventListener('keydown', (e: Event) => {
        const keyEvent = e as KeyboardEvent;
        if (keyEvent.key === 'Enter' || keyEvent.key === ' ') {
          keyEvent.preventDefault();
          (option as HTMLElement).click();
        } else if (keyEvent.key === 'Escape') {
          closeDropdown();
          themeToggle?.focus();
        } else if (keyEvent.key === 'ArrowDown') {
          keyEvent.preventDefault();
          const next = option.nextElementSibling as HTMLElement;
          if (next && next.classList.contains('theme-option')) {
            next.focus();
          }
        } else if (keyEvent.key === 'ArrowUp') {
          keyEvent.preventDefault();
          const prev = option.previousElementSibling as HTMLElement;
          if (prev && prev.classList.contains('theme-option')) {
            prev.focus();
          }
        }
      });
    });

    // Close dropdown when clicking outside or pressing Escape
    document.addEventListener('click', () => {
      closeDropdown();
    });

    document.addEventListener('keydown', (e: KeyboardEvent) => {
      if (e.key === 'Escape' && isDropdownOpen) {
        closeDropdown();
        themeToggle?.focus();
      }
    });

    // Reposition dropdown on window resize
    window.addEventListener('resize', () => {
      if (isDropdownOpen) {
        positionDropdown();
      }
    });

    // Keyboard navigation
    function handleKeydown(e: KeyboardEvent) {
      // Only trigger if not typing in an input
      const target = e.target as HTMLElement;
      if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') return;
      
      const key = e.key.toLowerCase();
      const navLink = document.querySelector(`[data-hotkey="${key}"]`) as HTMLElement;
      
      if (navLink && navLink.dataset.hotkey && !e.ctrlKey && !e.metaKey && !e.altKey) {
        e.preventDefault();
        
        // Visual feedback
        navLink.classList.add('!bg-main', '!text-secondary');
        setTimeout(() => {
          navLink.classList.remove('!bg-main', '!text-secondary');
        }, 150);
        
        // Navigate
        const href = navLink.getAttribute('href');
        if (href) {
          window.location.href = href;
        }
      }

      // Theme hotkeys with throttling
      const currentTime = Date.now();
      if (currentTime - lastThemeChange < themeChangeDelay) {
        return; // Throttle rapid key presses
      }

      if (key === '[') { // Previous theme
        currentThemeIndex = (currentThemeIndex - 1 + allThemes.length) % allThemes.length;
        const newTheme = allThemes[currentThemeIndex];
        if (newTheme) {
          applyTheme(newTheme);
          localStorage.setItem('theme', newTheme);
          updateActiveThemeOption(newTheme);
          updateCurrentThemePreview(newTheme);
          lastThemeChange = currentTime;
        }
      } else if (key === ']') { // Next theme
        currentThemeIndex = (currentThemeIndex + 1) % allThemes.length;
        const newTheme = allThemes[currentThemeIndex];
        if (newTheme) {
          applyTheme(newTheme);
          localStorage.setItem('theme', newTheme);
          updateActiveThemeOption(newTheme);
          updateCurrentThemePreview(newTheme);
          lastThemeChange = currentTime;
        }
      } else if (key === '_') { // Random theme
        let randomIndex = currentThemeIndex;
        while (randomIndex === currentThemeIndex) {
          randomIndex = Math.floor(Math.random() * allThemes.length);
        }
        currentThemeIndex = randomIndex;
        const newTheme = allThemes[currentThemeIndex];
        if (newTheme) {
          applyTheme(newTheme);
          localStorage.setItem('theme', newTheme);
          updateActiveThemeOption(newTheme);
          updateCurrentThemePreview(newTheme);
          lastThemeChange = currentTime;
        }
      }
    }

    document.addEventListener('keydown', handleKeydown);

    // Theme functions
    function applyTheme(theme: string) {
      document.documentElement.setAttribute('data-theme', theme);
    }

    function applyMode(mode: string) {
      document.documentElement.classList.toggle('dark', mode === 'dark');
      
      // Update icon visibility
      const sunIcon = document.querySelector('.sun-icon');
      const moonIcon = document.querySelector('.moon-icon');
      
      if (mode === 'dark') {
        sunIcon?.classList.add('opacity-0');
        sunIcon?.classList.remove('opacity-100');
        moonIcon?.classList.add('opacity-100');
        moonIcon?.classList.remove('opacity-0');
        if (modeText) modeText.textContent = 'DARK';
      } else {
        sunIcon?.classList.add('opacity-100');
        sunIcon?.classList.remove('opacity-0');
        moonIcon?.classList.add('opacity-0');
        moonIcon?.classList.remove('opacity-100');
        if (modeText) modeText.textContent = 'LIGHT';
      }
    }

    function updateActiveThemeOption(theme: string) {
      themeOptions.forEach(option => {
        const checkmark = option.querySelector('.theme-checkmark');
        if ((option as HTMLElement).dataset.theme === theme) {
          option.classList.add('!bg-main', '!text-secondary');
          checkmark?.classList.remove('opacity-0');
          checkmark?.classList.add('opacity-100');
        } else {
          option.classList.remove('!bg-main', '!text-secondary');
          checkmark?.classList.remove('opacity-100');
          checkmark?.classList.add('opacity-0');
        }
      });
    }

    function updateCurrentThemePreview(theme: string) {
      if (currentThemePreview) {
        currentThemePreview.className = `w-4 h-4 border border-main theme-preview-current ${theme}-preview md:flex-shrink-0`;
      }
      // Update theme name text
      if (themeNameText) {
        // Get theme name from themes data or fallback to uppercase theme key
        const themeName = getThemeName(theme);
        themeNameText.textContent = themeName;
      }
    }
    
    function getThemeName(theme: string): string {
      // Get theme name from imported themes data
      const themesModule = typeof window !== 'undefined' && (window as any).themes;
      if (themesModule && themesModule[theme]) {
        return themesModule[theme].name;
      }
      
      // Fallback theme names for current themes
      const themeNames: Record<string, string> = {
        'void': 'VOID',
        'phantom': 'PHANTOM',
        'bloom': 'BLOOM',
        'crimson': 'CRIMSON',
        'azure': 'AZURE',
        'volt': 'VOLT',
        'forest': 'FOREST',
        'ember': 'EMBER',
        'flame': 'FLAME',
        'violet': 'VIOLET',
        'plasma': 'PLASMA',
        'solar': 'SOLAR',
        'frost': 'FROST',
        'neon': 'NEON',
        'pulse': 'PULSE',
        'prism': 'PRISM'
      };
      return themeNames[theme] || theme.toUpperCase();
    }



    // Show hotkey hints on first visit
    const hasSeenHints = localStorage.getItem('nav-hints-seen');
    if (!hasSeenHints) {
      setTimeout(() => {
        const hints = document.createElement('div');
        hints.innerHTML = `
          <div style="
            position: fixed; 
            top: 50%; 
            left: 50%; 
            transform: translate(-50%, -50%); 
            background: rgba(0,0,0,0.9); 
            color: white; 
            padding: 1rem; 
            border-radius: 8px; 
            font-size: 0.875rem;
            z-index: 1000;
            backdrop-filter: blur(10px);
          ">
            💡 Tip: Use keyboard shortcuts to navigate (P, B, A, C)
            <button onclick="this.parentElement.parentElement.remove(); localStorage.setItem('nav-hints-seen', 'true')" 
                    style="margin-left: 1rem; padding: 0.25rem 0.5rem; background: transparent; border: 1px solid white; color: white; border-radius: 4px; cursor: pointer;">
              Got it
            </button>
          </div>
        `;
        document.body.appendChild(hints);
      }, 2000);
    }
  });
</script>

<style>
  /* Theme previews using CSS variables */
  .void-preview { 
    background: linear-gradient(45deg, var(--void-colorful) 50%, var(--void-contrasty) 50%); 
    border-color: var(--void-contrasty) !important;
  }
  .phantom-preview { 
    background: linear-gradient(45deg, var(--phantom-colorful) 50%, var(--phantom-contrasty) 50%); 
    border-color: var(--phantom-contrasty) !important;
  }
  .azure-preview { 
    background: linear-gradient(45deg, var(--azure-colorful) 50%, var(--azure-contrasty) 50%); 
    border-color: var(--azure-contrasty) !important;
  }
  .ember-preview { 
    background: linear-gradient(45deg, var(--ember-colorful) 50%, var(--ember-contrasty) 50%); 
    border-color: var(--ember-contrasty) !important;
  }
  .violet-preview { 
    background: linear-gradient(45deg, var(--violet-colorful) 50%, var(--violet-contrasty) 50%); 
    border-color: var(--violet-contrasty) !important;
  }
  .crimson-preview { 
    background: linear-gradient(45deg, var(--crimson-colorful) 50%, var(--crimson-contrasty) 50%); 
    border-color: var(--crimson-contrasty) !important;
  }
  .forest-preview { 
    background: linear-gradient(45deg, var(--forest-colorful) 50%, var(--forest-contrasty) 50%); 
    border-color: var(--forest-contrasty) !important;
  }

  /* Mode icon states */
  html:not(.dark) .sun-icon {
    opacity: 1;
  }

  html:not(.dark) .moon-icon {
    opacity: 0;
  }

  html.dark .sun-icon {
    opacity: 0;
  }

  html.dark .moon-icon {
    opacity: 1;
  }

  /* Improved dropdown styles */
  .theme-dropdown {
    backdrop-filter: blur(8px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }


  /* Focus styles for dropdown options */
  .theme-option:focus {
    outline: 2px solid var(--color-main);
    outline-offset: -2px;
    background: var(--color-main) !important;
    color: var(--color-secondary) !important;
  }

 

  /* Hide hotkeys on mobile devices */
  @media (max-width: 768px) {
    /* Hide navigation hotkeys */
    .nav-link .text-xs.font-bold.font-mono {
      display: none;
    }
    
    /* Hide theme dropdown hotkeys */
    .theme-dropdown .border-t.border-main {
      display: none;
    }
  }
</style>