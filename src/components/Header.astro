---
import DiagonalStripe from './DiagonalStripe.astro';

const navItems = [
  { label: 'ALLISON PEÃ‘A', href: '/', hotkey: null },
  { label: 'PROJECTS', href: '/projects', hotkey: 'p' },
  { label: 'BLOG', href: '/_blog', hotkey: 'b' },
  { label: 'ABOUT', href: '/about', hotkey: 'a' },
  { label: 'CONTACT', href: '/contact', hotkey: 'c' }
];
---

<div>
  <header class="fixed top-6 inset-x-16 z-[100] pointer-events-none">
    <div class="flex items-start justify-between gap-2 flex-nowrap">
      <div class="flex items-start gap-2 flex-wrap">
        {navItems.map((item) => (
          <a 
            href={item.href}
            class="flex items-center gap-1.5 px-2 py-1 h-8 bg-secondary border border-main font-grotesk text-sm font-semibold text-main no-underline pointer-events-auto hover:bg-main hover:text-secondary active:bg-main active:text-secondary nav-link"
            data-hotkey={item.hotkey}
            aria-label={item.hotkey ? `${item.label} (Press ${item.hotkey.toUpperCase()})` : item.label}
          >
            {item.hotkey && <span class="text-xs font-bold font-mono">[{item.hotkey.toUpperCase()}]</span>}
            <span class="font-semibold">{item.label}</span>
          </a>
        ))}
      </div>

      <div class="flex items-center gap-1 pointer-events-auto">
        <!-- Mode Toggle -->
        <button id="mode-toggle" class="w-8 h-8 border border-main bg-secondary flex items-center justify-center relative hover:bg-main group" aria-label="Cambiar modo">
          <!-- Sun icon for light mode -->
          <svg class="w-3.5 h-3.5 text-main absolute transition-opacity duration-150 group-hover:text-secondary sun-icon" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24">
            <circle cx="12" cy="12" r="5"/>
            <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/>
          </svg>
          
          <!-- Moon icon for dark mode -->
          <svg class="w-3.5 h-3.5 text-main absolute transition-opacity duration-150 group-hover:text-secondary moon-icon opacity-0" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24">
            <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
          </svg>
        </button>

        <!-- Theme Selector -->
        <div class="relative theme-selector">
          <button id="theme-toggle" class="w-8 h-8 border border-main bg-secondary flex items-center justify-center hover:bg-main" aria-label="Cambiar tema">
            <div class="w-3.5 h-3.5 border border-main theme-preview-current classic-preview"></div>
          </button>
          
          <div class="absolute top-full mt-1 right-0 bg-secondary border border-main p-2 opacity-0 invisible transform -translate-y-2 transition-all duration-150 z-[100] theme-dropdown grid grid-cols-4 gap-2 min-w-[520px]">
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="classic">
              <div class="w-3 h-3 border border-main flex-shrink-0 classic-preview"></div>
              <span>CLASSIC</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="terminal">
              <div class="w-3 h-3 border border-main flex-shrink-0 terminal-preview"></div>
              <span>TERMINAL</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="matrix">
              <div class="w-3 h-3 border border-main flex-shrink-0 matrix-preview"></div>
              <span>MATRIX</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="retro">
              <div class="w-3 h-3 border border-main flex-shrink-0 retro-preview"></div>
              <span>RETRO</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="sunset">
              <div class="w-3 h-3 border border-main flex-shrink-0 sunset-preview"></div>
              <span>SUNSET</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="ocean">
              <div class="w-3 h-3 border border-main flex-shrink-0 ocean-preview"></div>
              <span>OCEAN</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="forest">
              <div class="w-3 h-3 border border-main flex-shrink-0 forest-preview"></div>
              <span>FOREST</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="lavender">
              <div class="w-3 h-3 border border-main flex-shrink-0 lavender-preview"></div>
              <span>LAVENDER</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="crimson">
              <div class="w-3 h-3 border border-main flex-shrink-0 crimson-preview"></div>
              <span>CRIMSON</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="gold">
              <div class="w-3 h-3 border border-main flex-shrink-0 gold-preview"></div>
              <span>GOLD</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="mint">
              <div class="w-3 h-3 border border-main flex-shrink-0 mint-preview"></div>
              <span>MINT</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="royal">
              <div class="w-3 h-3 border border-main flex-shrink-0 royal-preview"></div>
              <span>ROYAL</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="rose">
              <div class="w-3 h-3 border border-main flex-shrink-0 rose-preview"></div>
              <span>ROSE</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="sky">
              <div class="w-3 h-3 border border-main flex-shrink-0 sky-preview"></div>
              <span>SKY</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="sand">
              <div class="w-3 h-3 border border-main flex-shrink-0 sand-preview"></div>
              <span>SAND</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="plum">
              <div class="w-3 h-3 border border-main flex-shrink-0 plum-preview"></div>
              <span>PLUM</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="peach">
              <div class="w-3 h-3 border border-main flex-shrink-0 peach-preview"></div>
              <span>PEACH</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="olive">
              <div class="w-3 h-3 border border-main flex-shrink-0 olive-preview"></div>
              <span>OLIVE</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="navy">
              <div class="w-3 h-3 border border-main flex-shrink-0 navy-preview"></div>
              <span>NAVY</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="mocha">
              <div class="w-3 h-3 border border-main flex-shrink-0 mocha-preview"></div>
              <span>MOCHA</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="lilac">
              <div class="w-3 h-3 border border-main flex-shrink-0 lilac-preview"></div>
              <span>LILAC</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="honey">
              <div class="w-3 h-3 border border-main flex-shrink-0 honey-preview"></div>
              <span>HONEY</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="grape">
              <div class="w-3 h-3 border border-main flex-shrink-0 grape-preview"></div>
              <span>GRAPE</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="emerald">
              <div class="w-3 h-3 border border-main flex-shrink-0 emerald-preview"></div>
              <span>EMERALD</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="denim">
              <div class="w-3 h-3 border border-main flex-shrink-0 denim-preview"></div>
              <span>DENIM</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="cherry">
              <div class="w-3 h-3 border border-main flex-shrink-0 cherry-preview"></div>
              <span>CHERRY</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="charcoal">
              <div class="w-3 h-3 border border-main flex-shrink-0 charcoal-preview"></div>
              <span>CHARCOAL</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option whitespace-nowrap" data-theme="rainbow">
              <div class="w-3 h-3 border border-main flex-shrink-0 rainbow-preview"></div>
              <span>RAINBOW</span>
            </div>
            <div class="col-span-4 bg-main border-t border-main p-2 flex justify-between items-center gap-2 font-mono text-xs font-semibold text-secondary">
              <span class="cursor-pointer hover:text-main hover:bg-secondary p-1" data-hotkey="[">PREV [</span>
              <span class="cursor-pointer hover:text-main hover:bg-secondary p-1" data-hotkey="]">NEXT ]</span>
              <span class="cursor-pointer hover:text-main hover:bg-secondary p-1" data-hotkey="_">RANDOM _</span>
            </div>
          </div>
        </div>

        <!-- CRT Toggle -->
        <button id="crt-toggle" class="w-8 h-8 border border-main bg-secondary flex items-center justify-center relative transition-all duration-150" aria-label="Toggle CRT effect">
          <!-- CRT Monitor Icon -->
          <svg class="w-5 h-6 text-main transition-colors duration-150" fill="none" stroke="currentColor" stroke-width="1.2" viewBox="0 0 24 24">
            <!-- Monitor screen (centered in button) -->
            <rect class="crt-screen" width="12" height="8" x="6" y="6" stroke="currentColor" fill="none" rx="0.5"/>
            <!-- Monitor bezel -->
            <rect width="13" height="9" x="5.5" y="5.5" stroke="currentColor" fill="none" stroke-width="0.8" opacity="0.6"/>
            <!-- Monitor base -->
            <rect width="6" height="1" x="9" y="16" fill="currentColor" rx="0.2"/>
            <!-- Monitor stand -->
            <rect width="1.5" height="2" x="11.25" y="14.5" fill="currentColor" rx="0.2"/>
            <!-- CRT Animation - scrolling scanlines inside screen -->
            <g class="crt-animation opacity-0 transition-opacity duration-150" clip-path="url(#screenClip)">
              <!-- Define clipping path for screen area -->
              <defs>
                <clipPath id="screenClip">
                  <rect width="12" height="8" x="6" y="6" rx="0.5"/>
                </clipPath>
              </defs>
              
              <!-- Scrolling scanlines -->
              <g class="scanline-group">
                <line x1="6.5" y1="7" x2="17.5" y2="7" stroke="rgba(255,255,255,0.3)" stroke-width="0.4">
                  <animateTransform attributeName="transform" type="translate" values="0,-2; 0,9" dur="1.5s" repeatCount="indefinite"/>
                </line>
                <line x1="6.5" y1="9" x2="17.5" y2="9" stroke="rgba(255,255,255,0.2)" stroke-width="0.4">
                  <animateTransform attributeName="transform" type="translate" values="0,-2; 0,9" dur="1.8s" repeatCount="indefinite"/>
                </line>
                <line x1="6.5" y1="11" x2="17.5" y2="11" stroke="rgba(255,255,255,0.25)" stroke-width="0.4">
                  <animateTransform attributeName="transform" type="translate" values="0,-2; 0,9" dur="1.3s" repeatCount="indefinite"/>
                </line>
                <line x1="6.5" y1="13" x2="17.5" y2="13" stroke="rgba(255,255,255,0.15)" stroke-width="0.4">
                  <animateTransform attributeName="transform" type="translate" values="0,-2; 0,9" dur="2s" repeatCount="indefinite"/>
                </line>
              </g>
            </g>
          </svg>
        </button>
    </div>
  </header>
  
  <DiagonalStripe height="120px" margin="16" />
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    // Navigation elements
    const navLinks = document.querySelectorAll('.nav-link');
    const currentPath = window.location.pathname;

    // Theme elements
    const themeToggle = document.getElementById('theme-toggle');
    const themeDropdown = document.querySelector('.theme-dropdown');
    const themeOptions = document.querySelectorAll('.theme-option');
    const modeToggle = document.getElementById('mode-toggle');
    const currentThemePreview = document.querySelector('.theme-preview-current');
    const crtToggle = document.getElementById('crt-toggle');

    // Load saved settings
    const savedTheme = localStorage.getItem('theme') || 'classic';
    const savedMode = localStorage.getItem('mode') || 'light';
    const savedCrt = localStorage.getItem('crt') === 'true';
    
    let lastThemeChange = 0;
    const themeChangeDelay = 150; // milliseconds
    
    applyTheme(savedTheme);
    applyMode(savedMode);
    applyCrt(savedCrt);
    updateActiveThemeOption(savedTheme);
    updateCurrentThemePreview(savedTheme);

    // Get all theme names
    const allThemes = Array.from(themeOptions).map(option => (option as HTMLElement).dataset.theme);
    let currentThemeIndex = allThemes.indexOf(savedTheme);

    // Navigation: Set active state based on current page
    navLinks.forEach(link => {
      const href = link.getAttribute('href');
      if (href && (href === currentPath || (currentPath.startsWith(href) && href !== '/'))) {
        link.classList.add('!bg-main', '!text-secondary');
      }
      
      // Prevent default click behavior and handle on mouseup
      link.addEventListener('click', (e: Event) => {
        e.preventDefault();
      });
      
      link.addEventListener('mouseup', () => {
        const href = link.getAttribute('href');
        if (href) {
          window.location.href = href;
        }
      });
    });

    // Mode toggle (dark/light)
    modeToggle?.addEventListener('click', () => {
      const isDark = document.documentElement.classList.contains('dark');
      const newMode = isDark ? 'light' : 'dark';
      applyMode(newMode);
      localStorage.setItem('mode', newMode);
    });

    // CRT effect toggle
    crtToggle?.addEventListener('click', () => {
      const hasCrt = document.documentElement.classList.contains('crt-effect');
      const newCrt = !hasCrt;
      applyCrt(newCrt);
      localStorage.setItem('crt', newCrt.toString());
    });

    // Theme dropdown toggle
    themeToggle?.addEventListener('click', (e: Event) => {
      e.stopPropagation();
      themeDropdown?.classList.toggle('opacity-0');
      themeDropdown?.classList.toggle('invisible');
      themeDropdown?.classList.toggle('-translate-y-2');
    });

    // Handle theme selection
    themeOptions.forEach(option => {
      option.addEventListener('click', (e: Event) => {
        e.stopPropagation();
        const theme = (option as HTMLElement).dataset.theme;
        if (theme) {
          applyTheme(theme);
          localStorage.setItem('theme', theme);
          updateActiveThemeOption(theme);
          updateCurrentThemePreview(theme);
          currentThemeIndex = allThemes.indexOf(theme);
          themeDropdown?.classList.add('opacity-0', 'invisible', '-translate-y-2');
        }
      });
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', () => {
      themeDropdown?.classList.add('opacity-0', 'invisible', '-translate-y-2');
    });

    // Keyboard navigation
    function handleKeydown(e: KeyboardEvent) {
      // Only trigger if not typing in an input
      const target = e.target as HTMLElement;
      if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') return;
      
      const key = e.key.toLowerCase();
      const navLink = document.querySelector(`[data-hotkey="${key}"]`) as HTMLElement;
      
      if (navLink && navLink.dataset.hotkey && !e.ctrlKey && !e.metaKey && !e.altKey) {
        e.preventDefault();
        
        // Visual feedback
        navLink.classList.add('!bg-main', '!text-secondary');
        setTimeout(() => {
          navLink.classList.remove('!bg-main', '!text-secondary');
        }, 150);
        
        // Navigate
        const href = navLink.getAttribute('href');
        if (href) {
          window.location.href = href;
        }
      }

      // Theme hotkeys with throttling
      const currentTime = Date.now();
      if (currentTime - lastThemeChange < themeChangeDelay) {
        return; // Throttle rapid key presses
      }

      if (key === '[') { // Previous theme
        currentThemeIndex = (currentThemeIndex - 1 + allThemes.length) % allThemes.length;
        const newTheme = allThemes[currentThemeIndex];
        applyTheme(newTheme);
        localStorage.setItem('theme', newTheme);
        updateActiveThemeOption(newTheme);
        updateCurrentThemePreview(newTheme);
        lastThemeChange = currentTime;
      } else if (key === ']') { // Next theme
        currentThemeIndex = (currentThemeIndex + 1) % allThemes.length;
        const newTheme = allThemes[currentThemeIndex];
        applyTheme(newTheme);
        localStorage.setItem('theme', newTheme);
        updateActiveThemeOption(newTheme);
        updateCurrentThemePreview(newTheme);
        lastThemeChange = currentTime;
      } else if (key === '_') { // Random theme
        let randomIndex = currentThemeIndex;
        while (randomIndex === currentThemeIndex) {
          randomIndex = Math.floor(Math.random() * allThemes.length);
        }
        currentThemeIndex = randomIndex;
        const newTheme = allThemes[currentThemeIndex];
        applyTheme(newTheme);
        localStorage.setItem('theme', newTheme);
        updateActiveThemeOption(newTheme);
        updateCurrentThemePreview(newTheme);
        lastThemeChange = currentTime;
      }
    }

    document.addEventListener('keydown', handleKeydown);

    // Theme functions
    function applyTheme(theme: string) {
      document.documentElement.setAttribute('data-theme', theme);
    }

    function applyMode(mode: string) {
      document.documentElement.classList.toggle('dark', mode === 'dark');
      
      // Update icon visibility
      const sunIcon = document.querySelector('.sun-icon');
      const moonIcon = document.querySelector('.moon-icon');
      
      if (mode === 'dark') {
        sunIcon?.classList.add('opacity-0');
        sunIcon?.classList.remove('opacity-100');
        moonIcon?.classList.add('opacity-100');
        moonIcon?.classList.remove('opacity-0');
      } else {
        sunIcon?.classList.add('opacity-100');
        sunIcon?.classList.remove('opacity-0');
        moonIcon?.classList.add('opacity-0');
        moonIcon?.classList.remove('opacity-100');
      }
    }

    function updateActiveThemeOption(theme: string) {
      themeOptions.forEach(option => {
        if ((option as HTMLElement).dataset.theme === theme) {
          option.classList.add('!bg-main', '!text-secondary');
        } else {
          option.classList.remove('!bg-main', '!text-secondary');
        }
      });
    }

    function updateCurrentThemePreview(theme: string) {
      if (currentThemePreview) {
        currentThemePreview.className = `w-3.5 h-3.5 border border-main theme-preview-current ${theme}-preview`;
      }
    }

    function applyCrt(enabled: boolean) {
      document.documentElement.classList.toggle('crt-effect', enabled);
      
      // Update button visual state
      if (crtToggle) {
        const screen = crtToggle.querySelector('.crt-screen');
        const animation = crtToggle.querySelector('.crt-animation');
        
        if (enabled) {
          // Active state: only fill the monitor screen, not the whole button
          screen?.setAttribute('fill', 'currentColor');
          animation?.classList.remove('opacity-0');
          animation?.classList.add('opacity-100');
        } else {
          // Inactive state: outline screen, no animation
          screen?.setAttribute('fill', 'none');
          animation?.classList.remove('opacity-100');
          animation?.classList.add('opacity-0');
        }
      }
    }

    // Show hotkey hints on first visit
    const hasSeenHints = localStorage.getItem('nav-hints-seen');
    if (!hasSeenHints) {
      setTimeout(() => {
        const hints = document.createElement('div');
        hints.innerHTML = `
          <div style="
            position: fixed; 
            top: 50%; 
            left: 50%; 
            transform: translate(-50%, -50%); 
            background: rgba(0,0,0,0.9); 
            color: white; 
            padding: 1rem; 
            border-radius: 8px; 
            font-size: 0.875rem;
            z-index: 1000;
            backdrop-filter: blur(10px);
          ">
            ðŸ’¡ Tip: Use keyboard shortcuts to navigate (P, B, A, C)
            <button onclick="this.parentElement.parentElement.remove(); localStorage.setItem('nav-hints-seen', 'true')" 
                    style="margin-left: 1rem; padding: 0.25rem 0.5rem; background: transparent; border: 1px solid white; color: white; border-radius: 4px; cursor: pointer;">
              Got it
            </button>
          </div>
        `;
        document.body.appendChild(hints);
      }, 2000);
    }
  });
</script>

<style>
  /* Theme previews */
  .classic-preview {
    background: linear-gradient(45deg, #000000 50%, #ffffff 50%);
  }

  .terminal-preview {
    background: linear-gradient(45deg, #0d1117 50%, #00ff41 50%);
  }

  .matrix-preview {
    background: linear-gradient(45deg, #000000 50%, #65ff00 50%);
  }

  .vscode-preview {
    background: linear-gradient(45deg, #1e1e1e 50%, #007acc 50%);
  }

  .hacker-preview {
    background: linear-gradient(45deg, #000000 50%, #ff6600 50%);
  }

  .cyber-preview {
    background: linear-gradient(45deg, #0a0a0a 50%, #00ffff 50%);
  }

  .retro-preview {
    background: linear-gradient(45deg, #1a1a1a 50%, #ffb000 50%);
  }

  .sunset-preview {
    background: linear-gradient(45deg, #f97721 50%, #1e1e1e 50%);
  }

  .ocean-preview {
    background: linear-gradient(45deg, #0077be 50%, #ffffff 50%);
  }

  .forest-preview {
    background: linear-gradient(45deg, #228b22 50%, #f5f5f5 50%);
  }

  .lavender-preview {
    background: linear-gradient(45deg, #86608e 50%, #e6e6fa 50%);
  }

  .crimson-preview {
    background: linear-gradient(45deg, #dc143c 50%, #ffffff 50%);
  }

  .gold-preview {
    background: linear-gradient(45deg, #ffd700 50%, #1c1c1c 50%);
  }

  .mint-preview {
    background: linear-gradient(45deg, #3eb489 50%, #f5fffa 50%);
  }

  .royal-preview {
    background: linear-gradient(45deg, #4169e1 50%, #ffffff 50%);
  }

  .rose-preview {
    background: linear-gradient(45deg, #ffe4e1 50%, #8b4513 50%);
  }

  .sky-preview {
    background: linear-gradient(45deg, #87ceeb 50%, #000000 50%);
  }

  .sand-preview {
    background: linear-gradient(45deg, #f4a460 50%, #4a2c2a 50%);
  }

  .plum-preview {
    background: linear-gradient(45deg, #dda0dd 50%, #3b1e3b 50%);
  }

  .peach-preview {
    background: linear-gradient(45deg, #ffdab9 50%, #5a3e36 50%);
  }

  .olive-preview {
    background: linear-gradient(45deg, #808000 50%, #f5f5dc 50%);
  }

  .navy-preview {
    background: linear-gradient(45deg, #000080 50%, #ffffff 50%);
  }

  .mocha-preview {
    background: linear-gradient(45deg, #d2b48c 50%, #3e2723 50%);
  }

  .lilac-preview {
    background: linear-gradient(45deg, #c8a2c8 50%, #4b0082 50%);
  }

  .honey-preview {
    background: linear-gradient(45deg, #ffb300 50%, #4e342e 50%);
  }

  .grape-preview {
    background: linear-gradient(45deg, #6f2da8 50%, #f0e6f2 50%);
  }

  .emerald-preview {
    background: linear-gradient(45deg, #50c878 50%, #000000 50%);
  }

  .denim-preview {
    background: linear-gradient(45deg, #1560bd 50%, #ffffff 50%);
  }

  .cherry-preview {
    background: linear-gradient(45deg, #d2042d 50%, #fffafa 50%);
  }

  .rainbow-preview {
    background: linear-gradient(45deg, #1a1a1a 50%, hsl(var(--main-hue), 80%, 70%) 50%);
  }

  .charcoal-preview {
    background: linear-gradient(45deg, #36454f 50%, #f5f5f5 50%);
  }

  /* Mode icon states */
  html:not(.dark) .sun-icon {
    opacity: 1;
  }

  html:not(.dark) .moon-icon {
    opacity: 0;
  }

  html.dark .sun-icon {
    opacity: 0;
  }

  html.dark .moon-icon {
    opacity: 1;
  }
</style>