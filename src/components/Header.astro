---
import DiagonalStripe from './DiagonalStripe.astro';

const navItems = [
  { label: 'ALLISON PEÃ‘A', href: '/', hotkey: null },
  { label: 'PROJECTS', href: '/projects', hotkey: 'p' },
  { label: 'BLOG', href: '/_blog', hotkey: 'b' },
  { label: 'ABOUT', href: '/about', hotkey: 'a' },
  { label: 'CONTACT', href: '/contact', hotkey: 'c' }
];
---

<div>
  <header class="fixed top-6 left-6 right-6 z-[100] pointer-events-none">
    <div class="flex items-start justify-between gap-2 flex-wrap">
      <div class="flex items-start gap-2 flex-wrap">
        {navItems.map((item) => (
          <a 
            href={item.href}
            class="flex items-center gap-1.5 px-2 py-1 h-8 bg-secondary border border-main font-grotesk text-sm font-semibold text-main no-underline pointer-events-auto hover:bg-main hover:text-secondary active:bg-main active:text-secondary nav-link"
            data-hotkey={item.hotkey}
            aria-label={item.hotkey ? `${item.label} (Press ${item.hotkey.toUpperCase()})` : item.label}
          >
            {item.hotkey && <span class="text-xs font-bold font-mono">[{item.hotkey.toUpperCase()}]</span>}
            <span class="font-semibold">{item.label}</span>
          </a>
        ))}
      </div>

      <div class="flex items-center gap-1 pointer-events-auto">
        <!-- Mode Toggle -->
        <button id="mode-toggle" class="w-8 h-8 border border-main bg-secondary flex items-center justify-center relative hover:bg-main group" aria-label="Cambiar modo">
          <!-- Sun icon for light mode -->
          <svg class="w-3.5 h-3.5 text-main absolute transition-opacity duration-150 group-hover:text-secondary sun-icon" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24">
            <circle cx="12" cy="12" r="5"/>
            <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/>
          </svg>
          
          <!-- Moon icon for dark mode -->
          <svg class="w-3.5 h-3.5 text-main absolute transition-opacity duration-150 group-hover:text-secondary moon-icon opacity-0" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24">
            <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
          </svg>
        </button>

        <!-- Theme Selector -->
        <div class="relative theme-selector">
          <button id="theme-toggle" class="w-8 h-8 border border-main bg-secondary flex items-center justify-center hover:bg-main" aria-label="Cambiar tema">
            <div class="w-3.5 h-3.5 border border-main theme-preview-current classic-preview"></div>
          </button>
          
          <div class="absolute top-full mt-1 right-0 bg-secondary border border-main min-w-32 opacity-0 invisible transform -translate-y-2 transition-all duration-150 z-[100] theme-dropdown">
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option" data-theme="classic">
              <div class="w-3 h-3 border border-main flex-shrink-0 classic-preview"></div>
              <span>CLASSIC</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option" data-theme="terminal">
              <div class="w-3 h-3 border border-main flex-shrink-0 terminal-preview"></div>
              <span>TERMINAL</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option" data-theme="matrix">
              <div class="w-3 h-3 border border-main flex-shrink-0 matrix-preview"></div>
              <span>MATRIX</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option" data-theme="vscode">
              <div class="w-3 h-3 border border-main flex-shrink-0 vscode-preview"></div>
              <span>VSCODE</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer border-b border-main font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option" data-theme="hacker">
              <div class="w-3 h-3 border border-main flex-shrink-0 hacker-preview"></div>
              <span>HACKER</span>
            </div>
            <div class="flex items-center gap-2 p-2 cursor-pointer font-mono text-xs font-semibold text-main hover:bg-main hover:text-secondary theme-option" data-theme="cyber">
              <div class="w-3 h-3 border border-main flex-shrink-0 cyber-preview"></div>
              <span>CYBER</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </header>
  
  <DiagonalStripe height="120px" margin="16" />
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    // Navigation elements
    const navLinks = document.querySelectorAll('.nav-link');
    const currentPath = window.location.pathname;

    // Theme elements
    const themeToggle = document.getElementById('theme-toggle');
    const themeDropdown = document.querySelector('.theme-dropdown');
    const themeOptions = document.querySelectorAll('.theme-option');
    const modeToggle = document.getElementById('mode-toggle');
    const currentThemePreview = document.querySelector('.theme-preview-current');

    // Load saved settings
    const savedTheme = localStorage.getItem('theme') || 'classic';
    const savedMode = localStorage.getItem('mode') || 'light';
    
    applyTheme(savedTheme);
    applyMode(savedMode);
    updateActiveThemeOption(savedTheme);
    updateCurrentThemePreview(savedTheme);

    // Navigation: Set active state based on current page
    navLinks.forEach(link => {
      const href = link.getAttribute('href');
      if (href && (href === currentPath || (currentPath.startsWith(href) && href !== '/'))) {
        link.classList.add('!bg-main', '!text-secondary');
      }
      
      // Prevent default click behavior and handle on mouseup
      link.addEventListener('click', (e: Event) => {
        e.preventDefault();
      });
      
      link.addEventListener('mouseup', () => {
        const href = link.getAttribute('href');
        if (href) {
          window.location.href = href;
        }
      });
    });

    // Mode toggle (dark/light)
    modeToggle?.addEventListener('click', () => {
      const isDark = document.documentElement.classList.contains('dark');
      const newMode = isDark ? 'light' : 'dark';
      applyMode(newMode);
      localStorage.setItem('mode', newMode);
    });

    // Theme dropdown toggle
    themeToggle?.addEventListener('click', (e: Event) => {
      e.stopPropagation();
      themeDropdown?.classList.toggle('opacity-0');
      themeDropdown?.classList.toggle('invisible');
      themeDropdown?.classList.toggle('-translate-y-2');
    });

    // Handle theme selection
    themeOptions.forEach(option => {
      option.addEventListener('click', (e: Event) => {
        e.stopPropagation();
        const theme = (option as HTMLElement).dataset.theme;
        if (theme) {
          applyTheme(theme);
          localStorage.setItem('theme', theme);
          updateActiveThemeOption(theme);
          updateCurrentThemePreview(theme);
          themeDropdown?.classList.add('opacity-0', 'invisible', '-translate-y-2');
        }
      });
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', () => {
      themeDropdown?.classList.add('opacity-0', 'invisible', '-translate-y-2');
    });

    // Keyboard navigation
    function handleKeydown(e: KeyboardEvent) {
      // Only trigger if not typing in an input
      const target = e.target as HTMLElement;
      if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') return;
      
      const key = e.key.toLowerCase();
      const navLink = document.querySelector(`[data-hotkey="${key}"]`) as HTMLElement;
      
      if (navLink && navLink.dataset.hotkey && !e.ctrlKey && !e.metaKey && !e.altKey) {
        e.preventDefault();
        
        // Visual feedback
        navLink.classList.add('!bg-main', '!text-secondary');
        setTimeout(() => {
          navLink.classList.remove('!bg-main', '!text-secondary');
        }, 150);
        
        // Navigate
        const href = navLink.getAttribute('href');
        if (href) {
          window.location.href = href;
        }
      }
    }

    document.addEventListener('keydown', handleKeydown);

    // Theme functions
    function applyTheme(theme: string) {
      document.documentElement.setAttribute('data-theme', theme);
    }

    function applyMode(mode: string) {
      document.documentElement.classList.toggle('dark', mode === 'dark');
      
      // Update icon visibility
      const sunIcon = document.querySelector('.sun-icon');
      const moonIcon = document.querySelector('.moon-icon');
      
      if (mode === 'dark') {
        sunIcon?.classList.add('opacity-0');
        sunIcon?.classList.remove('opacity-100');
        moonIcon?.classList.add('opacity-100');
        moonIcon?.classList.remove('opacity-0');
      } else {
        sunIcon?.classList.add('opacity-100');
        sunIcon?.classList.remove('opacity-0');
        moonIcon?.classList.add('opacity-0');
        moonIcon?.classList.remove('opacity-100');
      }
    }

    function updateActiveThemeOption(theme: string) {
      themeOptions.forEach(option => {
        if ((option as HTMLElement).dataset.theme === theme) {
          option.classList.add('!bg-main', '!text-secondary');
        } else {
          option.classList.remove('!bg-main', '!text-secondary');
        }
      });
    }

    function updateCurrentThemePreview(theme: string) {
      if (currentThemePreview) {
        currentThemePreview.className = `w-3.5 h-3.5 border border-main theme-preview-current ${theme}-preview`;
      }
    }

    // Show hotkey hints on first visit
    const hasSeenHints = localStorage.getItem('nav-hints-seen');
    if (!hasSeenHints) {
      setTimeout(() => {
        const hints = document.createElement('div');
        hints.innerHTML = `
          <div style="
            position: fixed; 
            top: 50%; 
            left: 50%; 
            transform: translate(-50%, -50%); 
            background: rgba(0,0,0,0.9); 
            color: white; 
            padding: 1rem; 
            border-radius: 8px; 
            font-size: 0.875rem;
            z-index: 1000;
            backdrop-filter: blur(10px);
          ">
            ðŸ’¡ Tip: Use keyboard shortcuts to navigate (P, B, A, C)
            <button onclick="this.parentElement.parentElement.remove(); localStorage.setItem('nav-hints-seen', 'true')" 
                    style="margin-left: 1rem; padding: 0.25rem 0.5rem; background: transparent; border: 1px solid white; color: white; border-radius: 4px; cursor: pointer;">
              Got it
            </button>
          </div>
        `;
        document.body.appendChild(hints);
      }, 2000);
    }
  });
</script>

<style>
  /* Theme previews */
  .classic-preview {
    background: linear-gradient(45deg, #000000 50%, #ffffff 50%);
  }

  .terminal-preview {
    background: linear-gradient(45deg, #1f2937 50%, #4ade80 50%);
  }

  .matrix-preview {
    background: linear-gradient(45deg, #14532d 50%, #22c55e 50%);
  }

  .vscode-preview {
    background: linear-gradient(45deg, #374151 50%, #3b82f6 50%);
  }

  .hacker-preview {
    background: linear-gradient(45deg, #292524 50%, #f97316 50%);
  }

  .cyber-preview {
    background: linear-gradient(45deg, #164e63 50%, #06b6d4 50%);
  }

  /* Mode icon states */
  html:not(.dark) .sun-icon {
    opacity: 1;
  }

  html:not(.dark) .moon-icon {
    opacity: 0;
  }

  html.dark .sun-icon {
    opacity: 0;
  }

  html.dark .moon-icon {
    opacity: 1;
  }
</style>