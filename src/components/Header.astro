--- 
import { themes } from '../data/themes.js';
import HeaderControls from './HeaderControls.tsx';
import LanguageSwitcher from './LanguageSwitcher.tsx';
import { getLangFromUrl } from '@/i18n/utils';
import { useTranslations } from '@/i18n/utils';
import { defaultLang } from '@/i18n/ui';

const currentLocale = getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname;
const t = useTranslations(currentLocale);

const navItems = [
  { label: 'ALLISON PEÃ‘A', href: '/', hotkey: null },
  { label: t('nav.projects').toUpperCase(), href: '/projects', hotkey: 'p' },
  { label: t('nav.blog').toUpperCase(), href: '/_blog', hotkey: 'b' },
  { label: t('nav.about').toUpperCase(), href: '/about', hotkey: 'a' },
  { label: t('nav.contact').toUpperCase(), href: '/contact', hotkey: 'c' }
];

---

 
<header class="sticky top-4 z-[100] flex justify-center mx-auto max-w-[var(--max-w-size)]">
  <div class="max-w-[1280px] w-full px-4">
    <div class="flex items-start justify-between gap-2 flex-nowrap diagonal-stripe px-4 py-2">
      <div class="flex items-start gap-x-2 gap-y-1 flex-wrap flex-1 mr-2">
        {navItems.map((item, index) => (
          <a 
            href={item.href}
            class="flex items-center gap-1.5 px-2 py-1 h-7 md:h-8 bg-secondary border border-main font-grotesk text-sm !font-thin text-main no-underline pointer-events-auto hover:bg-main hover:text-secondary active:bg-main active:text-secondary nav-link"
            data-hotkey={item.hotkey}
            aria-label={item.hotkey ? `${item.label} (Press ${item.hotkey.toUpperCase()})` : item.label}
          >
            {item.hotkey && <span class="text-xs font-bold font-mono">[{item.hotkey.toUpperCase()}]</span>}
            <span class="font-semibold">{item.label}</span>
          </a>
        ))}
      </div>

      <div class="flex items-center gap-2 flex-shrink-0">
        <!-- Static placeholder buttons that match React component dimensions -->
        <div class="flex justify-end items-center gap-x-4 gap-y-1 pointer-events-none" id="header-controls-placeholder">
          <!-- Mode Toggle Placeholder -->
          <div class="w-7 h-7 md:w-auto md:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border border-main">
              <div class="flex items-center gap-2">
                <div class="w-3.5 h-3.5 flex-shrink-0">
                  <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24">
                    <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
                    <line x1="8" y1="21" x2="16" y2="21"></line>
                    <line x1="12" y1="17" x2="12" y2="21"></line>
                  </svg>
                </div>
                <span class="hidden md:block font-mono text-xs font-semibold text-main">SYSTEM</span>
              </div>
            </div>
            <div class="hidden md:flex items-center justify-center w-8 bg-secondary border border-main border-l-0">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
          
          <!-- Theme Switcher Placeholder -->
          <div class="w-7 h-7 md:w-full md:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border border-main">
              <div class="flex items-center gap-2 w-full">
                <div class="w-4 h-4 border border-main flex-shrink-0 bg-secondary"></div>
                <span class="hidden md:block font-mono text-xs font-semibold text-main flex-1 text-left">VOID</span>
              </div>
            </div>
            <div class="hidden md:flex items-center justify-center w-8 bg-secondary border border-main border-l-0">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
          
          <!-- Language Switcher Placeholder -->
          <div class="w-7 h-7 md:w-auto md:h-8 inline-flex">
            <div class="flex items-center justify-center px-3 py-2 bg-secondary border border-main">
              <div class="flex items-center gap-2">
                <span class="font-mono text-xs font-semibold text-main">ES</span>
              </div>
            </div>
            <div class="hidden md:flex items-center justify-center w-8 bg-secondary border border-main border-l-0">
              <svg class="w-4 h-4 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
        </div>
        
        <!-- React components replace placeholders when loaded -->
        <div class="flex justify-end items-center gap-x-4 gap-y-1 pointer-events-auto" id="header-controls-react" style="display: none;">
          <HeaderControls themes={themes} client:load />
          <LanguageSwitcher initialLocale={currentLocale} client:load />
        </div>
      </div>
    </div>
  
  </header>
  

 

<script>
  // Hide static placeholders when React components mount
  function hideStaticPlaceholders() {
    const placeholder = document.getElementById('header-controls-placeholder');
    if (placeholder) {
      placeholder.style.display = 'none';
    }
  }

  // Show static placeholders if React components fail to load
  function showStaticPlaceholders() {
    const placeholder = document.getElementById('header-controls-placeholder');
    if (placeholder) {
      placeholder.style.display = 'flex';
    }
  }

  // Show React components and hide placeholders
  function showReactComponents() {
    const placeholder = document.getElementById('header-controls-placeholder');
    const reactContainer = document.getElementById('header-controls-react');
    
    if (placeholder && reactContainer) {
      placeholder.style.display = 'none';
      reactContainer.style.display = 'flex';
    }
  }

  // Check if React components are ready
  function checkReactComponents() {
    const reactContainer = document.getElementById('header-controls-react');
    if (reactContainer && reactContainer.children.length > 0) {
      // Check if any React component has actual content (not just loading state)
      const hasContent = Array.from(reactContainer.children).some(child => 
        child.querySelector('button') !== null
      );
      if (hasContent) {
        showReactComponents();
      } else {
        // React components are loading, try again soon
        setTimeout(checkReactComponents, 50);
      }
    } else {
      // React components not ready, try again
      setTimeout(checkReactComponents, 50);
    }
  }

  // Keep only navigation keyboard shortcuts
  document.addEventListener('astro:page-load', () => {
    // Start checking for React components
    checkReactComponents();
    // Navigation elements
    const navLinks = document.querySelectorAll('.nav-link');
    const currentPath = window.location.pathname;

    // Navigation: Set active state based on current page
    navLinks.forEach(link => {
      const href = link.getAttribute('href');
      if (href && (href === currentPath || (currentPath.startsWith(href) && href !== '/'))) {
        link.classList.add('!bg-main', '!text-secondary');
      }
      
      // Prevent default click behavior and handle on mouseup
      link.addEventListener('click', (e: Event) => {
        e.preventDefault();
      });
      
      link.addEventListener('mouseup', () => {
        const href = link.getAttribute('href');
        if (href) {
          window.location.href = href;
        }
      });
    });

    // Keyboard navigation for main nav only
    function handleKeydown(e: KeyboardEvent) {
      // Only trigger if not typing in an input
      const target = e.target as HTMLElement;
      if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') return;
      
      const key = e.key.toLowerCase();
      const navLink = document.querySelector(`[data-hotkey="${key}"]`) as HTMLElement;
      
      if (navLink && navLink.dataset.hotkey && !e.ctrlKey && !e.metaKey && !e.altKey) {
        e.preventDefault();
        
        // Visual feedback
        navLink.classList.add('!bg-main', '!text-secondary');
        setTimeout(() => {
          navLink.classList.remove('!bg-main', '!text-secondary');
        }, 150);
        
        // Navigate
        const href = navLink.getAttribute('href');
        if (href) {
          window.location.href = href;
        }
      }
    }

    document.addEventListener('keydown', handleKeydown);
  });
</script>

<style>

  /* Theme previews using CSS variables */
  .void-preview { 
    background: linear-gradient(45deg, var(--void-colorful) 50%, var(--void-contrasty) 50%); 
    border-color: var(--void-contrasty) !important;
  }
  .phantom-preview { 
    background: linear-gradient(45deg, var(--phantom-colorful) 50%, var(--phantom-contrasty) 50%); 
    border-color: var(--phantom-contrasty) !important;
  }
  .azure-preview { 
    background: linear-gradient(45deg, var(--azure-colorful) 50%, var(--azure-contrasty) 50%); 
    border-color: var(--azure-contrasty) !important;
  }
  .ember-preview { 
    background: linear-gradient(45deg, var(--ember-colorful) 50%, var(--ember-contrasty) 50%); 
    border-color: var(--ember-contrasty) !important;
  }
  .violet-preview { 
    background: linear-gradient(45deg, var(--violet-colorful) 50%, var(--violet-contrasty) 50%); 
    border-color: var(--violet-contrasty) !important;
  }
  .crimson-preview { 
    background: linear-gradient(45deg, var(--crimson-colorful) 50%, var(--crimson-contrasty) 50%); 
    border-color: var(--crimson-contrasty) !important;
  }
  .forest-preview { 
    background: linear-gradient(45deg, var(--forest-colorful) 50%, var(--forest-contrasty) 50%); 
    border-color: var(--forest-contrasty) !important;
  }

  /* Mode icon states */
  html:not(.dark) .sun-icon {
    opacity: 1;
  }

  html:not(.dark) .moon-icon {
    opacity: 0;
  }

  html.dark .sun-icon {
    opacity: 0;
  }

  html.dark .moon-icon {
    opacity: 1;
  }

  .system-icon {
    opacity: 0;
  }

 

  /* Hide hotkeys on mobile devices */
  @media (max-width: 768px) {
    /* Hide navigation hotkeys */
    .nav-link .text-xs.font-bold.font-mono {
      display: none;
    }
    
    /* Hide theme dropdown hotkeys */
    .theme-dropdown .border-t.border-main {
      display: none;
    }
  }
</style>